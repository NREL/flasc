Search.setIndex({"alltitles": {"API Documentation": [[120, null]], "Citation": [[127, "citation"]], "Data filtering": [[121, "data-filtering"]], "Energy ratio analysis": [[122, null]], "Example Tall data format for a three turbine wind farm": [[121, "id1"]], "Example Wide data format for a three turbine wind farm": [[121, "id2"]], "Examples demonstrating energy ratio usage": [[122, "examples-demonstrating-energy-ratio-usage"]], "FLASC documentation": [[124, null]], "FLASC examples": [[123, "flasc-examples"]], "FLASC package": [[127, "flasc-package"]], "Format data to a wide table format (if necessary)": [[121, "format-data-to-a-wide-table-format-if-necessary"]], "Getting started": [[123, null]], "Install FLASC": [[123, "install-flasc"]], "Installation": [[125, null]], "Installation for developers": [[125, "installation-for-developers"]], "Licensing": [[126, null]], "Literature": [[127, "literature"]], "Overview": [[127, null]], "Questions": [[127, "questions"]], "Raw data processing": [[121, null]], "Raw data retrieval": [[121, "raw-data-retrieval"]], "Total uplift": [[128, null]], "a_00_initial_download.py": [[121, "a-00-initial-download-py"]], "a_01_to_common_format_df.py": [[121, "a-01-to-common-format-df-py"]], "a_02_basic_filters.py": [[121, "a-02-basic-filters-py"]], "a_03_check_sensor_stuck_faults.py": [[121, "a-03-check-sensor-stuck-faults-py"]], "a_04_wspowercurve_filtering_code.py": [[121, "a-04-wspowercurve-filtering-code-py"]], "a_04_wspowercurve_filtering_gui.py (optional)": [[121, "a-04-wspowercurve-filtering-gui-py-optional"]], "a_05a_plot_faults_with_layout.py (optional)": [[121, "a-05a-plot-faults-with-layout-py-optional"]], "a_05b_cross_compare_wd_measurement_calibrations.py (optional)": [[121, "a-05b-cross-compare-wd-measurement-calibrations-py-optional"]], "a_06a_determine_timeshift_datasources.py (optional)": [[121, "a-06a-determine-timeshift-datasources-py-optional"]], "a_06b_apply_timeshift_dfs.py (optional)": [[121, "a-06b-apply-timeshift-dfs-py-optional"]], "a_07a_estimate_wd_bias_per_turbine.py": [[121, "a-07a-estimate-wd-bias-per-turbine-py"]], "a_07b_wd_bias_to_df.py": [[121, "a-07b-wd-bias-to-df-py"]], "a_08_plot_energy_ratios.py": [[121, "a-08-plot-energy-ratios-py"]], "flasc.analysis": [[0, null], [127, "flasc-analysis"]], "flasc.analysis.energy_ratio": [[1, null]], "flasc.analysis.energy_ratio.compute_energy_ratio": [[2, null]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, null]], "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper": [[4, null]], "flasc.analysis.energy_ratio_input": [[5, null]], "flasc.analysis.energy_ratio_input.EnergyRatioInput": [[6, null]], "flasc.analysis.energy_ratio_input.generate_block_list": [[7, null]], "flasc.analysis.energy_ratio_output": [[8, null]], "flasc.analysis.energy_ratio_output.EnergyRatioOutput": [[9, null]], "flasc.analysis.total_uplift": [[10, null]], "flasc.analysis.total_uplift.compute_total_uplift": [[11, null]], "flasc.data_processing": [[12, null], [127, "flasc-data-processing"]], "flasc.data_processing.dataframe_manipulations": [[13, null]], "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows": [[14, null]], "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing": [[15, null]], "flasc.data_processing.dataframe_manipulations.df_reduce_precision": [[16, null]], "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates": [[17, null]], "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates": [[18, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_ti": [[19, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_wd": [[20, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_ws": [[21, null]], "flasc.data_processing.dataframe_manipulations.get_column_mean": [[22, null]], "flasc.data_processing.dataframe_manipulations.get_num_turbines": [[23, null]], "flasc.data_processing.dataframe_manipulations.is_day_or_night": [[24, null]], "flasc.data_processing.dataframe_manipulations.make_df_wide": [[25, null]], "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color": [[26, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines": [[27, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines": [[28, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines": [[29, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius": [[30, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines": [[31, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines": [[32, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines": [[33, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius": [[34, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines": [[35, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine": [[36, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines": [[37, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines": [[38, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines": [[39, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines": [[40, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines": [[41, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius": [[42, null]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[43, null]], "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation": [[44, null]], "flasc.data_processing.filtering": [[45, null]], "flasc.data_processing.filtering.FlascFilter": [[46, null]], "flasc.data_processing.filtering.df_get_no_faulty_measurements": [[47, null]], "flasc.data_processing.filtering.df_mark_turbdata_as_faulty": [[48, null]], "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines": [[49, null]], "flasc.data_processing.find_sensor_faults": [[50, null]], "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults": [[51, null]], "flasc.data_processing.northing_offset": [[52, null]], "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency": [[53, null]], "flasc.data_processing.time_operations": [[54, null]], "flasc.data_processing.time_operations.df_downsample": [[55, null]], "flasc.data_processing.time_operations.df_movingaverage": [[56, null]], "flasc.data_processing.time_operations.df_resample_by_interpolation": [[57, null]], "flasc.data_processing.time_operations.flatten_cols": [[58, null]], "flasc.model_fitting": [[59, null], [127, "flasc-model-fitting"]], "flasc.model_fitting.floris_sensitivity_analysis": [[60, null]], "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis": [[61, null]], "flasc.model_fitting.floris_tuning": [[62, null]], "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss": [[63, null]], "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter": [[64, null]], "flasc.model_fitting.floris_tuning.select_best_wd_std": [[65, null]], "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift": [[66, null]], "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses": [[67, null]], "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er": [[68, null]], "flasc.model_fitting.turbulence_estimator": [[69, null]], "flasc.model_fitting.turbulence_estimator.ti_estimator": [[70, null]], "flasc.model_fitting.yaw_pow_fitting": [[71, null]], "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting": [[72, null]], "flasc.utilities": [[73, null], [127, "flasc-utilities"]], "flasc.utilities.circular_statistics": [[74, null]], "flasc.utilities.circular_statistics.calc_wd_mean_radial": [[75, null]], "flasc.utilities.circular_statistics.calculate_wd_statistics": [[76, null]], "flasc.utilities.energy_ratio_utilities": [[77, null]], "flasc.utilities.energy_ratio_utilities.add_bin_weights": [[78, null]], "flasc.utilities.energy_ratio_utilities.add_power_ref": [[79, null]], "flasc.utilities.energy_ratio_utilities.add_power_test": [[80, null]], "flasc.utilities.energy_ratio_utilities.add_reflected_rows": [[81, null]], "flasc.utilities.energy_ratio_utilities.add_wd": [[82, null]], "flasc.utilities.energy_ratio_utilities.add_wd_bin": [[83, null]], "flasc.utilities.energy_ratio_utilities.add_ws": [[84, null]], "flasc.utilities.energy_ratio_utilities.add_ws_bin": [[85, null]], "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe": [[86, null]], "flasc.utilities.energy_ratio_utilities.bin_column": [[87, null]], "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs": [[88, null]], "flasc.utilities.energy_ratio_utilities.cut": [[89, null]], "flasc.utilities.energy_ratio_utilities.filter_all_nulls": [[90, null]], "flasc.utilities.energy_ratio_utilities.filter_any_nulls": [[91, null]], "flasc.utilities.floris_tools": [[92, null]], "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table": [[93, null]], "flasc.utilities.floris_tools.calc_floris_approx_table": [[94, null]], "flasc.utilities.floris_tools.get_all_dependent_turbines": [[95, null]], "flasc.utilities.floris_tools.get_all_impacting_turbines": [[96, null]], "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical": [[97, null]], "flasc.utilities.floris_tools.get_dependent_turbines_by_wd": [[98, null]], "flasc.utilities.floris_tools.get_turbs_in_radius": [[99, null]], "flasc.utilities.floris_tools.get_upstream_turbs_floris": [[100, null]], "flasc.utilities.floris_tools.interpolate_floris_from_df_approx": [[101, null]], "flasc.utilities.lookup_table_tools": [[102, null]], "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant": [[103, null]], "flasc.utilities.optimization": [[104, null]], "flasc.utilities.optimization.estimate_ti": [[105, null]], "flasc.utilities.optimization.find_timeshift_between_dfs": [[106, null]], "flasc.utilities.optimization.match_y_curves_by_offset": [[107, null]], "flasc.utilities.tuner_utilities": [[108, null]], "flasc.utilities.tuner_utilities.nested_get": [[109, null]], "flasc.utilities.tuner_utilities.nested_set": [[110, null]], "flasc.utilities.tuner_utilities.replicate_nan_values": [[111, null]], "flasc.utilities.tuner_utilities.resim_floris": [[112, null]], "flasc.utilities.utilities": [[113, null]], "flasc.utilities.utilities.estimate_dt": [[114, null]], "flasc.utilities.utilities.get_num_turbines": [[115, null]], "flasc.utilities.utilities.interp_with_max_gap": [[116, null]], "flasc.utilities.utilities_examples": [[117, null]], "flasc.utilities.utilities_examples.load_floris_artificial": [[118, null]], "flasc.utilities.utilities_examples.load_floris_smarteole": [[119, null]]}, "docnames": ["_autosummary/flasc.analysis", "_autosummary/flasc.analysis.energy_ratio", "_autosummary/flasc.analysis.energy_ratio.compute_energy_ratio", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", "_autosummary/flasc.analysis.energy_ratio_input", "_autosummary/flasc.analysis.energy_ratio_input.EnergyRatioInput", "_autosummary/flasc.analysis.energy_ratio_input.generate_block_list", "_autosummary/flasc.analysis.energy_ratio_output", "_autosummary/flasc.analysis.energy_ratio_output.EnergyRatioOutput", "_autosummary/flasc.analysis.total_uplift", "_autosummary/flasc.analysis.total_uplift.compute_total_uplift", "_autosummary/flasc.data_processing", "_autosummary/flasc.data_processing.dataframe_manipulations", "_autosummary/flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", "_autosummary/flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", "_autosummary/flasc.data_processing.dataframe_manipulations.df_reduce_precision", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ti", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_wd", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ws", "_autosummary/flasc.data_processing.dataframe_manipulations.get_column_mean", "_autosummary/flasc.data_processing.dataframe_manipulations.get_num_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.is_day_or_night", "_autosummary/flasc.data_processing.dataframe_manipulations.make_df_wide", "_autosummary/flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", "_autosummary/flasc.data_processing.filtering", "_autosummary/flasc.data_processing.filtering.FlascFilter", "_autosummary/flasc.data_processing.filtering.df_get_no_faulty_measurements", "_autosummary/flasc.data_processing.filtering.df_mark_turbdata_as_faulty", "_autosummary/flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", "_autosummary/flasc.data_processing.find_sensor_faults", "_autosummary/flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", "_autosummary/flasc.data_processing.northing_offset", "_autosummary/flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", "_autosummary/flasc.data_processing.time_operations", "_autosummary/flasc.data_processing.time_operations.df_downsample", "_autosummary/flasc.data_processing.time_operations.df_movingaverage", "_autosummary/flasc.data_processing.time_operations.df_resample_by_interpolation", "_autosummary/flasc.data_processing.time_operations.flatten_cols", "_autosummary/flasc.model_fitting", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", "_autosummary/flasc.model_fitting.floris_tuning", "_autosummary/flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wd_std", "_autosummary/flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", "_autosummary/flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", "_autosummary/flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", "_autosummary/flasc.model_fitting.turbulence_estimator", "_autosummary/flasc.model_fitting.turbulence_estimator.ti_estimator", "_autosummary/flasc.model_fitting.yaw_pow_fitting", "_autosummary/flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", "_autosummary/flasc.utilities", "_autosummary/flasc.utilities.circular_statistics", "_autosummary/flasc.utilities.circular_statistics.calc_wd_mean_radial", "_autosummary/flasc.utilities.circular_statistics.calculate_wd_statistics", "_autosummary/flasc.utilities.energy_ratio_utilities", "_autosummary/flasc.utilities.energy_ratio_utilities.add_bin_weights", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_ref", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_test", "_autosummary/flasc.utilities.energy_ratio_utilities.add_reflected_rows", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd_bin", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws_bin", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_column", "_autosummary/flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", "_autosummary/flasc.utilities.energy_ratio_utilities.cut", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_all_nulls", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_any_nulls", "_autosummary/flasc.utilities.floris_tools", "_autosummary/flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", "_autosummary/flasc.utilities.floris_tools.calc_floris_approx_table", "_autosummary/flasc.utilities.floris_tools.get_all_dependent_turbines", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", "_autosummary/flasc.utilities.floris_tools.get_dependent_turbines_by_wd", "_autosummary/flasc.utilities.floris_tools.get_turbs_in_radius", "_autosummary/flasc.utilities.floris_tools.get_upstream_turbs_floris", "_autosummary/flasc.utilities.floris_tools.interpolate_floris_from_df_approx", "_autosummary/flasc.utilities.lookup_table_tools", "_autosummary/flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", "_autosummary/flasc.utilities.optimization", "_autosummary/flasc.utilities.optimization.estimate_ti", "_autosummary/flasc.utilities.optimization.find_timeshift_between_dfs", "_autosummary/flasc.utilities.optimization.match_y_curves_by_offset", "_autosummary/flasc.utilities.tuner_utilities", "_autosummary/flasc.utilities.tuner_utilities.nested_get", "_autosummary/flasc.utilities.tuner_utilities.nested_set", "_autosummary/flasc.utilities.tuner_utilities.replicate_nan_values", "_autosummary/flasc.utilities.tuner_utilities.resim_floris", "_autosummary/flasc.utilities.utilities", "_autosummary/flasc.utilities.utilities.estimate_dt", "_autosummary/flasc.utilities.utilities.get_num_turbines", "_autosummary/flasc.utilities.utilities.interp_with_max_gap", "_autosummary/flasc.utilities.utilities_examples", "_autosummary/flasc.utilities.utilities_examples.load_floris_artificial", "_autosummary/flasc.utilities.utilities_examples.load_floris_smarteole", "api", "data_processing", "energy_ratio", "getting_started", "index", "installation", "licensing", "overview", "total_uplift"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["_autosummary/flasc.analysis.rst", "_autosummary/flasc.analysis.energy_ratio.rst", "_autosummary/flasc.analysis.energy_ratio.compute_energy_ratio.rst", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.rst", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.rst", "_autosummary/flasc.analysis.energy_ratio_input.rst", "_autosummary/flasc.analysis.energy_ratio_input.EnergyRatioInput.rst", "_autosummary/flasc.analysis.energy_ratio_input.generate_block_list.rst", "_autosummary/flasc.analysis.energy_ratio_output.rst", "_autosummary/flasc.analysis.energy_ratio_output.EnergyRatioOutput.rst", "_autosummary/flasc.analysis.total_uplift.rst", "_autosummary/flasc.analysis.total_uplift.compute_total_uplift.rst", "_autosummary/flasc.data_processing.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_drop_nan_rows.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_reduce_precision.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ti.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_wd.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ws.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.get_column_mean.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.get_num_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.is_day_or_night.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.make_df_wide.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.rst", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.rst", "_autosummary/flasc.data_processing.filtering.rst", "_autosummary/flasc.data_processing.filtering.FlascFilter.rst", "_autosummary/flasc.data_processing.filtering.df_get_no_faulty_measurements.rst", "_autosummary/flasc.data_processing.filtering.df_mark_turbdata_as_faulty.rst", "_autosummary/flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines.rst", "_autosummary/flasc.data_processing.find_sensor_faults.rst", "_autosummary/flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults.rst", "_autosummary/flasc.data_processing.northing_offset.rst", "_autosummary/flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency.rst", "_autosummary/flasc.data_processing.time_operations.rst", "_autosummary/flasc.data_processing.time_operations.df_downsample.rst", "_autosummary/flasc.data_processing.time_operations.df_movingaverage.rst", "_autosummary/flasc.data_processing.time_operations.df_resample_by_interpolation.rst", "_autosummary/flasc.data_processing.time_operations.flatten_cols.rst", "_autosummary/flasc.model_fitting.rst", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.rst", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.rst", "_autosummary/flasc.model_fitting.floris_tuning.rst", "_autosummary/flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss.rst", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wake_model_parameter.rst", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wd_std.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_wd_std_for_er.rst", "_autosummary/flasc.model_fitting.turbulence_estimator.rst", "_autosummary/flasc.model_fitting.turbulence_estimator.ti_estimator.rst", "_autosummary/flasc.model_fitting.yaw_pow_fitting.rst", "_autosummary/flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.rst", "_autosummary/flasc.utilities.rst", "_autosummary/flasc.utilities.circular_statistics.rst", "_autosummary/flasc.utilities.circular_statistics.calc_wd_mean_radial.rst", "_autosummary/flasc.utilities.circular_statistics.calculate_wd_statistics.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_bin_weights.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_ref.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_test.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_reflected_rows.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd_bin.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws_bin.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_column.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.cut.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_all_nulls.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_any_nulls.rst", "_autosummary/flasc.utilities.floris_tools.rst", "_autosummary/flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table.rst", "_autosummary/flasc.utilities.floris_tools.calc_floris_approx_table.rst", "_autosummary/flasc.utilities.floris_tools.get_all_dependent_turbines.rst", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines.rst", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical.rst", "_autosummary/flasc.utilities.floris_tools.get_dependent_turbines_by_wd.rst", "_autosummary/flasc.utilities.floris_tools.get_turbs_in_radius.rst", "_autosummary/flasc.utilities.floris_tools.get_upstream_turbs_floris.rst", "_autosummary/flasc.utilities.floris_tools.interpolate_floris_from_df_approx.rst", "_autosummary/flasc.utilities.lookup_table_tools.rst", "_autosummary/flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant.rst", "_autosummary/flasc.utilities.optimization.rst", "_autosummary/flasc.utilities.optimization.estimate_ti.rst", "_autosummary/flasc.utilities.optimization.find_timeshift_between_dfs.rst", "_autosummary/flasc.utilities.optimization.match_y_curves_by_offset.rst", "_autosummary/flasc.utilities.tuner_utilities.rst", "_autosummary/flasc.utilities.tuner_utilities.nested_get.rst", "_autosummary/flasc.utilities.tuner_utilities.nested_set.rst", "_autosummary/flasc.utilities.tuner_utilities.replicate_nan_values.rst", "_autosummary/flasc.utilities.tuner_utilities.resim_floris.rst", "_autosummary/flasc.utilities.utilities.rst", "_autosummary/flasc.utilities.utilities.estimate_dt.rst", "_autosummary/flasc.utilities.utilities.get_num_turbines.rst", "_autosummary/flasc.utilities.utilities.interp_with_max_gap.rst", "_autosummary/flasc.utilities.utilities_examples.rst", "_autosummary/flasc.utilities.utilities_examples.load_floris_artificial.rst", "_autosummary/flasc.utilities.utilities_examples.load_floris_smarteole.rst", "api.rst", "data_processing.rst", "energy_ratio.md", "getting_started.md", "index.md", "installation.md", "licensing.rst", "overview.md", "total_uplift.md"], "indexentries": {"_check_measurements() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator._check_measurements", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator._check_measurements", false]], "_compute_energy_ratio_bootstrap() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio._compute_energy_ratio_bootstrap", false]], "_compute_energy_ratio_single() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio._compute_energy_ratio_single", false]], "_compute_total_uplift_bootstrap() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift._compute_total_uplift_bootstrap", false]], "_compute_total_uplift_single() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift._compute_total_uplift_single", false]], "_compute_ws_counts() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput._compute_ws_counts", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput._compute_ws_counts", false]], "_create_evals_dataframe() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._create_evals_dataframe", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._create_evals_dataframe", false]], "_fi_set_ws_wd_ti() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools._fi_set_ws_wd_ti", false]], "_find_sensor_stuck_single_timearray() (in module flasc.data_processing.find_sensor_faults)": [[50, "flasc.data_processing.find_sensor_faults._find_sensor_stuck_single_timearray", false]], "_get_all_unique_flags() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter._get_all_unique_flags", false], [46, "flasc.data_processing.filtering.FlascFilter._get_all_unique_flags", false]], "_get_energy_ratio() (in module flasc.analysis.energy_ratio_heterogeneity_mapper)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper._get_energy_ratio", false]], "_get_energy_ratios_allbins() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._get_energy_ratios_allbins", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._get_energy_ratios_allbins", false]], "_get_mean_power_curves() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter._get_mean_power_curves", false], [46, "flasc.data_processing.filtering.FlascFilter._get_mean_power_curves", false]], "_get_model_params_dict() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._get_model_params_dict", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._get_model_params_dict", false]], "_interpolate_with_max_gap() (in module flasc.utilities.utilities)": [[113, "flasc.utilities.utilities._interpolate_with_max_gap", false]], "_load_er_input_for_wd_bias() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._load_er_input_for_wd_bias", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._load_er_input_for_wd_bias", false]], "_plot_top_sensor_faults() (in module flasc.data_processing.find_sensor_faults)": [[50, "flasc.data_processing.find_sensor_faults._plot_top_sensor_faults", false]], "_process_single_wd() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper._process_single_wd", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper._process_single_wd", false]], "_reset_mean_power_curves() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter._reset_mean_power_curves", false], [46, "flasc.data_processing.filtering.FlascFilter._reset_mean_power_curves", false]], "_reset_outputs() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator._reset_outputs", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator._reset_outputs", false]], "_set_col_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_n_closest_upstream_turbines", false]], "_set_col_by_radius_from_turbine() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_radius_from_turbine", false]], "_set_col_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_turbines", false]], "_set_col_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_upstream_turbines", false]], "_set_col_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_upstream_turbines_in_radius", false]], "_setup_logger() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._setup_logger", false]], "add_bin_weights() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_bin_weights", false], [78, "flasc.utilities.energy_ratio_utilities.add_bin_weights", false]], "add_gaussian_blending_to_floris_approx_table() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", false], [93, "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", false]], "add_power_ref() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_power_ref", false], [79, "flasc.utilities.energy_ratio_utilities.add_power_ref", false]], "add_power_test() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_power_test", false], [80, "flasc.utilities.energy_ratio_utilities.add_power_test", false]], "add_reflected_rows() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_reflected_rows", false], [81, "flasc.utilities.energy_ratio_utilities.add_reflected_rows", false]], "add_wd() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_wd", false], [82, "flasc.utilities.energy_ratio_utilities.add_wd", false]], "add_wd_bin() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_wd_bin", false], [83, "flasc.utilities.energy_ratio_utilities.add_wd_bin", false]], "add_ws() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_ws", false], [84, "flasc.utilities.energy_ratio_utilities.add_ws", false]], "add_ws_bin() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.add_ws_bin", false], [85, "flasc.utilities.energy_ratio_utilities.add_ws_bin", false]], "bias_estimation (class in flasc.data_processing.energy_ratio_wd_bias_estimation)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", false]], "bin_and_group_dataframe() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", false], [86, "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", false]], "bin_column() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.bin_column", false], [87, "flasc.utilities.energy_ratio_utilities.bin_column", false]], "calc_floris_approx_table() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.calc_floris_approx_table", false], [94, "flasc.utilities.floris_tools.calc_floris_approx_table", false]], "calc_wd_mean_radial() (in module flasc.utilities.circular_statistics)": [[74, "flasc.utilities.circular_statistics.calc_wd_mean_radial", false], [75, "flasc.utilities.circular_statistics.calc_wd_mean_radial", false]], "calculate_baseline() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.calculate_baseline", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.calculate_baseline", false]], "calculate_curves() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.calculate_curves", false], [72, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.calculate_curves", false]], "calculate_wd_statistics() (in module flasc.utilities.circular_statistics)": [[74, "flasc.utilities.circular_statistics.calculate_wd_statistics", false], [76, "flasc.utilities.circular_statistics.calculate_wd_statistics", false]], "calculate_wfpower_for_samples() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.calculate_wfpower_for_samples", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.calculate_wfpower_for_samples", false]], "check_compute_energy_ratio_inputs() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", false], [88, "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", false]], "compute_energy_ratio() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio.compute_energy_ratio", false], [2, "flasc.analysis.energy_ratio.compute_energy_ratio", false]], "compute_total_uplift() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift.compute_total_uplift", false], [11, "flasc.analysis.total_uplift.compute_total_uplift", false]], "crosscheck_northing_offset_consistency() (in module flasc.data_processing.northing_offset)": [[52, "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", false], [53, "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", false]], "cut() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.cut", false], [89, "flasc.utilities.energy_ratio_utilities.cut", false]], "df_downsample() (in module flasc.data_processing.time_operations)": [[54, "flasc.data_processing.time_operations.df_downsample", false], [55, "flasc.data_processing.time_operations.df_downsample", false]], "df_drop_nan_rows() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", false], [14, "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", false]], "df_find_and_fill_data_gaps_with_missing() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", false], [15, "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", false]], "df_get_no_faulty_measurements() (in module flasc.data_processing.filtering)": [[45, "flasc.data_processing.filtering.df_get_no_faulty_measurements", false], [47, "flasc.data_processing.filtering.df_get_no_faulty_measurements", false]], "df_mark_turbdata_as_faulty() (in module flasc.data_processing.filtering)": [[45, "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", false], [48, "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", false]], "df_movingaverage() (in module flasc.data_processing.time_operations)": [[54, "flasc.data_processing.time_operations.df_movingaverage", false], [56, "flasc.data_processing.time_operations.df_movingaverage", false]], "df_reduce_precision() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_reduce_precision", false], [16, "flasc.data_processing.dataframe_manipulations.df_reduce_precision", false]], "df_resample_by_interpolation() (in module flasc.data_processing.time_operations)": [[54, "flasc.data_processing.time_operations.df_resample_by_interpolation", false], [57, "flasc.data_processing.time_operations.df_resample_by_interpolation", false]], "df_sort_and_find_duplicates() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", false], [17, "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", false]], "df_sort_and_fix_duplicates() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", false], [18, "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", false]], "energyratioinput (class in flasc.analysis.energy_ratio_input)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput", false]], "energyratiooutput (class in flasc.analysis.energy_ratio_output)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput", false]], "estimate_cos_pp_fit() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.estimate_cos_pp_fit", false], [72, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.estimate_cos_pp_fit", false]], "estimate_dt() (in module flasc.utilities.utilities)": [[113, "flasc.utilities.utilities.estimate_dt", false], [114, "flasc.utilities.utilities.estimate_dt", false]], "estimate_farmaveraged_ti() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_farmaveraged_ti", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_farmaveraged_ti", false]], "estimate_heterogeneity() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.estimate_heterogeneity", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.estimate_heterogeneity", false]], "estimate_local_tis() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_local_tis", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_local_tis", false]], "estimate_ti() (in module flasc.utilities.optimization)": [[104, "flasc.utilities.optimization.estimate_ti", false], [105, "flasc.utilities.optimization.estimate_ti", false]], "estimate_wd_bias() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.estimate_wd_bias", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.estimate_wd_bias", false]], "evaluate_overall_wake_loss() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", false], [63, "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", false]], "filter_all_nulls() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.filter_all_nulls", false], [90, "flasc.utilities.energy_ratio_utilities.filter_all_nulls", false]], "filter_any_nulls() (in module flasc.utilities.energy_ratio_utilities)": [[77, "flasc.utilities.energy_ratio_utilities.filter_any_nulls", false], [91, "flasc.utilities.energy_ratio_utilities.filter_any_nulls", false]], "filter_by_condition() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.filter_by_condition", false], [46, "flasc.data_processing.filtering.FlascFilter.filter_by_condition", false]], "filter_by_floris_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.filter_by_floris_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.filter_by_floris_power_curve", false]], "filter_by_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.filter_by_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.filter_by_power_curve", false]], "filter_by_sensor_stuck_faults() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.filter_by_sensor_stuck_faults", false], [46, "flasc.data_processing.filtering.FlascFilter.filter_by_sensor_stuck_faults", false]], "filter_df_by_faulty_impacting_turbines() (in module flasc.data_processing.filtering)": [[45, "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", false], [49, "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", false]], "filter_df_by_ti() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", false], [19, "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", false]], "filter_df_by_wd() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", false], [20, "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", false]], "filter_df_by_ws() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", false], [21, "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", false]], "find_sensor_stuck_faults() (in module flasc.data_processing.find_sensor_faults)": [[50, "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", false], [51, "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", false]], "find_timeshift_between_dfs() (in module flasc.utilities.optimization)": [[104, "flasc.utilities.optimization.find_timeshift_between_dfs", false], [106, "flasc.utilities.optimization.find_timeshift_between_dfs", false]], "flasc.analysis": [[0, "module-flasc.analysis", false]], "flasc.analysis.energy_ratio": [[1, "module-flasc.analysis.energy_ratio", false]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, "module-flasc.analysis.energy_ratio_heterogeneity_mapper", false]], "flasc.analysis.energy_ratio_input": [[5, "module-flasc.analysis.energy_ratio_input", false]], "flasc.analysis.energy_ratio_output": [[8, "module-flasc.analysis.energy_ratio_output", false]], "flasc.analysis.total_uplift": [[10, "module-flasc.analysis.total_uplift", false]], "flasc.data_processing": [[12, "module-flasc.data_processing", false]], "flasc.data_processing.dataframe_manipulations": [[13, "module-flasc.data_processing.dataframe_manipulations", false]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[43, "module-flasc.data_processing.energy_ratio_wd_bias_estimation", false]], "flasc.data_processing.filtering": [[45, "module-flasc.data_processing.filtering", false]], "flasc.data_processing.find_sensor_faults": [[50, "module-flasc.data_processing.find_sensor_faults", false]], "flasc.data_processing.northing_offset": [[52, "module-flasc.data_processing.northing_offset", false]], "flasc.data_processing.time_operations": [[54, "module-flasc.data_processing.time_operations", false]], "flasc.model_fitting": [[59, "module-flasc.model_fitting", false]], "flasc.model_fitting.floris_sensitivity_analysis": [[60, "module-flasc.model_fitting.floris_sensitivity_analysis", false]], "flasc.model_fitting.floris_tuning": [[62, "module-flasc.model_fitting.floris_tuning", false]], "flasc.model_fitting.turbulence_estimator": [[69, "module-flasc.model_fitting.turbulence_estimator", false]], "flasc.model_fitting.yaw_pow_fitting": [[71, "module-flasc.model_fitting.yaw_pow_fitting", false]], "flasc.utilities": [[73, "module-flasc.utilities", false]], "flasc.utilities.circular_statistics": [[74, "module-flasc.utilities.circular_statistics", false]], "flasc.utilities.energy_ratio_utilities": [[77, "module-flasc.utilities.energy_ratio_utilities", false]], "flasc.utilities.floris_tools": [[92, "module-flasc.utilities.floris_tools", false]], "flasc.utilities.lookup_table_tools": [[102, "module-flasc.utilities.lookup_table_tools", false]], "flasc.utilities.optimization": [[104, "module-flasc.utilities.optimization", false]], "flasc.utilities.tuner_utilities": [[108, "module-flasc.utilities.tuner_utilities", false]], "flasc.utilities.utilities": [[113, "module-flasc.utilities.utilities", false]], "flasc.utilities.utilities_examples": [[117, "module-flasc.utilities.utilities_examples", false]], "flascfilter (class in flasc.data_processing.filtering)": [[45, "flasc.data_processing.filtering.FlascFilter", false], [46, "flasc.data_processing.filtering.FlascFilter", false]], "flatten_cols() (in module flasc.data_processing.time_operations)": [[54, "flasc.data_processing.time_operations.flatten_cols", false], [58, "flasc.data_processing.time_operations.flatten_cols", false]], "floris_set_ws_wd_ti() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.floris_set_ws_wd_ti", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.floris_set_ws_wd_ti", false]], "floris_sobol_analysis (class in flasc.model_fitting.floris_sensitivity_analysis)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", false]], "generate_block_list() (in module flasc.analysis.energy_ratio_input)": [[5, "flasc.analysis.energy_ratio_input.generate_block_list", false], [7, "flasc.analysis.energy_ratio_input.generate_block_list", false]], "generate_floris_hetmap() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.generate_floris_hetmap", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.generate_floris_hetmap", false]], "generate_samples() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.generate_samples", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.generate_samples", false]], "get_all_dependent_turbines() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_all_dependent_turbines", false], [95, "flasc.utilities.floris_tools.get_all_dependent_turbines", false]], "get_all_impacting_turbines() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_all_impacting_turbines", false], [96, "flasc.utilities.floris_tools.get_all_impacting_turbines", false]], "get_all_impacting_turbines_geometrical() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", false], [97, "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", false]], "get_column_mean() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.get_column_mean", false], [22, "flasc.data_processing.dataframe_manipulations.get_column_mean", false]], "get_dependent_turbines_by_wd() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", false], [98, "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", false]], "get_df() (flasc.analysis.energy_ratio_input.energyratioinput method)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput.get_df", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput.get_df", false]], "get_df() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.get_df", false], [46, "flasc.data_processing.filtering.FlascFilter.get_df", false]], "get_num_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.get_num_turbines", false], [23, "flasc.data_processing.dataframe_manipulations.get_num_turbines", false]], "get_num_turbines() (in module flasc.utilities.utilities)": [[113, "flasc.utilities.utilities.get_num_turbines", false], [115, "flasc.utilities.utilities.get_num_turbines", false]], "get_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.get_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.get_power_curve", false]], "get_sobol_sensitivity_indices() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.get_sobol_sensitivity_indices", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.get_sobol_sensitivity_indices", false]], "get_turbine_order() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_order", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_order", false]], "get_turbine_pairs() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_pairs", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_pairs", false]], "get_turbs_in_radius() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_turbs_in_radius", false], [99, "flasc.utilities.floris_tools.get_turbs_in_radius", false]], "get_upstream_turbs_floris() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.get_upstream_turbs_floris", false], [100, "flasc.utilities.floris_tools.get_upstream_turbs_floris", false]], "get_yaw_angles_interpolant() (in module flasc.utilities.lookup_table_tools)": [[102, "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", false], [103, "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", false]], "heterogeneity_mapper (class in flasc.analysis.energy_ratio_heterogeneity_mapper)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", false]], "interp_with_max_gap() (in module flasc.utilities.utilities)": [[113, "flasc.utilities.utilities.interp_with_max_gap", false], [116, "flasc.utilities.utilities.interp_with_max_gap", false]], "interpolate_floris_from_df_approx() (in module flasc.utilities.floris_tools)": [[92, "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", false], [101, "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", false]], "is_day_or_night() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.is_day_or_night", false], [24, "flasc.data_processing.dataframe_manipulations.is_day_or_night", false]], "load_floris_artificial() (in module flasc.utilities.utilities_examples)": [[117, "flasc.utilities.utilities_examples.load_floris_artificial", false], [118, "flasc.utilities.utilities_examples.load_floris_artificial", false]], "load_floris_smarteole() (in module flasc.utilities.utilities_examples)": [[117, "flasc.utilities.utilities_examples.load_floris_smarteole", false], [119, "flasc.utilities.utilities_examples.load_floris_smarteole", false]], "logger (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation property)": [[44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.logger", false]], "make_df_wide() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.make_df_wide", false], [25, "flasc.data_processing.dataframe_manipulations.make_df_wide", false]], "match_y_curves_by_offset() (in module flasc.utilities.optimization)": [[104, "flasc.utilities.optimization.match_y_curves_by_offset", false], [107, "flasc.utilities.optimization.match_y_curves_by_offset", false]], "module": [[0, "module-flasc.analysis", false], [1, "module-flasc.analysis.energy_ratio", false], [3, "module-flasc.analysis.energy_ratio_heterogeneity_mapper", false], [5, "module-flasc.analysis.energy_ratio_input", false], [8, "module-flasc.analysis.energy_ratio_output", false], [10, "module-flasc.analysis.total_uplift", false], [12, "module-flasc.data_processing", false], [13, "module-flasc.data_processing.dataframe_manipulations", false], [43, "module-flasc.data_processing.energy_ratio_wd_bias_estimation", false], [45, "module-flasc.data_processing.filtering", false], [50, "module-flasc.data_processing.find_sensor_faults", false], [52, "module-flasc.data_processing.northing_offset", false], [54, "module-flasc.data_processing.time_operations", false], [59, "module-flasc.model_fitting", false], [60, "module-flasc.model_fitting.floris_sensitivity_analysis", false], [62, "module-flasc.model_fitting.floris_tuning", false], [69, "module-flasc.model_fitting.turbulence_estimator", false], [71, "module-flasc.model_fitting.yaw_pow_fitting", false], [73, "module-flasc.utilities", false], [74, "module-flasc.utilities.circular_statistics", false], [77, "module-flasc.utilities.energy_ratio_utilities", false], [92, "module-flasc.utilities.floris_tools", false], [102, "module-flasc.utilities.lookup_table_tools", false], [104, "module-flasc.utilities.optimization", false], [108, "module-flasc.utilities.tuner_utilities", false], [113, "module-flasc.utilities.utilities", false], [117, "module-flasc.utilities.utilities_examples", false]], "nested_get() (in module flasc.utilities.tuner_utilities)": [[108, "flasc.utilities.tuner_utilities.nested_get", false], [109, "flasc.utilities.tuner_utilities.nested_get", false]], "nested_set() (in module flasc.utilities.tuner_utilities)": [[108, "flasc.utilities.tuner_utilities.nested_set", false], [110, "flasc.utilities.tuner_utilities.nested_set", false]], "plot() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.plot", false], [72, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.plot", false]], "plot_convergence() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_convergence", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_convergence", false]], "plot_cost_function_farm() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_function_farm", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_function_farm", false]], "plot_cost_functions_turbines() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_functions_turbines", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_functions_turbines", false]], "plot_energy_ratios() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_energy_ratios", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_energy_ratios", false]], "plot_energy_ratios() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.plot_energy_ratios", false], [44, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.plot_energy_ratios", false]], "plot_farm_mean_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_farm_mean_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_farm_mean_power_curve", false]], "plot_filters_custom_scatter() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter", false]], "plot_filters_custom_scatter_bokeh() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter_bokeh", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter_bokeh", false]], "plot_filters_in_time() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time", false]], "plot_filters_in_time_bokeh() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time_bokeh", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time_bokeh", false]], "plot_filters_in_ws_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_ws_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_ws_power_curve", false]], "plot_flowfield() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_flowfield", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_flowfield", false]], "plot_graphs() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_graphs", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_graphs", false]], "plot_layout() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_layout", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_layout", false]], "plot_postprocessed_in_ws_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.plot_postprocessed_in_ws_power_curve", false], [46, "flasc.data_processing.filtering.FlascFilter.plot_postprocessed_in_ws_power_curve", false]], "plot_power_bars() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_power_bars", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_power_bars", false]], "plot_sobol_results() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_sobol_results", false], [61, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_sobol_results", false]], "plot_sun_altitude_with_day_night_color() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", false], [26, "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", false]], "plot_uplift() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_uplift", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_uplift", false]], "replicate_nan_values() (in module flasc.utilities.tuner_utilities)": [[108, "flasc.utilities.tuner_utilities.replicate_nan_values", false], [111, "flasc.utilities.tuner_utilities.replicate_nan_values", false]], "resample_energy_table() (flasc.analysis.energy_ratio_input.energyratioinput method)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput.resample_energy_table", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput.resample_energy_table", false]], "reset_filters() (flasc.data_processing.filtering.flascfilter method)": [[45, "flasc.data_processing.filtering.FlascFilter.reset_filters", false], [46, "flasc.data_processing.filtering.FlascFilter.reset_filters", false]], "resim_floris() (in module flasc.utilities.tuner_utilities)": [[108, "flasc.utilities.tuner_utilities.resim_floris", false], [112, "flasc.utilities.tuner_utilities.resim_floris", false]], "select_best_wake_model_parameter() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", false], [64, "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", false]], "select_best_wd_std() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.select_best_wd_std", false], [65, "flasc.model_fitting.floris_tuning.select_best_wd_std", false]], "set_df() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.set_df", false], [72, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.set_df", false]], "set_measurements() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator.set_measurements", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator.set_measurements", false]], "set_pow_ref_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", false], [27, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", false]], "set_pow_ref_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", false], [28, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", false]], "set_pow_ref_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", false], [29, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", false]], "set_pow_ref_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", false], [30, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", false]], "set_ti_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", false], [31, "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", false]], "set_ti_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", false], [32, "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", false]], "set_ti_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", false], [33, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", false]], "set_ti_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", false], [34, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", false]], "set_wd_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", false], [35, "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", false]], "set_wd_by_radius_from_turbine() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", false], [36, "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", false]], "set_wd_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", false], [37, "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", false]], "set_ws_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", false], [38, "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", false]], "set_ws_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", false], [39, "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", false]], "set_ws_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", false], [40, "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", false]], "set_ws_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", false], [41, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", false]], "set_ws_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", false], [42, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", false]], "sweep_deflection_parameter_for_total_uplift() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", false], [66, "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", false]], "sweep_velocity_model_parameter_for_overall_wake_losses() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", false], [67, "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", false]], "sweep_wd_std_for_er() (in module flasc.model_fitting.floris_tuning)": [[62, "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", false], [68, "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", false]], "ti_estimator (class in flasc.model_fitting.turbulence_estimator)": [[69, "flasc.model_fitting.turbulence_estimator.ti_estimator", false], [70, "flasc.model_fitting.turbulence_estimator.ti_estimator", false]], "yaw_pow_fitting (class in flasc.model_fitting.yaw_pow_fitting)": [[71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", false], [72, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", false]]}, "objects": {"flasc": [[0, 0, 0, "-", "analysis"], [12, 0, 0, "-", "data_processing"], [59, 0, 0, "-", "model_fitting"], [73, 0, 0, "-", "utilities"]], "flasc.analysis": [[1, 0, 0, "-", "energy_ratio"], [3, 0, 0, "-", "energy_ratio_heterogeneity_mapper"], [5, 0, 0, "-", "energy_ratio_input"], [8, 0, 0, "-", "energy_ratio_output"], [10, 0, 0, "-", "total_uplift"]], "flasc.analysis.energy_ratio": [[1, 1, 1, "", "_compute_energy_ratio_bootstrap"], [1, 1, 1, "", "_compute_energy_ratio_single"], [2, 1, 1, "", "compute_energy_ratio"]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, 1, 1, "", "_get_energy_ratio"], [4, 2, 1, "", "heterogeneity_mapper"]], "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper": [[4, 3, 1, "", "_process_single_wd"], [4, 3, 1, "", "estimate_heterogeneity"], [4, 3, 1, "", "generate_floris_hetmap"], [4, 3, 1, "", "plot_graphs"], [4, 3, 1, "", "plot_layout"]], "flasc.analysis.energy_ratio_input": [[6, 2, 1, "", "EnergyRatioInput"], [7, 1, 1, "", "generate_block_list"]], "flasc.analysis.energy_ratio_input.EnergyRatioInput": [[6, 3, 1, "", "get_df"], [6, 3, 1, "", "resample_energy_table"]], "flasc.analysis.energy_ratio_output": [[9, 2, 1, "", "EnergyRatioOutput"]], "flasc.analysis.energy_ratio_output.EnergyRatioOutput": [[9, 3, 1, "", "_compute_ws_counts"], [9, 3, 1, "", "plot_energy_ratios"], [9, 3, 1, "", "plot_uplift"]], "flasc.analysis.total_uplift": [[10, 1, 1, "", "_compute_total_uplift_bootstrap"], [10, 1, 1, "", "_compute_total_uplift_single"], [11, 1, 1, "", "compute_total_uplift"]], "flasc.data_processing": [[13, 0, 0, "-", "dataframe_manipulations"], [43, 0, 0, "-", "energy_ratio_wd_bias_estimation"], [45, 0, 0, "-", "filtering"], [50, 0, 0, "-", "find_sensor_faults"], [52, 0, 0, "-", "northing_offset"], [54, 0, 0, "-", "time_operations"]], "flasc.data_processing.dataframe_manipulations": [[13, 1, 1, "", "_set_col_by_n_closest_upstream_turbines"], [13, 1, 1, "", "_set_col_by_radius_from_turbine"], [13, 1, 1, "", "_set_col_by_turbines"], [13, 1, 1, "", "_set_col_by_upstream_turbines"], [13, 1, 1, "", "_set_col_by_upstream_turbines_in_radius"], [14, 1, 1, "", "df_drop_nan_rows"], [15, 1, 1, "", "df_find_and_fill_data_gaps_with_missing"], [16, 1, 1, "", "df_reduce_precision"], [17, 1, 1, "", "df_sort_and_find_duplicates"], [18, 1, 1, "", "df_sort_and_fix_duplicates"], [19, 1, 1, "", "filter_df_by_ti"], [20, 1, 1, "", "filter_df_by_wd"], [21, 1, 1, "", "filter_df_by_ws"], [22, 1, 1, "", "get_column_mean"], [23, 1, 1, "", "get_num_turbines"], [24, 1, 1, "", "is_day_or_night"], [25, 1, 1, "", "make_df_wide"], [26, 1, 1, "", "plot_sun_altitude_with_day_night_color"], [27, 1, 1, "", "set_pow_ref_by_n_closest_upstream_turbines"], [28, 1, 1, "", "set_pow_ref_by_turbines"], [29, 1, 1, "", "set_pow_ref_by_upstream_turbines"], [30, 1, 1, "", "set_pow_ref_by_upstream_turbines_in_radius"], [31, 1, 1, "", "set_ti_by_all_turbines"], [32, 1, 1, "", "set_ti_by_turbines"], [33, 1, 1, "", "set_ti_by_upstream_turbines"], [34, 1, 1, "", "set_ti_by_upstream_turbines_in_radius"], [35, 1, 1, "", "set_wd_by_all_turbines"], [36, 1, 1, "", "set_wd_by_radius_from_turbine"], [37, 1, 1, "", "set_wd_by_turbines"], [38, 1, 1, "", "set_ws_by_all_turbines"], [39, 1, 1, "", "set_ws_by_n_closest_upstream_turbines"], [40, 1, 1, "", "set_ws_by_turbines"], [41, 1, 1, "", "set_ws_by_upstream_turbines"], [42, 1, 1, "", "set_ws_by_upstream_turbines_in_radius"]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[44, 2, 1, "", "bias_estimation"]], "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation": [[44, 3, 1, "", "_get_energy_ratios_allbins"], [44, 3, 1, "", "_load_er_input_for_wd_bias"], [44, 3, 1, "", "_setup_logger"], [44, 3, 1, "", "calculate_baseline"], [44, 3, 1, "", "estimate_wd_bias"], [44, 4, 1, "", "logger"], [44, 3, 1, "", "plot_energy_ratios"]], "flasc.data_processing.filtering": [[46, 2, 1, "", "FlascFilter"], [47, 1, 1, "", "df_get_no_faulty_measurements"], [48, 1, 1, "", "df_mark_turbdata_as_faulty"], [49, 1, 1, "", "filter_df_by_faulty_impacting_turbines"]], "flasc.data_processing.filtering.FlascFilter": [[46, 3, 1, "", "_get_all_unique_flags"], [46, 3, 1, "", "_get_mean_power_curves"], [46, 3, 1, "", "_reset_mean_power_curves"], [46, 3, 1, "", "filter_by_condition"], [46, 3, 1, "", "filter_by_floris_power_curve"], [46, 3, 1, "", "filter_by_power_curve"], [46, 3, 1, "", "filter_by_sensor_stuck_faults"], [46, 3, 1, "", "get_df"], [46, 3, 1, "", "get_power_curve"], [46, 3, 1, "", "plot_farm_mean_power_curve"], [46, 3, 1, "", "plot_filters_custom_scatter"], [46, 3, 1, "", "plot_filters_custom_scatter_bokeh"], [46, 3, 1, "", "plot_filters_in_time"], [46, 3, 1, "", "plot_filters_in_time_bokeh"], [46, 3, 1, "", "plot_filters_in_ws_power_curve"], [46, 3, 1, "", "plot_postprocessed_in_ws_power_curve"], [46, 3, 1, "", "reset_filters"]], "flasc.data_processing.find_sensor_faults": [[50, 1, 1, "", "_find_sensor_stuck_single_timearray"], [50, 1, 1, "", "_plot_top_sensor_faults"], [51, 1, 1, "", "find_sensor_stuck_faults"]], "flasc.data_processing.northing_offset": [[53, 1, 1, "", "crosscheck_northing_offset_consistency"]], "flasc.data_processing.time_operations": [[55, 1, 1, "", "df_downsample"], [56, 1, 1, "", "df_movingaverage"], [57, 1, 1, "", "df_resample_by_interpolation"], [58, 1, 1, "", "flatten_cols"]], "flasc.model_fitting": [[60, 0, 0, "-", "floris_sensitivity_analysis"], [62, 0, 0, "-", "floris_tuning"], [69, 0, 0, "-", "turbulence_estimator"], [71, 0, 0, "-", "yaw_pow_fitting"]], "flasc.model_fitting.floris_sensitivity_analysis": [[61, 2, 1, "", "floris_sobol_analysis"]], "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis": [[61, 3, 1, "", "_create_evals_dataframe"], [61, 3, 1, "", "_get_model_params_dict"], [61, 3, 1, "", "calculate_wfpower_for_samples"], [61, 3, 1, "", "generate_samples"], [61, 3, 1, "", "get_sobol_sensitivity_indices"], [61, 3, 1, "", "plot_convergence"], [61, 3, 1, "", "plot_sobol_results"]], "flasc.model_fitting.floris_tuning": [[63, 1, 1, "", "evaluate_overall_wake_loss"], [64, 1, 1, "", "select_best_wake_model_parameter"], [65, 1, 1, "", "select_best_wd_std"], [66, 1, 1, "", "sweep_deflection_parameter_for_total_uplift"], [67, 1, 1, "", "sweep_velocity_model_parameter_for_overall_wake_losses"], [68, 1, 1, "", "sweep_wd_std_for_er"]], "flasc.model_fitting.turbulence_estimator": [[70, 2, 1, "", "ti_estimator"]], "flasc.model_fitting.turbulence_estimator.ti_estimator": [[70, 3, 1, "", "_check_measurements"], [70, 3, 1, "", "_reset_outputs"], [70, 3, 1, "", "estimate_farmaveraged_ti"], [70, 3, 1, "", "estimate_local_tis"], [70, 3, 1, "", "floris_set_ws_wd_ti"], [70, 3, 1, "", "get_turbine_order"], [70, 3, 1, "", "get_turbine_pairs"], [70, 3, 1, "", "plot_cost_function_farm"], [70, 3, 1, "", "plot_cost_functions_turbines"], [70, 3, 1, "", "plot_flowfield"], [70, 3, 1, "", "plot_power_bars"], [70, 3, 1, "", "set_measurements"]], "flasc.model_fitting.yaw_pow_fitting": [[72, 2, 1, "", "yaw_pow_fitting"]], "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting": [[72, 3, 1, "", "calculate_curves"], [72, 3, 1, "", "estimate_cos_pp_fit"], [72, 3, 1, "", "plot"], [72, 3, 1, "", "set_df"]], "flasc.utilities": [[74, 0, 0, "-", "circular_statistics"], [77, 0, 0, "-", "energy_ratio_utilities"], [92, 0, 0, "-", "floris_tools"], [102, 0, 0, "-", "lookup_table_tools"], [104, 0, 0, "-", "optimization"], [108, 0, 0, "-", "tuner_utilities"], [113, 0, 0, "-", "utilities"], [117, 0, 0, "-", "utilities_examples"]], "flasc.utilities.circular_statistics": [[75, 1, 1, "", "calc_wd_mean_radial"], [76, 1, 1, "", "calculate_wd_statistics"]], "flasc.utilities.energy_ratio_utilities": [[78, 1, 1, "", "add_bin_weights"], [79, 1, 1, "", "add_power_ref"], [80, 1, 1, "", "add_power_test"], [81, 1, 1, "", "add_reflected_rows"], [82, 1, 1, "", "add_wd"], [83, 1, 1, "", "add_wd_bin"], [84, 1, 1, "", "add_ws"], [85, 1, 1, "", "add_ws_bin"], [86, 1, 1, "", "bin_and_group_dataframe"], [87, 1, 1, "", "bin_column"], [88, 1, 1, "", "check_compute_energy_ratio_inputs"], [89, 1, 1, "", "cut"], [90, 1, 1, "", "filter_all_nulls"], [91, 1, 1, "", "filter_any_nulls"]], "flasc.utilities.floris_tools": [[92, 1, 1, "", "_fi_set_ws_wd_ti"], [93, 1, 1, "", "add_gaussian_blending_to_floris_approx_table"], [94, 1, 1, "", "calc_floris_approx_table"], [95, 1, 1, "", "get_all_dependent_turbines"], [96, 1, 1, "", "get_all_impacting_turbines"], [97, 1, 1, "", "get_all_impacting_turbines_geometrical"], [98, 1, 1, "", "get_dependent_turbines_by_wd"], [99, 1, 1, "", "get_turbs_in_radius"], [100, 1, 1, "", "get_upstream_turbs_floris"], [101, 1, 1, "", "interpolate_floris_from_df_approx"]], "flasc.utilities.lookup_table_tools": [[103, 1, 1, "", "get_yaw_angles_interpolant"]], "flasc.utilities.optimization": [[105, 1, 1, "", "estimate_ti"], [106, 1, 1, "", "find_timeshift_between_dfs"], [107, 1, 1, "", "match_y_curves_by_offset"]], "flasc.utilities.tuner_utilities": [[109, 1, 1, "", "nested_get"], [110, 1, 1, "", "nested_set"], [111, 1, 1, "", "replicate_nan_values"], [112, 1, 1, "", "resim_floris"]], "flasc.utilities.utilities": [[113, 1, 1, "", "_interpolate_with_max_gap"], [114, 1, 1, "", "estimate_dt"], [115, 1, 1, "", "get_num_turbines"], [116, 1, 1, "", "interp_with_max_gap"]], "flasc.utilities.utilities_examples": [[118, 1, 1, "", "load_floris_artificial"], [119, 1, 1, "", "load_floris_smarteole"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "terms": {"": [13, 15, 24, 45, 46, 49, 92, 94, 95, 96, 98, 100, 101, 102, 103, 117, 118, 119, 121, 122, 123, 127], "0": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 24, 43, 44, 45, 46, 49, 50, 51, 52, 53, 62, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 81, 83, 85, 86, 92, 93, 94, 95, 96, 97, 98, 100, 101, 104, 106, 117, 118, 119, 121, 127], "00": [92, 101], "00001": [92, 97], "001": [45, 46, 50, 51, 92, 94, 95, 96, 98], "01": [43, 44, 45, 46, 69, 70, 92, 94, 101, 121], "02": 121, "02_download_and_format_dataset": 123, "03": [92, 94, 101, 121], "03_energy_ratio": 122, "03d": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 121], "04": [43, 44, 121], "05": [45, 46, 50, 121], "06": [92, 94, 128], "07": 121, "08": [43, 44, 92, 101], "09": [92, 94], "0e": [45, 46], "0e6": [92, 101], "1": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 43, 44, 45, 46, 49, 54, 55, 56, 60, 61, 62, 66, 68, 71, 72, 77, 85, 86, 92, 93, 94, 97, 100, 101, 121, 127], "10": [5, 6, 7, 13, 15, 43, 44, 45, 46, 71, 72, 92, 94, 95, 96, 98, 101, 102, 103, 104, 106, 121], "100": [92, 94, 95, 96, 98, 101, 104, 106], "101": [92, 94], "102": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "103": [92, 94], "104": [92, 94, 95, 96, 98, 104, 106], "105": [3, 4, 92, 94, 97], "106": [92, 94, 95, 96, 98, 104, 106], "107": [92, 94], "108": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "109": [92, 94], "11": [3, 4, 45, 46, 92, 94, 101, 121], "110": [92, 94, 95, 96, 98, 104, 106], "111": [3, 4, 92, 94, 97], "112": [92, 94, 95, 96, 98, 104, 106], "113": [92, 94], "114": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "115": [92, 94], "116": [92, 94, 95, 96, 98, 104, 106], "117": [3, 4, 92, 94, 97], "118": [92, 94, 95, 96, 98, 104, 106], "119": [92, 94], "12": [3, 4, 45, 46, 92, 94, 95, 96, 97, 98, 101, 102, 103, 104, 106, 121], "120": [3, 4, 52, 53, 92, 94, 95, 96, 97, 98, 104, 106], "1202808": [92, 101], "121": [92, 94], "122": [92, 94, 95, 96, 98, 104, 106], "123": [3, 4, 92, 94, 97], "124": [92, 94, 95, 96, 98, 104, 106], "125": [92, 94], "1251108": [92, 101], "126": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "127": [92, 94], "128": [92, 94, 95, 96, 98, 104, 106], "129": [3, 4, 92, 94, 97], "13": [45, 46, 92, 94], "130": [92, 94, 95, 96, 98, 104, 106], "131": [92, 94], "132": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "133": [92, 94], "134": [92, 94, 95, 96, 98, 104, 106], "135": [3, 4, 92, 94, 97], "136": [92, 94, 95, 96, 98, 104, 106], "137": [92, 94], "138": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "139": [92, 94], "14": [45, 46, 92, 94, 95, 96, 98, 104, 106, 121], "140": [92, 94, 95, 96, 98, 104, 106], "141": [3, 4, 92, 94, 97], "142": [92, 94, 95, 96, 98, 104, 106], "143": [92, 94], "144": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "145": [92, 94], "146": [92, 94, 95, 96, 98, 104, 106], "14692690": [108, 109, 110], "147": [3, 4, 92, 94, 97], "148": [92, 94, 95, 96, 98, 104, 106], "149": [92, 94], "15": [3, 4, 45, 46, 71, 72, 92, 94, 97, 101, 121], "150": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "151": [92, 94], "152": [92, 94, 95, 96, 98, 104, 106], "153": [3, 4, 92, 94, 97], "154": [92, 94, 95, 96, 98, 104, 106], "155": [92, 94], "156": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "157": [92, 94], "158": [92, 94, 95, 96, 98, 104, 106], "159": [3, 4, 92, 94, 97], "16": [45, 46, 92, 94, 95, 96, 98, 104, 106], "160": [92, 94, 95, 96, 98, 104, 106], "161": [92, 94], "162": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "163": [92, 94], "164": [92, 94, 95, 96, 98, 104, 106], "165": [3, 4, 92, 94, 97], "166": [92, 94, 95, 96, 98, 104, 106], "167": [92, 94], "168": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "169": [92, 94], "17": [45, 46, 92, 94], "170": [92, 94, 95, 96, 98, 104, 106], "171": [3, 4, 92, 94, 97], "172": [92, 94, 95, 96, 98, 104, 106], "173": [92, 94], "174": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "175": [92, 94], "176": [92, 94, 95, 96, 98, 104, 106], "177": [3, 4, 92, 94, 97], "178": [92, 94, 95, 96, 98, 104, 106], "179": [92, 94], "18": [3, 4, 45, 46, 92, 94, 95, 96, 97, 98, 101, 104, 106], "180": [3, 4, 43, 44, 92, 94, 95, 96, 97, 98, 104, 106, 121], "1801": [92, 94], "181": [92, 94], "182": [92, 94, 95, 96, 98], "183": [3, 4, 92, 94, 97], "184": [92, 94, 95, 96, 98], "185": [92, 94], "186": [3, 4, 92, 94, 95, 96, 97, 98], "187": [92, 94], "188": [92, 94, 95, 96, 98], "189": [3, 4, 92, 94, 97], "19": [45, 46, 92, 94], "190": [92, 94, 95, 96, 98], "191": [92, 94], "192": [3, 4, 92, 94, 95, 96, 97, 98], "193": [92, 94], "194": [92, 94, 95, 96, 98], "195": [3, 4, 92, 94, 97], "196": [92, 94, 95, 96, 98], "197": [92, 94], "198": [3, 4, 92, 94, 95, 96, 97, 98], "199": [92, 94], "1hz": 121, "2": [1, 2, 3, 4, 10, 11, 13, 16, 43, 44, 45, 46, 49, 62, 66, 68, 69, 70, 77, 83, 86, 92, 94, 95, 96, 98, 100, 101, 102, 103, 104, 106, 121, 127], "20": [45, 46, 92, 94, 95, 96, 98, 101, 104, 106], "200": [43, 44, 60, 61, 92, 94, 95, 96, 98], "201": [3, 4, 92, 94, 97], "2018": [92, 101], "2019": [43, 44, 121, 123, 127], "202": [92, 94, 95, 96, 98], "2020": 121, "2022": [122, 127], "2024": 127, "203": [92, 94], "204": [3, 4, 92, 94, 95, 96, 97, 98], "205": [92, 94], "206": [92, 94, 95, 96, 98], "207": [3, 4, 92, 94, 97], "208": [92, 94, 95, 96, 98], "209": [92, 94], "21": [3, 4, 45, 46, 92, 94, 97], "210": [3, 4, 92, 94, 95, 96, 97, 98], "211": [92, 94], "212": [92, 94, 95, 96, 98], "213": [3, 4, 92, 94, 97, 101], "214": [92, 94, 95, 96, 98], "215": [92, 94, 101], "216": [3, 4, 92, 94, 95, 96, 97, 98], "217": [92, 94], "218": [92, 94, 95, 96, 98], "219": [3, 4, 92, 94, 97], "22": [45, 46, 92, 94, 95, 96, 98, 104, 106, 127], "220": [92, 94, 95, 96, 98], "221": [92, 94], "222": [3, 4, 92, 94, 95, 96, 97, 98], "223": [92, 94], "224": [92, 94, 95, 96, 98], "225": [3, 4, 92, 94, 97], "226": [92, 94, 95, 96, 98], "227": [92, 94], "228": [3, 4, 92, 94, 95, 96, 97, 98], "229": [92, 94], "22nd": 121, "23": [45, 46, 92, 94, 101], "230": [92, 94, 95, 96, 98], "231": [3, 4, 92, 94, 97], "232": [92, 94, 95, 96, 98], "233": [92, 94], "234": [3, 4, 92, 94, 95, 96, 97, 98], "235": [92, 94], "236": [92, 94, 95, 96, 98], "237": [3, 4, 92, 94, 97], "238": [92, 94, 95, 96, 98], "239": [92, 94], "23rd": 121, "24": [3, 4, 45, 46, 92, 94, 95, 96, 97, 98, 101, 104, 106], "240": [3, 4, 92, 94, 95, 96, 97, 98], "241": [92, 94], "242": [92, 94, 95, 96, 98], "243": [3, 4, 92, 94, 97], "244": [92, 94, 95, 96, 98], "245": [92, 94], "246": [3, 4, 92, 94, 95, 96, 97, 98], "247": [92, 94], "248": [92, 94, 95, 96, 98], "249": [3, 4, 92, 94, 97], "25": [45, 46, 92, 94, 101], "250": [71, 72, 92, 94, 95, 96, 98], "251": [92, 94], "252": [3, 4, 92, 94, 95, 96, 97, 98], "253": [92, 94], "254": [92, 94, 95, 96, 98], "255": [3, 4, 92, 94, 97], "256": [92, 94, 95, 96, 98], "257": [92, 94], "258": [3, 4, 92, 94, 95, 96, 97, 98], "259": [92, 94], "26": [92, 94, 95, 96, 98, 104, 106], "260": [92, 94, 95, 96, 98], "261": [3, 4, 92, 94, 97], "262": [92, 94, 95, 96, 98], "263": [92, 94], "264": [3, 4, 92, 94, 95, 96, 97, 98], "265": [92, 94], "266": [92, 94, 95, 96, 98], "267": [3, 4, 92, 94, 97], "268": [92, 94, 95, 96, 98], "269": [92, 94], "27": [3, 4, 92, 94, 97], "270": [3, 4, 92, 94, 95, 96, 97, 98], "271": [92, 94], "272": [92, 94, 95, 96, 98], "2725108": [92, 101], "273": [3, 4, 92, 94, 97], "274": [92, 94, 95, 96, 98], "275": [92, 94], "276": [3, 4, 92, 94, 95, 96, 97, 98], "277": [92, 94], "278": [92, 94, 95, 96, 98], "279": [3, 4, 92, 94, 97], "28": [92, 94, 95, 96, 98, 104, 106, 127], "280": [92, 94, 95, 96, 98], "281": [92, 94], "282": [3, 4, 92, 94, 95, 96, 97, 98], "283": [92, 94], "284": [92, 94, 95, 96, 98], "285": [3, 4, 92, 94, 97], "286": [92, 94, 95, 96, 98], "287": [92, 94], "288": [3, 4, 92, 94, 95, 96, 97, 98], "289": [92, 94], "29": [92, 94], "290": [92, 94, 95, 96, 98], "291": [3, 4, 92, 94, 97], "292": [92, 94, 95, 96, 98], "293": [92, 94], "294": [3, 4, 92, 94, 95, 96, 97, 98], "295": [92, 94], "2957021": [92, 101], "296": [92, 94, 95, 96, 98], "297": [3, 4, 92, 94, 97], "298": [92, 94, 95, 96, 98], "299": [92, 94], "3": [3, 4, 43, 44, 45, 46, 49, 50, 51, 92, 93, 94, 97, 101, 121, 126], "30": [3, 4, 92, 94, 95, 96, 97, 98, 101, 104, 106], "300": [3, 4, 50, 92, 94, 95, 96, 97, 98], "301": [92, 94], "302": [92, 94, 95, 96, 98], "303": [3, 4, 92, 94, 97], "304": [92, 94, 95, 96, 98], "305": [92, 94], "306": [3, 4, 92, 94, 95, 96, 97, 98], "307": [92, 94], "308": [92, 94, 95, 96, 98], "309": [3, 4, 92, 94, 97], "31": [92, 94, 101], "310": [92, 94, 95, 96, 98], "3100": 121, "311": [92, 94], "312": [3, 4, 92, 94, 95, 96, 97, 98], "313": [92, 94], "314": [92, 94, 95, 96, 98], "315": [3, 4, 92, 94, 97], "316": [92, 94, 95, 96, 98], "317": [92, 94], "318": [3, 4, 92, 94, 95, 96, 97, 98], "319": [92, 94], "32": [92, 94, 95, 96, 98, 104, 106], "320": [92, 94, 95, 96, 98], "3200": 121, "321": [3, 4, 92, 94, 97], "322": [92, 94, 95, 96, 98], "323": [92, 94], "32395": [92, 94], "32396": [92, 94], "32397": [92, 94], "32398": [92, 94], "32399": [92, 94, 101], "324": [3, 4, 92, 94, 95, 96, 97, 98], "32400": [92, 94, 101], "325": [92, 94], "326": [92, 94, 95, 96, 98], "327": [3, 4, 92, 94, 97], "328": [92, 94, 95, 96, 98], "329": [92, 94], "33": [3, 4, 92, 94, 97, 121], "330": [3, 4, 92, 94, 95, 96, 97, 98], "331": [92, 94], "332": [92, 94, 95, 96, 98], "333": [3, 4, 92, 94, 97], "334": [92, 94, 95, 96, 98], "335": [92, 94], "336": [3, 4, 92, 94, 95, 96, 97, 98], "337": [92, 94], "338": [92, 94, 95, 96, 98], "339": [3, 4, 92, 94, 97], "34": [92, 94, 95, 96, 98, 104, 106], "340": [92, 94, 95, 96, 98], "341": [92, 94], "342": [3, 4, 92, 94, 95, 96, 97, 98], "343": [92, 94], "344": [92, 94, 95, 96, 98], "345": [3, 4, 92, 94, 97], "346": [92, 94, 95, 96, 98], "347": [92, 94], "348": [3, 4, 92, 94, 95, 96, 97, 98], "349": [92, 94], "35": [92, 94], "350": [92, 94, 95, 96, 98], "351": [3, 4, 92, 94, 97], "352": [92, 94, 95, 96, 98], "353": [92, 94], "354": [3, 4, 45, 49, 92, 94, 95, 96, 97, 98], "355": [92, 94], "356": [92, 94, 95, 96, 98], "357": [3, 4, 45, 49, 92, 94, 97, 101], "358": [92, 94, 95, 96, 98, 101], "359": [92, 94], "36": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "360": [1, 2, 10, 11, 62, 66, 67, 68, 74, 76, 77, 81, 83, 86, 92, 94, 101, 121, 127], "37": [92, 94], "38": [92, 94, 95, 96, 98, 104, 106], "3825108": [92, 101], "3860281": [92, 101], "39": [3, 4, 92, 94, 97], "3987634": [92, 101], "4": [43, 44, 45, 46, 49, 92, 94, 95, 96, 98, 101, 102, 103, 104, 106, 121, 122], "40": [92, 94, 95, 96, 98, 101, 104, 106], "41": [71, 72, 92, 94], "42": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "4235128": [92, 101], "43": [92, 94], "44": [92, 94, 95, 96, 98, 104, 106], "45": [3, 4, 92, 94, 97], "46": [92, 94, 95, 96, 98, 104, 106], "47": [92, 94], "48": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "49": [92, 94], "5": [1, 2, 10, 11, 13, 15, 27, 39, 43, 44, 45, 46, 49, 50, 52, 53, 69, 70, 77, 85, 92, 94, 101, 102, 103, 121], "50": [1, 2, 10, 11, 45, 46, 62, 66, 67, 68, 69, 70, 77, 85, 86, 92, 94, 95, 96, 98, 104, 106], "51": [3, 4, 92, 94, 97], "52": [92, 94, 95, 96, 98, 104, 106], "52103": [92, 101], "52104": [92, 101], "53": [92, 94], "54": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "55": [92, 94], "56": [92, 94, 95, 96, 98, 104, 106], "57": [3, 4, 92, 94, 97], "58": [92, 94, 95, 96, 98, 104, 106], "59": [92, 94], "6": [3, 4, 43, 44, 45, 46, 49, 50, 92, 94, 95, 96, 97, 98, 101, 104, 106], "60": [3, 4, 54, 55, 56, 92, 94, 95, 96, 97, 98, 104, 106], "61": [92, 94], "62": [92, 94, 95, 96, 98, 104, 106], "63": [3, 4, 92, 94, 97], "64": [92, 94, 95, 96, 98, 104, 106], "65": [92, 94, 101], "66": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "67": [92, 94], "68": [92, 94, 95, 96, 98, 104, 106], "69": [3, 4, 92, 94, 97], "692111": [92, 101], "7": [45, 46, 92, 94, 101, 121], "70": [92, 94, 95, 96, 98, 104, 106], "71": [92, 94], "72": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "720": [104, 106], "725108": [92, 101], "73": [92, 94], "74": [92, 94, 95, 96, 98, 104, 106], "75": [3, 4, 92, 94, 97], "76": [92, 94, 95, 96, 98, 104, 106], "77": [92, 94], "78": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "79": [92, 94], "8": [3, 4, 45, 46, 92, 94, 95, 96, 98, 101, 104, 106], "80": [92, 94, 95, 96, 98, 104, 106], "81": [3, 4, 92, 94, 97, 101], "82": [92, 94, 95, 96, 98, 104, 106], "825108": [92, 101], "83": [92, 94], "84": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "85": [92, 94], "858161": [92, 101], "86": [92, 94, 95, 96, 98, 104, 106], "87": [3, 4, 92, 94, 97], "88": [92, 94, 95, 96, 98, 104, 106], "880755": [92, 94], "880772": [92, 94], "880781": [92, 94], "880829": [92, 94], "880843": [92, 94], "881165": [92, 94], "89": [92, 94], "9": [3, 4, 45, 46, 92, 94, 95, 96, 97, 98, 101, 121], "90": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "91": [92, 94], "92": [92, 94, 95, 96, 98, 104, 106], "93": [3, 4, 92, 94, 97], "94": [92, 94, 95, 96, 98, 104, 106], "95": [1, 2, 10, 11, 45, 46, 92, 94], "96": [3, 4, 92, 94, 95, 96, 97, 98, 104, 106], "97": [92, 94], "98": [92, 94, 95, 96, 98, 104, 106], "99": [3, 4, 45, 46, 92, 94, 97, 101], "995": [92, 93], "A": [1, 2, 5, 6, 8, 9, 10, 11, 13, 18, 24, 26, 45, 46, 49, 77, 78, 81, 82, 83, 84, 85, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 108, 109, 110, 111, 121, 125, 127], "As": 44, "By": [43, 44, 92, 101], "For": [45, 46, 92, 95, 96, 100, 101, 108, 111, 121, 126, 127], "If": [1, 2, 8, 9, 10, 11, 13, 15, 18, 26, 43, 44, 45, 46, 49, 77, 78, 86, 92, 95, 96, 98, 101, 108, 110, 113, 121, 125, 127], "In": [1, 2, 10, 11, 43, 44, 92, 101, 121, 127], "It": [13, 18, 77, 86, 92, 100, 101, 121, 127, 128], "Not": [62, 63], "One": [102, 103, 121], "The": [1, 2, 5, 6, 8, 9, 10, 11, 13, 15, 17, 24, 26, 43, 44, 45, 46, 49, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 92, 93, 94, 97, 98, 101, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127], "Then": 125, "There": 121, "These": [45, 46, 121, 127], "To": [92, 101, 125], "With": [121, 122], "_": [121, 123, 127], "_check_measur": [69, 70], "_compute_energy_ratio_bootstrap": 1, "_compute_energy_ratio_singl": 1, "_compute_total_uplift_bootstrap": 10, "_compute_total_uplift_singl": 10, "_compute_ws_count": [8, 9], "_create_evals_datafram": [60, 61], "_fi_set_ws_wd_ti": 92, "_find_sensor_stuck_single_timearrai": 50, "_get_all_unique_flag": [45, 46], "_get_energy_ratio": 3, "_get_energy_ratios_allbin": [43, 44], "_get_mean_power_curv": [45, 46], "_get_model_params_dict": [60, 61], "_gui": 121, "_interpolate_with_max_gap": 113, "_is_uplift": [8, 9], "_load_er_input_for_wd_bia": [43, 44], "_max": [1, 2, 10, 11], "_plot_top_sensor_fault": 50, "_process_single_wd": [3, 4], "_reset_mean_power_curv": [45, 46], "_reset_output": [69, 70], "_set_col_by_n_closest_upstream_turbin": 13, "_set_col_by_radius_from_turbin": 13, "_set_col_by_turbin": 13, "_set_col_by_upstream_turbin": 13, "_set_col_by_upstream_turbines_in_radiu": 13, "_setup_logg": 44, "_step": [1, 2, 10, 11], "a1": 121, "a2": 121, "a3": 121, "about": [13, 16, 121], "abov": [45, 46, 92, 101, 121], "absolut": [1, 2], "access": [108, 109, 110, 121], "accommod": 121, "accord": [45, 46, 49, 77, 87, 89, 92, 99, 100, 121], "accur": [92, 97, 100, 101], "achiev": [92, 93], "across": [1, 2, 10, 11, 77, 82, 83, 84, 85, 92, 93], "activ": 125, "actual": [45, 46, 121], "ad": [77, 78, 81, 121], "add": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 77, 78, 81, 82, 83, 84, 85, 121, 125], "add_bin_weight": 77, "add_gaussian_blending_to_floris_approx_t": 92, "add_power_ref": 77, "add_power_test": 77, "add_reflected_row": 77, "add_w": 77, "add_wd": 77, "add_wd_bin": 77, "add_ws_bin": 77, "addit": [13, 15, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 77, 82, 83, 84, 85, 87, 123], "addition": [43, 44, 92, 101, 102, 103, 127], "address": [13, 18, 127], "adjust": 121, "affect": [92, 97, 100], "after": [13, 15, 121], "again": [77, 81, 123], "against": 121, "aggreg": [45, 46, 77, 86], "agreement": 121, "al": [92, 94, 122, 127], "algorithm": [45, 46, 121], "align": 121, "all": [1, 2, 8, 9, 10, 11, 13, 14, 15, 28, 29, 31, 32, 33, 35, 37, 38, 40, 41, 45, 46, 77, 82, 83, 84, 85, 86, 90, 92, 94, 95, 96, 98, 100, 101, 102, 103, 121, 127], "all_flag": [45, 46], "all_influence_magnitud": [92, 98], "allow": [13, 16, 45, 46, 77, 86, 92, 93, 101, 113, 121, 127], "allow_convert_to_integ": [13, 16], "alreadi": 121, "also": [3, 4, 13, 16, 30, 34, 42, 43, 44, 45, 46, 92, 94, 101, 121, 122, 124, 127], "altern": 127, "altitud": [13, 24, 26], "alwai": 121, "ambient": [3, 4, 92, 100, 101, 127], "among": 124, "amount": 127, "an": [1, 2, 5, 6, 7, 10, 11, 13, 15, 17, 18, 26, 43, 44, 45, 46, 74, 76, 77, 81, 82, 83, 84, 85, 87, 89, 92, 98, 101, 102, 103, 108, 110, 121, 122, 123, 125, 127], "analys": [121, 122, 127], "analysi": [12, 13, 15, 59, 73, 92, 101, 120, 121, 123, 124], "analyz": 121, "angl": [74, 75, 76, 102, 103, 121, 127], "angle_wrap": [104, 107], "angles_array_deg": [74, 75, 76], "angular": [54, 56, 127], "ani": [1, 2, 8, 9, 10, 11, 13, 15, 16, 43, 44, 45, 46, 49, 77, 82, 83, 84, 85, 86, 91, 92, 95, 96, 97, 98, 101, 108, 109, 110, 121, 125], "annual": 122, "anoth": 128, "anywher": 121, "app": 121, "appear": [77, 78, 92, 95, 108, 111], "append": 121, "appli": [92, 93, 102, 103, 121], "applic": 121, "apply_filters_to_df": [45, 46], "approach": [92, 100, 125], "approxim": [5, 6], "ar": [1, 2, 10, 11, 13, 15, 27, 30, 34, 39, 42, 43, 44, 45, 46, 49, 74, 75, 77, 78, 83, 85, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 111, 117, 118, 119, 120, 121, 122, 125, 127], "arang": [45, 46, 92, 94], "aren": [1, 2, 10, 11], "argument": [43, 44], "aris": [45, 46], "around": [45, 46, 77, 81, 121, 122, 124, 127], "arrai": [3, 4, 5, 7, 13, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 45, 46, 74, 75, 76, 77, 81, 83, 85, 87, 89, 92, 94, 95, 96, 97, 98, 99, 104, 106, 108, 112, 113, 117, 118, 119, 127], "artifici": 123, "asset": [3, 4], "assign": [1, 2, 10, 11, 45, 46, 49, 77, 78, 121], "assum": [45, 46, 74, 75, 92, 101, 113, 117, 118, 119, 121], "assume_sort": 113, "assumpt": [92, 101], "atmospher": 127, "attach": 44, "attribut": 44, "author": 127, "automat": [102, 103, 113, 114], "avail": [1, 2, 10, 11, 45, 46, 121, 124, 125, 127], "averag": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 74, 75, 77, 82, 83, 84, 85, 121, 127], "avoid": [92, 101], "ax": [8, 9, 13, 26, 45, 46, 62, 64, 65], "axarr": [8, 9], "axi": [13, 26, 45, 46, 74, 75, 76, 113, 121], "b": 127, "back": [92, 98, 122], "background": [13, 26], "bai": [122, 127], "balanc": 127, "bar": [45, 46], "base": [1, 2, 4, 6, 9, 10, 11, 43, 44, 45, 46, 61, 70, 72, 77, 78, 86, 92, 96, 108, 109, 110, 121, 127], "baselin": 122, "basic": [45, 49, 121], "becaus": [45, 46, 49, 92, 101, 121], "becom": [13, 15, 92, 101, 121], "been": [13, 18, 121, 126], "behavior": [92, 101, 127], "behind": [13, 24], "being": [8, 9, 45, 46, 92, 93, 101, 121], "below": [45, 46, 62, 68, 92, 100, 101, 120, 121], "benefit": [92, 100], "besid": [13, 14, 121], "best": [62, 64, 65, 68, 121], "better": [43, 44, 45, 46], "between": [1, 2, 5, 7, 10, 11, 13, 26, 43, 44, 45, 46, 77, 81, 90, 91, 92, 99, 101, 102, 103, 108, 111, 113, 121, 127], "bfd": 127, "bia": [43, 44, 121, 127], "bias": 121, "bias_estim": 43, "bias_timestep": [52, 53], "bin": [1, 2, 8, 9, 10, 11, 43, 44, 45, 46, 77, 78, 81, 82, 83, 84, 85, 86, 87, 89, 128], "bin_and_group_datafram": 77, "bin_col_nam": [77, 87], "bin_cols_in": [1, 2, 8, 9, 10, 11, 62, 66, 68, 77, 88], "bin_cols_without_df_nam": [77, 78, 86], "bin_column": 77, "blend": [92, 93], "block": [5, 6, 7], "blockag": [3, 4], "blur": [92, 93], "bokeh": [45, 46], "bool": [1, 2, 5, 6, 8, 9, 10, 11, 13, 16, 27, 30, 34, 39, 42, 43, 44, 45, 46, 49, 77, 82, 83, 84, 85, 86, 92, 94, 97, 98, 99, 100, 101], "boolean": [5, 6, 13, 24, 26, 113], "bootstrap": [1, 2, 10, 11, 43, 44], "both": [13, 18, 44, 121, 123], "bound": [1, 2, 10, 11, 43, 44, 45, 46, 69, 70, 92, 101, 104, 105], "box": [45, 46], "bring": [13, 16], "brown": 121, "bsd": 126, "built": [124, 127], "c": [50, 121, 127], "calc_floris_approx_t": [92, 93, 101], "calc_median_min_max_std": [54, 55, 56, 74, 76], "calc_second_ord": [60, 61], "calc_wd_mean_radi": 74, "calcul": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 77, 78, 81, 92, 94, 96, 99, 101, 121, 122, 127], "calculate_baselin": [43, 44], "calculate_curv": [71, 72], "calculate_miss": [45, 46], "calculate_wd_statist": 74, "calculate_wfpower_for_sampl": [60, 61], "calibr": [121, 124, 127], "call": [8, 9, 13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46], "callabl": [43, 44], "can": [3, 4, 13, 16, 27, 29, 30, 33, 34, 39, 41, 42, 43, 44, 45, 46, 77, 78, 89, 92, 94, 95, 96, 97, 98, 101, 102, 103, 121, 122, 123, 127, 128], "cannot": [45, 49, 92, 101, 121], "capabl": 123, "captur": [92, 97], "care": 127, "carefulli": [54, 56, 121], "case": [1, 2, 10, 11, 45, 46, 77, 83, 85, 121, 122], "categor": [45, 46], "caus": 127, "cc": [117, 118, 119], "center": [1, 2, 10, 11, 54, 55, 56], "central": [124, 127], "certain": [45, 46, 92, 99], "challeng": 123, "chang": [1, 2, 10, 45, 46, 92, 95, 96, 98, 108, 110, 121, 125], "change_threshold": [92, 95, 96, 98], "character": [3, 4], "check": [45, 46, 77, 88, 121, 125], "check_compute_energy_ratio_input": 77, "choic": [1, 2, 10, 11, 45, 46, 121], "chronolog": [45, 46], "churchfield": 127, "circmean": [74, 75], "circular": [13, 35, 37, 38, 40], "circular_col": [54, 57, 121], "circular_mean": [13, 22], "circular_stat": 121, "cite": 127, "class": [3, 4, 5, 6, 8, 9, 43, 44, 45, 46, 60, 61, 69, 70, 71, 72, 121, 127], "classifi": [45, 46, 49, 121], "claus": 126, "clean": [45, 46], "clock": 121, "clone": 125, "close": 121, "closest": [13, 27, 39, 92, 99], "code": 125, "coeffici": [43, 44, 121], "col_nam": [77, 87, 89], "col_out": 13, "col_prefix": [13, 22], "col_ref": 13, "color": [8, 9, 13, 26, 121], "color_dict": [8, 9], "cols_angular": [54, 55, 56], "cols_df1": [104, 106], "cols_df2": [104, 106], "column": [1, 2, 5, 6, 10, 11, 13, 15, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 101, 108, 111, 121, 127], "column_list": 121, "com": [108, 109, 110, 125, 127], "combin": [1, 2, 10, 11, 77, 86, 92, 94], "come": [3, 4], "command": 121, "commit": 125, "common": [45, 46, 108, 111, 117, 118, 119, 121], "commonli": 121, "commun": 124, "comon": 121, "compar": [43, 44, 62, 66, 67, 121, 127], "comparison": [62, 68, 92, 101, 121, 122, 127], "complet": [45, 46, 121, 125], "compon": [8, 9], "compromis": 121, "comput": [1, 2, 8, 9, 10, 11, 43, 44, 74, 75, 92, 98, 101, 121, 122, 128], "compute_energy_ratio": [1, 77, 88], "compute_total_uplift": 10, "concaten": [5, 6], "cond": [45, 48, 121], "conda": 125, "condit": [45, 46, 49, 92, 100, 101, 121, 127], "conduct": 123, "configur": [44, 125], "confirm": 121, "confus": [45, 46], "connect": [45, 46], "consecut": [45, 46, 121], "consequ": 127, "consid": [13, 15, 27, 30, 34, 39, 42, 43, 44, 45, 46, 62, 64, 65, 77, 81, 92, 99, 121], "consist": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 108, 111, 121, 127], "consol": [44, 45, 46, 49, 92, 101], "constant": [45, 46, 121], "construct": [1, 2, 10, 11], "contact": 126, "contain": [1, 2, 10, 11, 13, 24, 26, 27, 29, 30, 33, 34, 39, 41, 42, 43, 44, 45, 46, 62, 63, 77, 78, 82, 83, 84, 85, 86, 87, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 108, 111, 113, 120, 121, 127], "content": [121, 126], "continu": [102, 103], "conveni": [8, 9], "convent": 121, "converg": [45, 46], "convert": [8, 9, 121], "coordin": [13, 24], "copi": [92, 101], "correct": [43, 44, 45, 46, 121, 123, 127], "correct_y_shift": [104, 106], "correctli": 125, "correl": [43, 44, 45, 46, 121], "correspond": [1, 2, 13, 17, 27, 29, 30, 33, 34, 39, 41, 42, 45, 46, 77, 81], "corrupt": [13, 15], "cosine_expon": [117, 118], "cost": [43, 44], "could": 121, "count": [1, 2, 8, 9, 10, 11, 77, 78], "coupl": [45, 46], "cover": [43, 44, 92, 101], "creat": [8, 9, 13, 26, 44, 45, 46, 102, 103], "criteria": 121, "cross": 121, "crosscheck_northing_offset_consist": 52, "csv": 121, "cumul": 127, "curl": 127, "current": [43, 44, 121, 125, 128], "curtail": [45, 49, 121], "curv": [45, 46, 92, 93, 121, 127], "cut": [45, 46, 77, 92, 93, 121], "cutoff_w": [45, 46], "d": [92, 98], "dai": [13, 24, 26, 52, 53], "dash": 121, "data": [1, 2, 5, 6, 10, 11, 13, 15, 16, 24, 43, 44, 45, 46, 49, 62, 66, 67, 77, 78, 86, 90, 91, 92, 100, 101, 108, 111, 113, 120, 122, 123, 124, 127], "data_process": [120, 123], "databas": 121, "datafram": [1, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 62, 63, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 108, 111, 112, 113, 114, 121, 128], "datapoint": [45, 46], "dataset": [43, 44, 45, 46, 121, 122, 123], "date": 121, "datetim": [52, 53, 54, 55, 56, 113, 114], "datetime_column": [13, 24], "datram": [77, 81], "daylight": [13, 24], "daytim": [13, 24], "deadband": [45, 46], "deal": [121, 127], "declar": 125, "decreas": [45, 46], "deep": 127, "default": [1, 2, 8, 9, 10, 11, 13, 15, 16, 24, 27, 30, 34, 39, 42, 43, 44, 45, 46, 49, 74, 75, 77, 78, 83, 85, 86, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 113, 117, 118, 119], "deficit": 121, "defin": [43, 44, 45, 46, 121, 122, 127], "deflect": [62, 66], "deg": [74, 76, 92, 94, 100, 101, 117, 118, 119, 121, 127], "degre": [1, 2, 10, 11, 43, 44, 74, 75, 76, 77, 81, 92, 93, 100, 117, 118, 119, 121], "degress": [13, 24], "demo": 123, "demonstr": [121, 123], "denot": [13, 24, 92, 95, 96, 98, 117, 118, 119, 121], "densiti": [92, 93], "dep_indices_by_wd": [92, 98], "depend": [92, 95, 96, 98, 100, 101], "depict": [45, 46, 102, 103], "depth": 123, "deriv": [1, 3, 4, 10, 77, 90, 91, 92, 97, 127], "descript": [45, 46], "design": [124, 127], "detail": [120, 122, 127], "detect": [92, 98, 121, 127], "determin": [13, 24, 27, 29, 30, 33, 34, 39, 41, 42, 45, 46, 62, 64, 65, 68, 74, 76, 77, 78, 92, 95, 96, 97, 98, 99, 100, 121, 127], "develop": 123, "deviat": [45, 46, 54, 56, 74, 76, 92, 93, 117, 118, 119, 121], "df": [1, 3, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 57, 58, 62, 63, 71, 72, 77, 78, 81, 86, 90, 91, 92, 101, 113, 115, 121], "df1": [104, 106], "df2": [104, 106], "df_": [1, 2, 10, 11, 62, 63, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91], "df_1": [108, 111], "df_2": [108, 111], "df_approx": [92, 94, 101], "df_approx_": [62, 68], "df_downsampl": 54, "df_drop_nan_row": 13, "df_e": [5, 6], "df_fi_approx": [92, 93], "df_fi_approx_gauss": [92, 93], "df_filter": [45, 46], "df_find_and_fill_data_gaps_with_miss": 13, "df_fm_approx": [43, 44], "df_freq": [1, 2, 8, 9, 10, 11, 62, 63, 66, 67, 68, 77, 78, 88], "df_freq_pl": [1, 10, 77, 78], "df_get_no_faulty_measur": 45, "df_impacting_simpl": [92, 97], "df_impacting_turbin": [45, 49], "df_in": [13, 16, 54, 55, 56], "df_list_in": [5, 6], "df_mark_turbdata_as_faulti": 45, "df_movingaverag": 54, "df_name": [1, 2, 5, 6, 10, 11, 77, 78, 86], "df_names_subset": [8, 9], "df_opt": [102, 103], "df_out": [13, 16, 45, 46, 92, 95, 96], "df_pow_ref_mapping_func": [43, 44], "df_raw": [3, 4], "df_re": 121, "df_reduce_precis": 13, "df_resample_by_interpol": [54, 121], "df_result": [8, 9], "df_scada": [108, 112], "df_scada_baseline_in": [62, 66], "df_scada_in": [62, 67, 68], "df_scada_wakesteering_in": [62, 66], "df_sort_and_find_dupl": 13, "df_sort_and_fix_dupl": 13, "df_upstream": [3, 4, 13, 27, 29, 30, 33, 34, 39, 41, 42, 71, 72, 92, 100], "df_ws_mapping_func": [43, 44], "dic": [108, 109, 110], "dict": [8, 9, 10, 11, 108, 109, 110], "dictionari": [8, 9, 10, 108, 109, 110], "differ": [13, 18, 26, 43, 44, 45, 46, 77, 81, 92, 93, 121, 127], "differenti": [13, 26], "digit": 121, "dimens": [102, 103], "dimension": [92, 98], "direciton": [92, 98], "direct": [1, 2, 8, 9, 10, 11, 13, 27, 29, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 74, 75, 76, 77, 81, 83, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 117, 118, 119, 121, 127, 128], "directionm": 121, "directli": [45, 46, 77, 78, 88, 92, 93, 125], "directori": 125, "discret": [43, 44, 92, 97, 100, 121], "discuss": 127, "distanc": [1, 2, 10, 11, 45, 46, 77, 81, 92, 99, 113], "distinguish": [13, 26], "distribut": [3, 4, 8, 9], "divid": 120, "do": [3, 4, 13, 16, 45, 46, 54, 56, 121], "doc": 125, "document": 121, "doe": [13, 18, 43, 44, 121], "doekemeij": [122, 127], "done": 121, "down": [45, 46, 102, 103], "download": [121, 123, 125], "downsampl": 127, "downtim": [45, 49], "downward": [45, 46], "dpi": [43, 44, 50], "drawn": [45, 46], "driven": 124, "drop": 121, "dsf22": 127, "dt": [113, 114], "due": [92, 101, 121], "duplic": [13, 17, 18], "duplicate_entries_idx": [13, 17], "dure": [45, 46, 121], "dv": [71, 72], "dx": [92, 97, 100], "dy": [92, 97, 100], "dy_ev": [104, 107], "e": [13, 18, 43, 44, 45, 46, 49, 92, 97, 98, 101, 121, 122, 125, 127], "each": [1, 2, 5, 7, 8, 9, 10, 11, 43, 44, 45, 46, 49, 77, 81, 86, 92, 94, 95, 96, 97, 98, 100, 117, 118, 119, 120, 121], "easi": 121, "easiest": 123, "edg": [77, 81, 83, 85, 87, 89], "edit": 125, "effect": [3, 4, 45, 46, 127], "effici": [13, 16, 121, 127], "either": [77, 78, 121], "element": [1, 2, 5, 7, 10, 11, 92, 98], "elimin": [92, 101], "email": 127, "emgauss": [117, 118, 119], "empir": [92, 100], "empti": [92, 98], "enabl": [77, 81, 92, 97, 100], "encod": 127, "encourag": 123, "end": [45, 46, 102, 103, 108, 109, 122, 128], "energi": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 43, 44, 62, 68, 77, 81, 90, 91, 92, 101, 120, 121, 124, 127, 128], "energy_ratio_suit": [43, 44], "energyratioinput": [1, 2, 5, 8, 9, 10, 11, 43, 44], "energyratiooutput": [1, 2, 8, 10, 11], "enforc": 121, "engin": 122, "ensur": [92, 101, 108, 111], "entir": [92, 100, 101, 121], "entri": [13, 14, 18, 43, 44, 45, 46, 92, 95, 96, 113, 114], "environ": 125, "equal": [1, 2, 10, 11, 13, 15, 17, 18, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 77, 83, 85, 87, 89, 92, 97, 101, 102, 103], "equip": 121, "er_in": [1, 2, 8, 9, 10, 11, 77, 88], "er_n_btstrp": [43, 44], "er_result": [62, 65], "er_wd_bin_width": [43, 44], "er_wd_step": [43, 44], "er_ws_step": [43, 44], "error": [1, 2, 62, 64, 65], "essenti": [43, 44, 92, 96], "estim": [43, 44, 45, 46, 59, 113, 114, 121, 124, 127], "estimate_cos_pp_fit": [71, 72], "estimate_dt": 113, "estimate_farmaveraged_ti": [69, 70], "estimate_heterogen": [3, 4], "estimate_local_ti": [69, 70], "estimate_ti": 104, "estimate_wd_bia": [43, 44], "et": [43, 44, 122, 127], "evalu": [43, 44, 62, 63, 92, 93, 94, 121], "evaluate_overall_wake_loss": 62, "even": [13, 16, 45, 46], "everi": [45, 46, 92, 100, 121], "everyth": 125, "exact": [45, 46, 121], "exactli": 121, "exampl": [45, 46, 92, 94, 101, 125, 127, 128], "examples_artifical_data": 121, "examples_artificial_data": [122, 123], "examples_smarteol": 123, "excel": 121, "except": [13, 18, 77, 88], "exclud": [13, 29, 33, 41], "exclude_column": [45, 48], "exclude_turb": [13, 27, 29, 33, 39, 41], "exhaust": 121, "exist": 121, "exmapl": 122, "expand": [92, 94], "experi": [123, 124, 127], "experienc": [45, 46], "explicit": [1, 2, 10, 11], "explor": 121, "export": 121, "expr": [77, 89], "express": [77, 89], "extern": 121, "extra": [1, 2, 10, 11, 13, 15], "extract": [92, 95, 96], "extrapol": 113, "extrapolate_ti": [92, 101], "extrapolate_w": [92, 101], "facilit": [43, 44], "factor": [13, 16, 121], "fair": [92, 101], "fairli": 121, "fall": [92, 101], "fals": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 22, 27, 30, 34, 39, 42, 43, 44, 45, 46, 50, 51, 54, 55, 56, 60, 61, 62, 66, 68, 69, 70, 77, 82, 83, 84, 85, 86, 92, 94, 97, 98, 99, 100, 104, 105, 106, 113, 116, 121], "far": [45, 46], "farm": [3, 4, 43, 44, 45, 46, 92, 95, 96, 97, 98, 100, 117, 118, 119, 122, 124, 127], "fashion": [92, 101], "fast": [45, 46], "faster": 121, "fault": [45, 46, 121, 127], "faulti": [45, 46, 49, 121], "feather": [121, 127], "fi": [45, 49, 60, 61, 92, 95, 96, 98, 100, 104, 105], "field": [123, 124, 127], "fig_dpi": [60, 61, 71, 72], "fig_format": [50, 60, 61], "figur": [8, 9, 43, 44, 45, 46, 121], "file": [13, 15, 44, 121, 127], "filehandl": 44, "fill": [92, 97, 113], "filter": [77, 90, 91, 124, 127], "filter_all_nul": 77, "filter_any_nul": 77, "filter_by_condit": [45, 46], "filter_by_floris_power_curv": [45, 46], "filter_by_power_curv": [45, 46, 121], "filter_by_sensor_stuck_fault": [45, 46], "filter_df_by_faulty_impacting_turbin": 45, "filter_df_by_ti": 13, "filter_df_by_w": 13, "filter_df_by_wd": 13, "final": [121, 127], "find": [13, 15, 17, 92, 101, 121], "find_sensor_stuck_fault": 50, "find_timeshift_between_df": 104, "finit": [92, 101], "first": [1, 2, 10, 11, 92, 95, 117, 118, 119, 121], "firstli": 121, "fit": [62, 64, 65, 68, 120, 127], "five": 121, "flag": [45, 46, 92, 98, 121], "flasc": [120, 121, 122, 125, 126], "flasc2024": 127, "flascfilt": [45, 121], "flatten_col": 54, "fleme": [126, 127], "float": [1, 2, 8, 9, 10, 11, 13, 24, 27, 30, 34, 39, 42, 43, 44, 45, 46, 62, 63, 66, 68, 74, 76, 77, 81, 83, 85, 86, 92, 93, 95, 96, 97, 98, 99, 100, 113, 117, 118, 119], "float32": [13, 16], "float64": [13, 16], "flori": [0, 12, 43, 44, 45, 46, 59, 62, 66, 67, 68, 73, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 108, 111, 117, 118, 119, 120, 121, 124, 125, 127], "floris_result": [62, 64], "floris_set_ws_wd_ti": [69, 70], "floris_sobol_analysi": 60, "floris_tool": [13, 27, 29, 30, 33, 34, 39, 41, 42, 45, 49], "florismodel": [45, 46, 92, 94, 108, 112, 117, 118, 119], "flow": [92, 100], "fm": [3, 4, 45, 46, 52, 53, 69, 70, 92, 94, 97, 100], "fm_in": [62, 66, 67, 92, 95, 96, 98, 108, 112], "folder": 125, "follow": [1, 2, 10, 11, 43, 44, 121, 123, 125], "form": [92, 101, 121], "format": [43, 44, 45, 46, 49, 113, 114, 127], "former": [13, 17], "found": [45, 46, 92, 98, 121, 123, 127], "fp": [113, 116], "fraction": [92, 95, 96, 98], "frame": [92, 100, 127], "freestream": [92, 100], "freq_val": [1, 2, 10, 11], "frequenc": [1, 2, 8, 9, 10, 11, 77, 78], "from": [1, 2, 3, 4, 10, 11, 13, 16, 27, 30, 34, 39, 42, 43, 44, 45, 46, 62, 63, 77, 78, 81, 90, 91, 92, 93, 97, 99, 101, 102, 103, 108, 109, 113, 121, 123, 127, 128], "front": 121, "frozen": [45, 46], "fsc_list": [43, 44], "ftool": [45, 49], "ftp": 121, "full": [102, 103], "function": [1, 5, 10, 13, 15, 17, 18, 26, 43, 44, 45, 46, 50, 52, 54, 62, 74, 77, 78, 81, 86, 92, 93, 94, 97, 100, 101, 102, 103, 104, 108, 111, 113, 117, 120, 121, 127, 128], "further": [13, 15, 16, 121, 127], "furthest": [92, 99], "g": [43, 44, 45, 46, 92, 98, 101, 121, 122], "gain": 113, "gap": [13, 15, 113, 121], "gather": [45, 46], "gaussian": [92, 93, 127], "gch": [117, 118, 119], "gener": [5, 7, 13, 27, 29, 30, 33, 34, 39, 41, 42, 45, 46, 77, 83, 85, 92, 93, 101, 120, 121, 123], "generate_block_list": 5, "generate_floris_hetmap": [3, 4], "generate_sampl": [60, 61], "geometr": [92, 97], "get": [5, 6, 43, 44, 108, 109], "get_all_dependent_turbin": 92, "get_all_impacting_turbin": [45, 49, 92], "get_all_impacting_turbines_geometr": 92, "get_column_mean": 13, "get_dependent_turbines_by_wd": [92, 95, 96], "get_df": [5, 6, 45, 46], "get_num_turbin": [13, 113], "get_power_curv": [45, 46], "get_sobol_sensitivity_indic": [60, 61], "get_turbine_ord": [69, 70], "get_turbine_pair": [69, 70], "get_turbs_in_radiu": 92, "get_upstream_turbs_flori": [13, 27, 29, 30, 33, 34, 39, 41, 42, 92], "get_yaw_angles_interpol": 102, "git": 125, "github": [124, 125, 127], "give": [1, 10, 77, 87], "given": [1, 2, 10, 11, 13, 24, 74, 75, 77, 81, 82, 83, 84, 85, 87, 89], "go": [45, 46], "gone": 121, "good": [92, 100, 121, 123], "gov": [126, 127], "grab": [45, 46], "greater": [77, 83, 85, 87, 89], "green": 121, "grid": [92, 94, 101], "group": [77, 78, 86], "groupbi": 121, "gui": 121, "h": [104, 106], "ha": [1, 2, 10, 11, 13, 24, 43, 44, 77, 81, 92, 93, 100, 101, 121, 126], "half": [1, 2, 10, 11], "hand": [45, 46, 92, 101, 117, 118, 119], "handl": [54, 56, 77, 86], "happen": [45, 46], "have": [3, 4, 13, 14, 18, 45, 46, 92, 93, 95, 97, 98, 100, 121, 127], "head": 121, "heavili": 121, "help": [3, 4, 45, 46, 127], "henc": [13, 15, 45, 46], "here": [121, 123], "heterogen": [3, 4], "heterogeneity_mapp": 3, "high": [45, 46, 121], "higher": [45, 46, 102, 103, 121], "highest": [92, 101], "highlight": [45, 46], "histor": [92, 101, 122, 124, 127], "histori": [45, 46], "hold": [5, 6, 13, 15], "hour": [13, 24, 121], "hous": [124, 127], "how": [1, 2, 10, 11, 121, 122, 127], "howev": [92, 93, 121], "html": 123, "http": [125, 127], "hypothes": [43, 44], "i": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 24, 27, 30, 34, 39, 42, 43, 44, 45, 46, 49, 62, 68, 77, 78, 81, 83, 85, 87, 88, 89, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128], "id": [60, 61], "idea": [43, 44], "identifi": [45, 46, 121], "idx": [108, 110], "ignor": [1, 2, 10, 11, 13, 15, 121], "impact": [45, 49, 92, 96, 127], "impacting_turbin": [92, 97], "implement": [45, 46], "implicitli": [92, 101], "import": [13, 15, 45, 49, 121, 125, 127], "includ": [1, 2, 10, 11, 13, 27, 30, 34, 39, 42, 45, 46, 74, 76, 92, 93, 99, 127], "include_itself": [13, 27, 30, 34, 36, 39, 42, 92, 99], "inclus": 121, "inconsequ": 121, "inconsist": 121, "incorpor": [102, 103], "increas": [92, 94, 113], "indentifi": [45, 46], "index": [10, 13, 17, 18, 45, 46, 108, 110], "index_arrai": 50, "index_fault": 50, "indic": [13, 15, 17, 24, 26, 27, 29, 30, 33, 34, 39, 41, 42, 45, 46, 49], "individu": 121, "inflow": [3, 4, 45, 49, 92, 94, 101, 117, 118, 119], "influenc": [92, 98], "inform": [3, 4, 45, 46, 49, 92, 94, 101, 121, 126], "inher": 127, "initi": [43, 44], "input": [5, 6, 13, 24, 26, 74, 75, 77, 78, 86, 88, 102, 103, 113, 128], "insert": [13, 15, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44], "insid": 127, "inspect": [45, 46], "instanc": [43, 44], "instead": [1, 2, 77, 86, 88, 121, 125], "instruct": 123, "int": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 27, 30, 34, 39, 42, 43, 44, 45, 46, 74, 76, 77, 86, 92, 95, 96, 98, 99, 108, 110], "int16": [13, 16], "int32": [13, 16], "int8": [13, 16], "integ": [5, 7, 13, 16, 45, 46, 49, 117, 118, 119], "intend": 124, "intens": [13, 28, 31, 32, 33, 43, 44, 92, 94, 101, 127], "intention": 123, "inter": [45, 49], "interact": [121, 125], "interest": [13, 27, 30, 34, 39, 42, 45, 46, 49, 92, 95, 96, 97, 98, 100, 125], "interfac": 127, "intern": [45, 46, 121], "interp_method": [54, 57, 121], "interp_with_max_gap": 113, "interpol": [13, 15, 92, 101, 102, 103, 113, 121, 127], "interpolate_floris_from_df_approx": 92, "introduc": 123, "invalid": 121, "investig": [45, 46], "io": 121, "ipynb": 123, "irregular": [92, 101], "is_dai": [13, 24, 26], "is_day_or_night": 13, "is_operation_norm": [45, 46], "is_operation_normal_": [45, 46, 121], "is_operation_normal_000": 121, "issu": [45, 46, 49, 92, 101, 121], "item": [108, 109, 110], "iter": [43, 44, 45, 46], "iterat": [43, 44, 45, 46], "its": [13, 18, 43, 44, 45, 46, 117, 118, 119, 121, 124], "itself": [3, 4, 92, 99], "j": 127, "j_opt": [43, 44], "jensen": [117, 118, 119], "journal": 127, "jump": [13, 15], "jupyt": 125, "just": [45, 46], "kei": [108, 109, 110, 122], "kind": [113, 116], "king": 127, "know": [45, 49, 123, 127], "known": [45, 46, 121], "kw": [45, 46], "label": [8, 9, 45, 46, 77, 87], "lag": [13, 24], "lag_hour": [13, 24], "larg": [13, 15, 43, 44, 92, 94, 101, 121, 124, 127], "larger": [13, 15, 43, 44, 113], "largest": [77, 83, 85, 87, 89, 121], "last": [92, 101], "lat": [92, 99], "latex": 127, "latitud": [13, 24], "layout": 121, "least": [45, 46, 92, 97, 101, 127], "left": [77, 83, 85, 87, 89, 92, 93], "length": [1, 2, 5, 7, 10, 11, 43, 44, 92, 97, 102, 103], "less": [1, 2, 10, 11, 77, 83, 85, 87, 89], "level": [73, 92, 98, 121, 127], "leverag": 127, "librari": 121, "like": [13, 29, 33, 41, 45, 46, 49, 77, 83, 85, 87, 89, 92, 101, 125], "limit": [13, 15, 45, 46], "limit_numb": [92, 95, 96, 98], "line": [43, 44, 121], "linear": [54, 57, 92, 97, 100, 101, 113, 121], "linearli": [92, 101, 102, 103, 113], "linearndinterpol": [102, 103], "lint": 125, "list": [1, 2, 5, 6, 8, 9, 10, 11, 13, 17, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 97, 98, 99, 100, 102, 103, 108, 109, 110, 113, 114, 117, 118, 119], "literatur": [43, 44, 121], "load": [117, 118, 119, 127], "load_floris_artifici": 117, "load_floris_smarteol": 117, "loc": [92, 95, 96], "local": [92, 101, 121, 125], "locat": [13, 24, 27, 30, 34, 39, 42, 92, 99, 108, 111, 121], "log": [44, 121], "logger": 44, "loggingmanag": 44, "long": [1, 2, 10, 11, 92, 99, 121], "longer": [45, 46, 121], "longitud": [13, 24], "look": [13, 15, 45, 46, 121], "loop": [92, 95, 96], "loss": [13, 16, 43, 44, 62, 63, 92, 97, 100, 124, 127], "lot": 121, "low": [45, 46], "lower": [43, 44, 92, 100, 102, 103, 121], "lowest": [92, 101], "m": [45, 46, 92, 94, 95, 96, 98, 101, 102, 103, 121, 127], "m_pow_lb": [45, 46], "m_pow_rb": [45, 46], "m_ws_lb": [45, 46], "m_ws_rb": [45, 46], "made": [92, 101, 121, 125], "magnitud": [92, 96, 98], "mai": [3, 4, 45, 46, 92, 98, 100, 101, 121], "mailto": 127, "main": [120, 121, 128], "mainten": [45, 46, 121], "make": [13, 16, 45, 46, 92, 101, 121], "make_df_wid": 13, "manag": 125, "manner": 121, "map": [8, 9], "mark": [45, 46, 92, 95, 96, 98], "mask": [43, 44], "mast": [121, 127], "match": [108, 111], "match_y_curves_by_offset": [104, 121], "matplotlib": [13, 26, 45, 46], "max": [1, 2, 10, 11, 127], "max_gap": [54, 57, 113, 116, 121], "max_radiu": [13, 27, 30, 34, 36, 39, 42, 92, 99], "max_wd": [74, 76], "maxim": 127, "maximum": [1, 2, 10, 11, 13, 27, 30, 34, 39, 42, 54, 56, 74, 76, 77, 81, 83, 85, 86, 92, 99, 113, 121], "maximum_yaw_angl": [102, 103], "mean": [1, 2, 10, 11, 13, 27, 29, 30, 33, 34, 39, 41, 42, 43, 44, 45, 46, 74, 75, 76, 92, 100, 101, 102, 103, 117, 118, 119, 121], "mean_wd": [74, 75, 76], "measur": [13, 15, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 121, 127], "measurement_arrai": 50, "median": [45, 46, 54, 56, 74, 76, 121, 127], "median_wd": [74, 76], "merg": [13, 15, 18], "met": [45, 46, 121, 127], "method": [1, 2, 4, 6, 8, 9, 10, 11, 44, 45, 46, 61, 70, 72, 77, 78, 92, 101, 121, 127], "metmast_col": 121, "metric": 122, "michael": [126, 127], "min": [1, 2, 10, 11, 62, 66, 68, 77, 78, 127], "min_period": [54, 55, 56], "min_wd": [74, 76], "minim": [92, 100], "minimum": [1, 2, 10, 11, 54, 56, 74, 76, 77, 78, 83, 85, 86], "minimum_yaw_angl": [102, 103], "minut": [45, 46, 121], "mirror_nan": [92, 101], "misalign": 127, "misc": 127, "miscalibr": 127, "miss": [13, 15, 108, 111], "missing_data_buff": [13, 15], "mode": [117, 118, 119], "model": [59, 92, 95, 96, 97, 98, 100, 101, 117, 118, 119, 120, 121, 122, 124, 127], "model_fit": [120, 123], "modifi": [77, 78], "modul": [0, 12, 44, 59, 92, 93, 123, 125, 127], "monitor": [124, 127], "monoton": 113, "month": 121, "more": [13, 16, 45, 46, 49, 92, 100, 121, 122, 123, 125, 126, 127], "most": 121, "move": 127, "much": [13, 16], "mudafort": 127, "multipl": [3, 4, 45, 46, 121, 122, 127], "multipli": [45, 46], "must": [1, 2, 10, 11, 121, 125], "n": [1, 2, 5, 7, 8, 9, 10, 11, 13, 27, 39, 60, 61, 69, 70, 77, 88, 104, 105], "n_btstrp": [43, 44], "n_consecutive_measur": [45, 46, 50, 51], "n_eval_max": 50, "nacel": 121, "nacwindspe": 121, "nacwindspeed_a1": 121, "nacwindspeed_a2": 121, "nacwindspeed_a3": 121, "name": [1, 2, 8, 9, 10, 11, 13, 24, 43, 44, 45, 46, 77, 82, 83, 84, 85, 87, 89, 121], "nan": [13, 14, 15, 18, 45, 46, 49, 92, 101, 108, 111, 113, 121], "nan_polici": [74, 75], "nan_thrshld": [52, 53], "ndarrai": [77, 81, 83, 85, 87, 89], "nearest": [77, 81, 92, 101, 113], "necessarili": [43, 44], "neearest": [77, 81], "need": [13, 16, 44, 92, 95, 96, 98, 121], "neg": 121, "neighbor": [3, 4, 113], "neighbour": [92, 97], "nest": [108, 109, 110], "nested_get": 108, "nested_set": 108, "new": [5, 6, 8, 9, 13, 26, 45, 46, 77, 81, 82, 83, 84, 85, 87, 108, 111, 122, 125], "next": [1, 2, 10, 11, 121], "night": [13, 24, 26], "no_consecutive_measur": 50, "no_iter": [45, 46], "nomin": [43, 44, 121], "non": [13, 18, 45, 49, 102, 103], "none": [1, 2, 3, 4, 8, 9, 10, 11, 13, 22, 26, 43, 44, 45, 46, 50, 54, 57, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 77, 78, 83, 85, 86, 92, 95, 96, 98, 102, 103, 104, 106, 107, 108, 110, 112, 117, 118, 119, 121], "nonetyp": [92, 95, 96, 98], "nonhomogen": 121, "nonzero": [92, 97, 121], "normal": [45, 46, 121], "north": [121, 124, 127], "note": [3, 4, 8, 9, 43, 44, 45, 46, 54, 56, 121], "notebook": 123, "notic": [92, 100], "now": 121, "np": [5, 7, 45, 46, 92, 94, 95, 96, 98, 113], "nrel": [124, 125, 126, 127], "nturb": [92, 93, 94], "null": [62, 63, 77, 82, 83, 84, 85, 90, 91], "num_block": [5, 6, 7], "num_df": [77, 86], "num_thread": [60, 61], "number": [1, 2, 5, 6, 7, 10, 11, 13, 24, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 49, 77, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 120, 121], "numer": [45, 46, 123], "numpi": [74, 75, 77, 81, 92, 98, 104, 106], "object": [1, 2, 4, 6, 8, 9, 10, 11, 13, 15, 43, 44, 45, 46, 61, 70, 72, 77, 89, 92, 94, 95, 96, 97, 98, 100, 117, 118, 119], "obviou": 121, "obvious": 121, "occur": [13, 24, 45, 46, 121], "off": [45, 46, 92, 93], "offset": [43, 44, 45, 46, 102, 103, 121, 127], "offshor": [122, 127], "often": [45, 46, 121], "omit": [74, 75], "onc": 121, "one": [1, 2, 10, 11, 13, 18, 43, 44, 45, 46, 92, 97, 121, 122, 127, 128], "onli": [3, 4, 45, 46, 62, 68, 92, 98, 101, 121], "onto": 121, "oper": [3, 4, 12, 13, 16, 45, 46, 77, 86, 92, 98, 100, 102, 103, 117, 118, 119, 121, 122], "operation_mod": [117, 118, 119], "opt": [45, 46], "opt_bias_rang": [71, 72], "opt_bound": [104, 106], "opt_n": [71, 72, 104, 106], "opt_pp_rang": [71, 72], "opt_search_brute_dx": [43, 44], "opt_search_rang": [43, 44], "opt_work": [43, 44], "opt_yshift_rang": [71, 72], "optim": [43, 44, 102, 103, 121, 127], "option": [1, 2, 8, 9, 10, 11, 13, 15, 16, 24, 26, 27, 30, 34, 39, 42, 43, 44, 45, 46, 49, 74, 75, 77, 78, 86, 92, 93, 94, 97, 99, 100, 101, 102, 103, 108, 110, 117, 118, 119, 122, 125], "orang": 121, "order": [1, 2, 10, 11, 92, 95, 96, 121, 123], "origin": [5, 6, 77, 81], "orrespond": [10, 11], "other": [13, 18, 24, 92, 98, 99, 101, 121, 124, 127], "our": [92, 101, 121], "out": [45, 46, 121], "outcom": [92, 100], "outer": [92, 98], "outlier": [121, 127], "output": [74, 75, 92, 94, 99, 113], "outsid": [45, 46, 92, 101, 121], "over": [13, 26, 43, 44, 74, 75, 77, 82, 83, 84, 85, 92, 95, 96, 101, 121], "overal": [62, 63, 66], "overall_wake_loss": [62, 67], "overlap": [1, 2, 10, 11, 77, 81, 86], "overlap_dist": [77, 81], "overlay_frequ": [8, 9], "overwritten": [45, 46], "own": 121, "p": [45, 46, 127], "p_measur": [69, 70, 104, 105], "packag": [73, 92, 95, 125], "pair": [1, 2, 10, 11], "panda": [13, 24, 45, 46, 49, 74, 75, 92, 93, 94, 95, 96, 97, 100, 101, 108, 111, 121, 127], "param": [45, 46, 49, 92, 101], "param_idx": [62, 67], "paramet": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 62, 63, 64, 66, 67, 68, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 124, 127], "part": 121, "particular": [13, 16, 45, 46, 49, 92, 100, 122], "particularli": [45, 46], "pass": [74, 75, 77, 88], "past": [102, 103], "path": [43, 44, 125], "paul": [126, 127], "pd": [1, 2, 8, 9, 10, 11, 13, 15, 16, 17, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 121], "pdf_cutoff": [92, 93], "pdf_save_path": [3, 4], "pearson": [43, 44, 121], "per": [45, 46], "percent": [1, 2, 62, 63], "percentag": 121, "percentil": [1, 2, 10, 11, 77, 88], "perform": [43, 44, 77, 86, 113, 124, 127], "perform_resampl": [5, 6], "period": [13, 26, 45, 46, 121], "physic": [45, 46], "pink": 121, "pip": 125, "pl": [1, 5, 6, 10, 77, 78, 82, 83, 84, 85, 87, 90, 91], "place": [62, 68, 77, 83, 85, 87, 89, 122], "plai": 127, "platform": [45, 46], "pleas": [121, 127], "plot": [8, 9, 13, 26, 43, 44, 45, 46, 62, 68, 71, 72, 92, 97, 100, 121], "plot_background_flow": [3, 4], "plot_converg": [60, 61], "plot_cost_function_farm": [69, 70], "plot_cost_functions_turbin": [69, 70], "plot_energy_ratio": [8, 9, 43, 44], "plot_farm_mean_power_curv": [45, 46], "plot_figur": [50, 51, 52, 53], "plot_filters_custom_scatt": [45, 46], "plot_filters_custom_scatter_bokeh": [45, 46], "plot_filters_in_tim": [45, 46], "plot_filters_in_time_bokeh": [45, 46], "plot_filters_in_ws_power_curv": [45, 46], "plot_flowfield": [69, 70], "plot_graph": [3, 4], "plot_iter_path": [43, 44], "plot_layout": [3, 4], "plot_lin": [92, 97, 100], "plot_postprocessed_in_ws_power_curv": [45, 46], "plot_power_bar": [69, 70], "plot_sobol_result": [60, 61], "plot_sun_altitude_with_day_night_color": 13, "plot_uplift": [8, 9], "plt": [13, 26, 45, 46], "plu": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 92, 101], "pmin": [71, 72], "png": [43, 44, 50, 60, 61], "point": [1, 2, 10, 11, 43, 44, 45, 46, 92, 93, 113, 121], "polar": [8, 9, 43, 44, 62, 63, 77, 78, 81, 82, 83, 84, 85, 86, 87, 90, 91, 122, 127], "polar_plot": [8, 9], "popul": [13, 15], "posit": [108, 111, 121], "possibl": [13, 16, 92, 101, 121], "possibli": [13, 16, 62, 63, 77, 90, 91], "post": [92, 93, 127], "postprocess": [13, 15, 45, 49, 92, 93, 127], "potenti": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 92, 101], "pow": [13, 22, 121], "pow_": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 92, 93, 94, 121], "pow_000": [45, 46, 49, 92, 93, 94, 101], "pow_001": [45, 46, 49, 92, 94, 101], "pow_002": [45, 49], "pow_006": [92, 94, 101], "pow_deadband": [45, 46], "pow_rang": 121, "pow_ref": [1, 2, 10, 11, 13, 27, 28, 29, 30, 39, 62, 63], "pow_test": [62, 63], "power": [1, 2, 10, 11, 13, 29, 45, 46, 49, 77, 86, 92, 93, 94, 95, 96, 98, 101, 121, 127], "practic": [122, 127], "pre": 125, "precalcul": [92, 93, 101, 127], "precis": [13, 16, 45, 46], "predict": [43, 44, 92, 93, 100, 101, 121], "prepar": [121, 127], "present": [1, 2, 8, 9, 10, 11, 92, 100, 127], "prespecifi": [45, 46, 92, 99], "prevent": [92, 101], "previou": [45, 46, 121], "previous": [8, 9, 45, 46], "primarili": [108, 111, 121], "print": [8, 9, 13, 16, 45, 46, 49, 92, 101], "prior": 121, "privat": [45, 46], "probabl": [92, 93], "problem": [43, 44, 45, 46, 60, 61], "procedur": 121, "process": [45, 46, 77, 86, 92, 93, 120, 127], "produc": [45, 46, 102, 103, 121, 127], "product": [10, 45, 46, 49, 92, 93, 94, 101, 121, 128], "progress": [13, 16], "prolong": 121, "propag": [74, 75], "properti": [44, 74, 76], "provid": [1, 2, 8, 9, 10, 11, 13, 26, 45, 46, 62, 64, 65, 74, 75, 77, 78, 92, 94, 121, 122, 123, 124, 127], "publish": 127, "put": [45, 46, 122], "pw_curve_df": [45, 46], "pyplot": [45, 46], "python": [121, 125], "pywak": [92, 101], "quantif": [43, 44], "quantifi": [124, 127], "quantiti": [13, 27, 29, 30, 33, 34, 39, 41, 42, 54, 56, 127], "queri": [45, 46], "question": [108, 109, 110], "quickli": [92, 97, 101], "r": [92, 99, 127], "radiu": [13, 27, 30, 34, 39, 42, 77, 86, 92, 99], "rais": [8, 9, 74, 75, 77, 78], "ramp": [102, 103], "ramp_down_w": [102, 103], "ramp_up_w": [102, 103], "rang": [13, 27, 29, 30, 33, 34, 39, 41, 42, 43, 44, 77, 81, 92, 100, 101, 121], "rapid": [92, 93], "rate": [45, 46], "rather": [13, 15, 45, 46, 77, 82, 83, 84, 85, 128], "ratio": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 43, 44, 62, 68, 77, 81, 90, 91, 92, 101, 120, 121, 124, 127, 128], "raw": [92, 101, 120, 127], "raw_data_process": 121, "re": [92, 93, 125], "read": [45, 46], "readili": 121, "real": [13, 16, 92, 100, 121, 123], "receiv": [77, 78], "recent": 121, "recommend": [92, 101, 121, 123, 125], "reconfigur": 122, "rectangular": [92, 94], "red": 121, "reduc": [13, 16, 121], "reduct": [13, 16, 62, 63], "ref": [77, 90, 91], "ref_col": [1, 2, 8, 9, 10, 11, 77, 79, 86, 90, 91], "ref_turbin": [1, 2, 10, 11, 62, 66, 67, 68, 77, 88], "refer": [1, 2, 10, 11, 77, 86, 90, 91, 92, 100, 108, 111, 121, 122], "refin": [102, 103], "refine_with_fmin": [69, 70, 104, 105], "reflect": [77, 81, 86, 88], "regard": 127, "region": [45, 46, 102, 103], "reimplement": [62, 68], "rel": [45, 46, 121, 122, 127], "relat": 127, "relev": [13, 24, 27, 30, 34, 39, 42], "reli": [121, 124, 127], "remain": 122, "remaind": [92, 101], "rememb": 125, "remov": [13, 14, 45, 46, 77, 82, 83, 84, 85, 86, 92, 97, 121, 127], "remove_all_nul": [1, 2, 8, 9, 10, 11, 62, 66, 68, 77, 82, 83, 84, 85, 86, 88], "renam": 121, "repeat": [5, 7, 121], "replac": [13, 18, 108, 111], "replic": [108, 111], "replicate_nan_valu": 108, "report": [45, 49, 121], "repositori": [0, 12, 59, 73, 123, 124, 125, 126, 127], "repres": [92, 98, 108, 111, 127, 128], "requir": [1, 2, 10, 11, 45, 49, 77, 86, 90, 91, 121], "resampl": [5, 6, 121], "resample_energy_t": [5, 6], "research": 127, "reset": [45, 46, 121], "reset_filt": [45, 46], "reset_index": 121, "resim_flori": 108, "resimul": [108, 111], "resolut": [43, 44, 121], "respect": [43, 44, 62, 64, 65, 66, 92, 101, 102, 103, 121, 127], "result": [1, 2, 8, 9, 10, 11, 45, 46, 77, 81, 86, 92, 93, 94, 100, 113], "return": [1, 2, 5, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 62, 63, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 111, 113, 114, 117, 118, 119, 121, 126, 128], "return_by_column": [50, 51], "return_index_map": [54, 55], "return_influence_magnitud": [92, 98], "review": 127, "rich": [124, 127], "right": [45, 46, 77, 83, 85, 87, 89, 92, 93], "role": 127, "root": [44, 125], "rose": [92, 100, 101, 121, 122], "roughli": 123, "round": 121, "row": [5, 6, 13, 14, 15, 17, 18, 27, 29, 30, 33, 34, 39, 41, 42, 45, 49, 77, 81, 86, 92, 95, 96, 97, 98, 100, 102, 103], "rtype": [77, 85, 87, 89], "run": [45, 46, 92, 93, 95, 96, 98, 121], "runtimeerror": [77, 78], "safe": [45, 46, 92, 97], "same": [5, 6, 13, 18, 43, 44, 45, 46, 77, 81, 92, 93, 101, 108, 111, 121], "sampl": [1, 2, 10, 11, 92, 101, 121], "save": [8, 9, 43, 44, 92, 94, 121, 127], "save_path": [43, 44, 50, 60, 61, 71, 72], "save_turbine_inflow_conditions_to_df": [92, 94], "scada": [0, 12, 43, 44, 45, 46, 49, 59, 62, 66, 67, 73, 92, 100, 121, 122, 124, 127], "scada_col": 121, "scada_result": [62, 64], "scale": [43, 44], "scatter": [45, 46], "scenario": [92, 101], "scheme": [8, 9], "scienc": 127, "scipi": [74, 75, 102, 103], "script": 121, "search": [43, 44], "second": [1, 2, 10, 11, 13, 15, 54, 55, 56, 92, 98, 121], "see": [121, 122, 127], "select": 121, "select_best_wake_model_paramet": 62, "select_best_wd_std": 62, "self": [43, 44, 45, 46, 121], "sensor": [45, 46, 92, 101, 121, 127], "separ": [8, 9, 43, 44], "serial": [102, 103], "serv": [92, 100, 121], "server": 121, "set": [1, 2, 3, 4, 10, 11, 13, 24, 43, 44, 45, 46, 77, 90, 91, 92, 94, 100, 101, 108, 110, 121, 122, 127], "set_df": [71, 72], "set_measur": [69, 70], "set_pow_ref_by_n_closest_upstream_turbin": 13, "set_pow_ref_by_turbin": 13, "set_pow_ref_by_upstream_turbin": 13, "set_pow_ref_by_upstream_turbines_in_radiu": 13, "set_ti_by_all_turbin": 13, "set_ti_by_turbin": 13, "set_ti_by_upstream_turbin": 13, "set_ti_by_upstream_turbines_in_radiu": 13, "set_wd_by_all_turbin": 13, "set_wd_by_radius_from_turbin": 13, "set_wd_by_turbin": 13, "set_ws_by_all_turbin": 13, "set_ws_by_n_closest_upstream_turbin": 13, "set_ws_by_turbin": 13, "set_ws_by_upstream_turbin": 13, "set_ws_by_upstream_turbines_in_radiu": 13, "setup": 125, "sever": [45, 46], "share": 121, "shed": [45, 49], "shift": [43, 44, 121], "should": [1, 2, 10, 11, 13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 54, 56, 77, 81, 92, 97, 100, 101, 113, 117, 118, 119, 121], "show": [8, 9, 43, 44, 45, 46, 49, 121], "show_uncorrcted_data": [43, 44], "show_uncorrected_data": [43, 44], "show_wind_direction_distribut": [8, 9], "show_wind_speed_distribut": [8, 9], "shown": [8, 9, 45, 46, 121], "shutdown": [45, 46], "side": 121, "signal": [45, 46, 121], "significantli": 121, "similar": [121, 128], "similarli": 121, "simlei": 127, "simpler": 121, "simpli": [13, 15, 92, 96, 121], "simplifi": [92, 97, 121], "simul": [92, 94, 97, 127], "sinc": [45, 46, 121], "singl": [8, 9, 45, 46, 121, 128], "sinner": [126, 127], "situat": [45, 46, 121], "size": [13, 16, 43, 44, 45, 46, 77, 83, 85, 86, 92, 94, 98, 101, 127], "slice": 121, "slightli": [43, 44, 45, 46, 92, 100], "slope": [92, 97, 100], "smaller": 121, "smallest": [77, 83, 85, 87, 89], "smarteol": [122, 128], "so": [45, 46, 49, 92, 100, 121], "softwar": 127, "solut": [45, 46, 92, 93, 94, 101, 127], "solv": [43, 44, 123], "some": [62, 68, 77, 78, 113], "someon": [13, 18], "somewher": [45, 46], "sort": [13, 17, 18, 92, 96, 99, 113], "sort_by_dist": [92, 99], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 125, 127], "space": [43, 44], "speak": 123, "specif": [45, 46, 77, 86, 92, 101, 121, 122], "specifi": [1, 2, 10, 11, 43, 44, 45, 46, 74, 75, 77, 86, 87, 89, 92, 96, 98, 117, 118, 119, 121, 127], "speed": [1, 2, 3, 4, 8, 9, 10, 11, 13, 16, 41, 43, 44, 45, 46, 77, 85, 86, 90, 91, 92, 94, 95, 96, 98, 101, 102, 103, 121, 127], "sql": 121, "squar": [62, 64, 65], "stackoverflow": [108, 109, 110], "standard": [45, 46, 54, 56, 74, 76, 92, 93, 117, 118, 119], "start": [13, 15, 102, 103, 122], "stat": [74, 75], "state": 121, "statist": [74, 76, 77, 86], "statu": [45, 46], "std": 127, "std_wd": [74, 76], "stddev_threshold": [45, 46, 50, 51], "steer": [102, 103, 122, 123, 127], "step": [1, 2, 10, 11, 43, 44, 45, 46, 77, 83, 85, 86, 92, 93, 97, 100, 101, 121, 123], "still": [13, 27, 30, 34, 39, 42, 92, 99, 113], "storag": [13, 16, 121, 127], "store": [8, 9], "str": [1, 2, 5, 6, 8, 9, 10, 11, 13, 24, 43, 44, 45, 46, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 101, 108, 109, 110, 117, 118, 119], "straightforwardli": 121, "streamhandl": 44, "streamlit": 121, "strictli": [1, 2, 10, 11], "string": [45, 46], "strongest": [92, 95], "strongli": 121, "structur": [5, 6], "stuck": [45, 46, 121, 127], "subdirectori": 123, "submodul": 120, "subset": [8, 9, 45, 46], "subtleti": 121, "subtract": [77, 81, 121], "suffici": [45, 49], "suggest": [45, 46], "suit": [121, 124, 127], "sum": [1, 2, 10, 11, 77, 78], "sun": [13, 24, 26], "sun_altitud": [13, 24, 26], "sunris": [13, 24], "sunrise_altitud": [13, 24], "sunset": [13, 24], "sunset_altitud": [13, 24], "suppli": 113, "support": 127, "supposedli": [92, 97], "sure": [45, 46, 121], "surround": 121, "sweep": [62, 66, 67], "sweep_deflection_parameter_for_total_uplift": 62, "sweep_velocity_model_parameter_for_overall_wake_loss": 62, "sweep_wd_std_for_": 62, "sychron": 127, "synchron": 121, "syntax": 122, "synthet": [124, 127], "t": [1, 2, 10, 11, 92, 95, 96, 99], "t_step": [104, 106], "tabl": [5, 6, 43, 44, 77, 78, 92, 101, 126], "take": [13, 15, 62, 68, 74, 75, 77, 86, 102, 103, 121], "taken": 127, "target_i": 113, "team": [126, 127], "technic": 127, "term": [1, 2, 10, 11, 43, 44, 121], "test": [1, 2, 10, 11, 43, 44, 77, 86, 90, 91, 92, 100, 121, 122], "test_col": [1, 2, 8, 9, 10, 11, 77, 80, 86, 90, 91], "test_turbin": [1, 2, 10, 11, 43, 44, 62, 66, 67, 68, 77, 88, 92, 98], "test_turbines_subset": [43, 44], "than": [13, 15, 43, 44, 45, 46, 49, 77, 82, 83, 84, 85, 87, 89, 113, 121], "thei": [1, 2, 10, 11, 13, 27, 30, 34, 39, 42, 121], "them": [45, 46, 121], "therebi": [92, 93], "therefor": [92, 101, 121], "thi": [3, 4, 5, 6, 8, 9, 13, 15, 16, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 74, 76, 77, 78, 81, 86, 92, 93, 94, 97, 100, 101, 102, 103, 108, 111, 113, 121, 123, 125, 127], "those": [1, 2, 10, 11, 45, 46, 92, 97, 100], "though": [92, 100, 121], "three": [92, 93, 122, 127], "threshold": [45, 46, 62, 68], "through": [121, 123, 125], "throughout": [44, 123], "thrown": [13, 18], "thu": 121, "ti": [3, 13, 28, 31, 32, 33, 34, 45, 46, 49, 50, 51, 69, 70, 71, 72, 92, 93, 94, 101, 121, 127], "ti_": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42], "ti_000": [92, 94], "ti_006": [92, 94], "ti_arrai": [92, 94], "ti_estim": 69, "ti_mask": [43, 44], "ti_rang": [13, 19], "time": [5, 7, 13, 14, 15, 17, 18, 24, 26, 45, 46, 92, 101, 113, 114, 121], "time_arrai": [54, 57, 113, 114, 121], "time_mask": [43, 44], "time_oper": 121, "timedelta": [52, 53, 54, 55, 56, 113, 114], "timedelta64": [104, 106], "timeseri": [92, 101, 127], "timeshift": [121, 127], "timestamp": [13, 24, 45, 46, 49, 121], "timestep": [113, 114], "timezon": 121, "titl": [45, 46, 127], "to_datetim": [43, 44], "todo": [62, 68], "too": [45, 46], "tool": [92, 101, 121, 123, 124, 125, 127], "toolbox": [121, 124], "top": [45, 46, 73], "total": [10, 127], "toward": 121, "transit": [102, 103], "travers": [108, 109, 110], "treat": [54, 56], "trend": [45, 46], "true": [1, 2, 5, 6, 8, 9, 10, 11, 13, 16, 34, 36, 42, 45, 46, 49, 50, 51, 52, 53, 54, 56, 57, 74, 76, 77, 86, 92, 94, 98, 101, 104, 106, 107, 113, 121], "trust": 121, "try": [45, 46], "tupl": [1, 2, 10, 11, 43, 44, 77, 78], "turb_no": [13, 27, 30, 34, 36, 39, 42, 92, 99], "turbin": [1, 2, 3, 4, 10, 11, 13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 77, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 117, 118, 119, 122, 124, 127], "turbine_list": [13, 22, 45, 48], "turbine_nam": [45, 46], "turbine_numb": [13, 28, 31, 32, 37, 38, 40], "turbine_subset": [45, 46], "turbine_upstream": [104, 105], "turbine_weight": [92, 97], "turbines_downstream": [104, 105], "turbopark": [117, 118, 119], "turbs_within_radiu": [92, 99], "turbul": [13, 28, 31, 32, 33, 43, 44, 92, 94, 101, 127], "turbulence_intens": [102, 103], "turn": 125, "two": [1, 2, 10, 11, 13, 17, 18, 24, 43, 44, 45, 46, 77, 90, 91, 108, 111, 121, 127], "type": [1, 2, 5, 6, 8, 9, 10, 11, 13, 15, 16, 17, 18, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 49, 62, 63, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 108, 109, 110, 113, 114, 117, 118, 119, 121, 127], "typic": [13, 16, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 92, 93, 97, 100, 101, 102, 103, 121], "uncalibr": 121, "uncertain": 121, "uncertainflorismodel": [92, 93], "uncertainti": [43, 44, 117, 118, 119], "uncommon": [43, 44], "uncorrect": [43, 44], "under": [43, 44, 126], "understand": 123, "union": [8, 9], "uniqu": [45, 46], "unless": [8, 9, 77, 86], "unrealist": 121, "unsort": [13, 17, 18], "unstack": 121, "until": [13, 27, 30, 34, 39, 42, 92, 93, 94], "unwak": [92, 100], "up": [13, 16, 45, 46, 92, 101, 102, 103, 121, 127], "updat": [108, 111], "uplift": [1, 2, 8, 9, 10, 11, 62, 66, 127], "uplift_absolut": [1, 2, 77, 88], "uplift_col": [8, 9], "uplift_df_name1_df_name2": [1, 2, 10, 11], "uplift_nam": [1, 2, 10, 11, 77, 88], "uplift_names_subset": [8, 9], "uplift_pair": [1, 2, 10, 11, 77, 88], "upper": [43, 44, 45, 46], "upsampl": 127, "upstream": [3, 4, 13, 27, 29, 30, 33, 34, 39, 41, 42, 92, 100, 127], "uq": [43, 44], "url": 127, "us": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 26, 27, 28, 30, 31, 32, 34, 37, 38, 39, 40, 42, 43, 44, 45, 46, 62, 63, 67, 77, 78, 81, 83, 85, 86, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 103, 108, 109, 110, 111, 113, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128], "usag": [45, 46, 121, 127, 128], "use_circular_statist": [104, 106], "use_predefined_ref": [1, 2, 10, 11, 77, 88], "use_predefined_w": [1, 2, 10, 11, 77, 88], "use_predefined_wd": [1, 2, 10, 11, 77, 88], "useabl": 121, "user": [44, 45, 46, 92, 101, 121, 123, 125, 127], "userwarn": [77, 78], "utc": [13, 24], "util": [13, 27, 29, 30, 33, 34, 39, 41, 42, 45, 49, 120, 123, 124], "v": [45, 46, 121], "v1": 122, "valid": [45, 46, 77, 86, 90, 91, 92, 101, 121, 124, 127], "valu": [1, 2, 5, 7, 10, 11, 13, 14, 15, 18, 28, 29, 31, 32, 33, 35, 37, 38, 40, 41, 43, 44, 45, 46, 62, 63, 66, 67, 68, 74, 76, 77, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 101, 108, 109, 110, 111, 113, 121, 128], "value_candid": [62, 64, 65, 66, 67, 68], "valueerror": [8, 9], "vane": 121, "vane_bound": [71, 72], "vari": [92, 100], "variabl": [13, 16, 27, 29, 30, 33, 34, 39, 41, 42, 43, 44, 45, 46, 92, 94, 102, 103, 121, 127], "variant": 121, "variat": [45, 46], "variou": [43, 44, 45, 46, 121], "vector": 121, "veloc": [62, 64], "venv": 125, "verbos": [13, 14, 16, 45, 46, 49, 50, 51, 54, 57, 60, 61, 69, 70, 92, 101, 104, 105, 106, 121], "veri": [45, 46, 92, 97, 121, 127], "version": 127, "via": [108, 109, 110], "virtual": 125, "visual": 127, "w": [1, 2, 8, 9, 10, 11, 13, 38, 40, 41, 42, 69, 70, 77, 78, 84, 86, 90, 91, 92, 93, 94, 99, 101, 121], "wa": [45, 46, 122], "wai": [13, 15, 121, 123], "wake": [43, 44, 45, 49, 62, 63, 92, 97, 100, 102, 103, 117, 118, 119, 121, 122, 123, 124, 127], "wake_loss_thr": [69, 70], "wake_model": [117, 118, 119], "wake_slop": [92, 97, 100], "want": [45, 46, 108, 111, 113], "warn": [92, 101], "wd": [1, 2, 3, 4, 10, 11, 13, 35, 37, 45, 49, 69, 70, 77, 78, 82, 86, 90, 91, 92, 93, 94, 95, 96, 101, 121], "wd_": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 121], "wd_000": [45, 46, 49, 92, 94, 121], "wd_001": [45, 49, 121], "wd_002": [45, 49], "wd_003": [45, 46, 121], "wd_006": [92, 94], "wd_arrai": [3, 4, 92, 94, 95, 96, 97, 98], "wd_bia": [43, 44], "wd_bin": [1, 2, 3, 10, 11, 62, 66, 68, 77, 83], "wd_bin_overlap_radiu": [1, 2, 8, 9, 10, 11, 77, 86, 88], "wd_bin_width": [3, 4, 43, 44], "wd_col": [1, 2, 8, 9, 10, 11, 77, 82, 83, 86, 90, 91], "wd_mask": [43, 44], "wd_max": [1, 2, 8, 9, 10, 11, 62, 66, 67, 68, 77, 83, 86, 88], "wd_min": [1, 2, 8, 9, 10, 11, 62, 66, 67, 68, 77, 83, 86, 88], "wd_rang": [13, 20], "wd_std": [62, 65, 68, 92, 93, 117, 118, 119], "wd_step": [1, 2, 8, 9, 10, 11, 43, 44, 62, 66, 68, 77, 83, 86, 88, 92, 97, 100], "wd_turbin": [1, 2, 10, 11, 77, 88], "we": [3, 4, 45, 46, 49, 92, 101, 121, 123], "week": [45, 46, 121], "weight": [1, 2, 10, 11, 77, 78, 92, 97], "weight_bi": [1, 2, 8, 9, 10, 11, 62, 66, 68, 77, 78, 88], "weigth": [1, 2, 10, 11], "welcom": 124, "well": [13, 26, 127], "were": [45, 46, 122, 127], "what": [43, 44, 92, 100, 121, 127], "when": [1, 2, 10, 11, 43, 44, 45, 46, 62, 68, 92, 94, 108, 111, 117, 118, 119, 125], "where": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 15, 43, 44, 45, 46, 77, 81, 92, 100, 121, 123], "whether": [8, 9, 13, 24, 45, 46, 92, 98], "which": [1, 2, 10, 11, 13, 18, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 77, 82, 83, 84, 85, 88, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 113, 120, 121, 127], "while": 127, "whose": [77, 83, 85, 87, 89], "widespread": 121, "width": [1, 2, 10, 11, 43, 44], "wind": [1, 2, 3, 4, 8, 9, 10, 11, 13, 27, 29, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 74, 75, 76, 77, 81, 83, 85, 86, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 117, 118, 119, 122, 124, 127, 128], "wind_direct": [102, 103], "wind_spe": [102, 103], "winddirection_80m": 121, "window": [45, 46, 121], "window_add": 121, "window_width": [54, 55, 56], "windspe": 121, "wise": [45, 46], "within": [13, 15, 30, 34, 42, 45, 46, 77, 81, 86, 92, 99, 121, 122, 127], "without": [13, 16, 77, 78, 86, 92, 93, 97], "work": 125, "would": [45, 46, 121, 127], "wrap": [77, 81, 121, 127], "wrap_0deg_to_360deg": [92, 101], "wrap_around_360": [113, 116], "wrapper": [74, 75, 92, 95, 96], "write": [92, 94, 127], "ws_": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 121], "ws_000": [45, 46, 92, 94, 121], "ws_001": [45, 46], "ws_003": [45, 46], "ws_006": [92, 94], "ws_arrai": [92, 94], "ws_bin": [1, 2, 10, 11, 45, 46, 62, 66, 68, 77, 83, 85], "ws_col": [1, 2, 8, 9, 10, 11, 77, 84, 85, 86, 90, 91], "ws_deadband": [45, 46], "ws_mask": [43, 44], "ws_max": [1, 2, 8, 9, 10, 11, 62, 66, 67, 68, 77, 83, 85, 86, 88], "ws_min": [1, 2, 8, 9, 10, 11, 62, 66, 67, 68, 77, 83, 85, 86, 88], "ws_rang": [3, 4, 13, 21, 121], "ws_step": [1, 2, 8, 9, 10, 11, 43, 44, 62, 66, 68, 77, 83, 85, 86, 88], "ws_test": [92, 95, 96, 98], "ws_turbin": [1, 2, 10, 11, 77, 88], "x": [13, 27, 30, 34, 39, 42, 45, 46, 92, 98, 113, 116], "x_col": [45, 46], "x_is_sort": 113, "x_opt": [43, 44], "x_turb": [13, 27, 30, 34, 36, 39, 42, 92, 99], "xlabel": [45, 46], "xp": [113, 116], "xp_is_sort": 113, "y": [13, 27, 30, 34, 39, 42, 45, 46, 113], "y_col": [45, 46], "y_shift_rang": [104, 106], "y_turb": [13, 27, 30, 34, 36, 39, 42, 92, 99], "yaw": [102, 103, 121, 127], "yaw_": 121, "yaw_000": 121, "yaw_001": 121, "yaw_angl": [62, 67, 68, 108, 112], "yaw_angles_baselin": [62, 66], "yaw_angles_opt": [102, 103], "yaw_angles_wakest": [62, 66], "yaw_optimizer_visu": 127, "year": 127, "yet": [45, 46, 62, 63, 121], "yield": [92, 94, 100, 122], "ylabel": [45, 46], "ylim": [3, 4], "you": [45, 46, 108, 111, 113, 121, 123, 125, 127], "your": [13, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 45, 46, 92, 100, 101, 125, 127], "yref": [104, 107], "ytest": [104, 107], "zero": [1, 2, 10, 11, 45, 46, 102, 103], "zoh": [13, 15]}, "titles": ["flasc.analysis", "flasc.analysis.energy_ratio", "flasc.analysis.energy_ratio.compute_energy_ratio", "flasc.analysis.energy_ratio_heterogeneity_mapper", "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", "flasc.analysis.energy_ratio_input", "flasc.analysis.energy_ratio_input.EnergyRatioInput", "flasc.analysis.energy_ratio_input.generate_block_list", "flasc.analysis.energy_ratio_output", "flasc.analysis.energy_ratio_output.EnergyRatioOutput", "flasc.analysis.total_uplift", "flasc.analysis.total_uplift.compute_total_uplift", "flasc.data_processing", "flasc.data_processing.dataframe_manipulations", "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", "flasc.data_processing.dataframe_manipulations.df_reduce_precision", "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", "flasc.data_processing.dataframe_manipulations.get_column_mean", "flasc.data_processing.dataframe_manipulations.get_num_turbines", "flasc.data_processing.dataframe_manipulations.is_day_or_night", "flasc.data_processing.dataframe_manipulations.make_df_wide", "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", "flasc.data_processing.energy_ratio_wd_bias_estimation", "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", "flasc.data_processing.filtering", "flasc.data_processing.filtering.FlascFilter", "flasc.data_processing.filtering.df_get_no_faulty_measurements", "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", "flasc.data_processing.find_sensor_faults", "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", "flasc.data_processing.northing_offset", "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", "flasc.data_processing.time_operations", "flasc.data_processing.time_operations.df_downsample", "flasc.data_processing.time_operations.df_movingaverage", "flasc.data_processing.time_operations.df_resample_by_interpolation", "flasc.data_processing.time_operations.flatten_cols", "flasc.model_fitting", "flasc.model_fitting.floris_sensitivity_analysis", "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", "flasc.model_fitting.floris_tuning", "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", "flasc.model_fitting.floris_tuning.select_best_wd_std", "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", "flasc.model_fitting.turbulence_estimator", "flasc.model_fitting.turbulence_estimator.ti_estimator", "flasc.model_fitting.yaw_pow_fitting", "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", "flasc.utilities", "flasc.utilities.circular_statistics", "flasc.utilities.circular_statistics.calc_wd_mean_radial", "flasc.utilities.circular_statistics.calculate_wd_statistics", "flasc.utilities.energy_ratio_utilities", "flasc.utilities.energy_ratio_utilities.add_bin_weights", "flasc.utilities.energy_ratio_utilities.add_power_ref", "flasc.utilities.energy_ratio_utilities.add_power_test", "flasc.utilities.energy_ratio_utilities.add_reflected_rows", "flasc.utilities.energy_ratio_utilities.add_wd", "flasc.utilities.energy_ratio_utilities.add_wd_bin", "flasc.utilities.energy_ratio_utilities.add_ws", "flasc.utilities.energy_ratio_utilities.add_ws_bin", "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", "flasc.utilities.energy_ratio_utilities.bin_column", "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", "flasc.utilities.energy_ratio_utilities.cut", "flasc.utilities.energy_ratio_utilities.filter_all_nulls", "flasc.utilities.energy_ratio_utilities.filter_any_nulls", "flasc.utilities.floris_tools", "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", "flasc.utilities.floris_tools.calc_floris_approx_table", "flasc.utilities.floris_tools.get_all_dependent_turbines", "flasc.utilities.floris_tools.get_all_impacting_turbines", "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", "flasc.utilities.floris_tools.get_turbs_in_radius", "flasc.utilities.floris_tools.get_upstream_turbs_floris", "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", "flasc.utilities.lookup_table_tools", "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", "flasc.utilities.optimization", "flasc.utilities.optimization.estimate_ti", "flasc.utilities.optimization.find_timeshift_between_dfs", "flasc.utilities.optimization.match_y_curves_by_offset", "flasc.utilities.tuner_utilities", "flasc.utilities.tuner_utilities.nested_get", "flasc.utilities.tuner_utilities.nested_set", "flasc.utilities.tuner_utilities.replicate_nan_values", "flasc.utilities.tuner_utilities.resim_floris", "flasc.utilities.utilities", "flasc.utilities.utilities.estimate_dt", "flasc.utilities.utilities.get_num_turbines", "flasc.utilities.utilities.interp_with_max_gap", "flasc.utilities.utilities_examples", "flasc.utilities.utilities_examples.load_floris_artificial", "flasc.utilities.utilities_examples.load_floris_smarteole", "API Documentation", "Raw data processing", "Energy ratio analysis", "Getting started", "FLASC documentation", "Installation", "Licensing", "Overview", "Total uplift"], "titleterms": {"a_00_initial_download": 121, "a_01_to_common_format_df": 121, "a_02_basic_filt": 121, "a_03_check_sensor_stuck_fault": 121, "a_04_wspowercurve_filtering_cod": 121, "a_04_wspowercurve_filtering_gui": 121, "a_05a_plot_faults_with_layout": 121, "a_05b_cross_compare_wd_measurement_calibr": 121, "a_06a_determine_timeshift_datasourc": 121, "a_06b_apply_timeshift_df": 121, "a_07a_estimate_wd_bias_per_turbin": 121, "a_07b_wd_bias_to_df": 121, "a_08_plot_energy_ratio": 121, "add_bin_weight": 78, "add_gaussian_blending_to_floris_approx_t": 93, "add_power_ref": 79, "add_power_test": 80, "add_reflected_row": 81, "add_w": 84, "add_wd": 82, "add_wd_bin": 83, "add_ws_bin": 85, "analysi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 122, 127], "api": 120, "bias_estim": 44, "bin_and_group_datafram": 86, "bin_column": 87, "calc_floris_approx_t": 94, "calc_wd_mean_radi": 75, "calculate_wd_statist": 76, "check_compute_energy_ratio_input": 88, "circular_statist": [74, 75, 76], "citat": 127, "compute_energy_ratio": 2, "compute_total_uplift": 11, "crosscheck_northing_offset_consist": 53, "cut": 89, "data": 121, "data_process": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 127], "dataframe_manipul": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "demonstr": 122, "develop": 125, "df_downsampl": 55, "df_drop_nan_row": 14, "df_find_and_fill_data_gaps_with_miss": 15, "df_get_no_faulty_measur": 47, "df_mark_turbdata_as_faulti": 48, "df_movingaverag": 56, "df_reduce_precis": 16, "df_resample_by_interpol": 57, "df_sort_and_find_dupl": 17, "df_sort_and_fix_dupl": 18, "document": [120, 124], "energi": 122, "energy_ratio": [1, 2], "energy_ratio_heterogeneity_mapp": [3, 4], "energy_ratio_input": [5, 6, 7], "energy_ratio_output": [8, 9], "energy_ratio_util": [77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "energy_ratio_wd_bias_estim": [43, 44], "energyratioinput": 6, "energyratiooutput": 9, "estimate_dt": 114, "estimate_ti": 105, "evaluate_overall_wake_loss": 63, "exampl": [121, 122, 123], "farm": 121, "filter": [45, 46, 47, 48, 49, 121], "filter_all_nul": 90, "filter_any_nul": 91, "filter_df_by_faulty_impacting_turbin": 49, "filter_df_by_ti": 19, "filter_df_by_w": 21, "filter_df_by_wd": 20, "find_sensor_fault": [50, 51], "find_sensor_stuck_fault": 51, "find_timeshift_between_df": 106, "flasc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 124, 127], "flascfilt": 46, "flatten_col": 58, "floris_sensitivity_analysi": [60, 61], "floris_sobol_analysi": 61, "floris_tool": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "floris_tun": [62, 63, 64, 65, 66, 67, 68], "format": 121, "generate_block_list": 7, "get": 123, "get_all_dependent_turbin": 95, "get_all_impacting_turbin": 96, "get_all_impacting_turbines_geometr": 97, "get_column_mean": 22, "get_dependent_turbines_by_wd": 98, "get_num_turbin": [23, 115], "get_turbs_in_radiu": 99, "get_upstream_turbs_flori": 100, "get_yaw_angles_interpol": 103, "heterogeneity_mapp": 4, "instal": [123, 125], "interp_with_max_gap": 116, "interpolate_floris_from_df_approx": 101, "is_day_or_night": 24, "licens": 126, "literatur": 127, "load_floris_artifici": 118, "load_floris_smarteol": 119, "lookup_table_tool": [102, 103], "make_df_wid": 25, "match_y_curves_by_offset": 107, "model_fit": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 127], "necessari": 121, "nested_get": 109, "nested_set": 110, "northing_offset": [52, 53], "optim": [104, 105, 106, 107], "option": 121, "overview": 127, "packag": 127, "plot_sun_altitude_with_day_night_color": 26, "process": 121, "py": 121, "question": 127, "ratio": 122, "raw": 121, "replicate_nan_valu": 111, "resim_flori": 112, "retriev": 121, "select_best_wake_model_paramet": 64, "select_best_wd_std": 65, "set_pow_ref_by_n_closest_upstream_turbin": 27, "set_pow_ref_by_turbin": 28, "set_pow_ref_by_upstream_turbin": 29, "set_pow_ref_by_upstream_turbines_in_radiu": 30, "set_ti_by_all_turbin": 31, "set_ti_by_turbin": 32, "set_ti_by_upstream_turbin": 33, "set_ti_by_upstream_turbines_in_radiu": 34, "set_wd_by_all_turbin": 35, "set_wd_by_radius_from_turbin": 36, "set_wd_by_turbin": 37, "set_ws_by_all_turbin": 38, "set_ws_by_n_closest_upstream_turbin": 39, "set_ws_by_turbin": 40, "set_ws_by_upstream_turbin": 41, "set_ws_by_upstream_turbines_in_radiu": 42, "start": 123, "sweep_deflection_parameter_for_total_uplift": 66, "sweep_velocity_model_parameter_for_overall_wake_loss": 67, "sweep_wd_std_for_": 68, "tabl": 121, "tall": 121, "three": 121, "ti_estim": 70, "time_oper": [54, 55, 56, 57, 58], "total": 128, "total_uplift": [10, 11], "tuner_util": [108, 109, 110, 111, 112], "turbin": 121, "turbulence_estim": [69, 70], "uplift": 128, "usag": 122, "util": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127], "utilities_exampl": [117, 118, 119], "wide": 121, "wind": 121, "yaw_pow_fit": [71, 72]}})