Search.setIndex({"alltitles": {"API Documentation": [[119, null]], "Citation": [[126, "citation"]], "Data filtering": [[120, "data-filtering"]], "Energy ratio analysis": [[121, null]], "Example Tall data format for a three turbine wind farm": [[120, "id1"]], "Example Wide data format for a three turbine wind farm": [[120, "id2"]], "Examples demonstrating energy ratio usage": [[121, "examples-demonstrating-energy-ratio-usage"]], "FLASC documentation": [[123, null]], "FLASC examples": [[122, "flasc-examples"]], "FLASC package": [[126, "flasc-package"]], "Format data to a wide table format (if necessary)": [[120, "format-data-to-a-wide-table-format-if-necessary"]], "Getting started": [[122, null]], "Install FLASC": [[122, "install-flasc"]], "Installation": [[124, null]], "Installation for developers": [[124, "installation-for-developers"]], "Licensing": [[125, null]], "Literature": [[126, "literature"]], "Overview": [[126, null]], "Questions": [[126, "questions"]], "Raw data processing": [[120, null]], "Raw data retrieval": [[120, "raw-data-retrieval"]], "Total uplift": [[127, null]], "a_00_initial_download.py": [[120, "a-00-initial-download-py"]], "a_01_to_common_format_df.py": [[120, "a-01-to-common-format-df-py"]], "a_02_basic_filters.py": [[120, "a-02-basic-filters-py"]], "a_03_check_sensor_stuck_faults.py": [[120, "a-03-check-sensor-stuck-faults-py"]], "a_04_wspowercurve_filtering_code.py": [[120, "a-04-wspowercurve-filtering-code-py"]], "a_04_wspowercurve_filtering_gui.py (optional)": [[120, "a-04-wspowercurve-filtering-gui-py-optional"]], "a_05a_plot_faults_with_layout.py (optional)": [[120, "a-05a-plot-faults-with-layout-py-optional"]], "a_05b_cross_compare_wd_measurement_calibrations.py (optional)": [[120, "a-05b-cross-compare-wd-measurement-calibrations-py-optional"]], "a_06a_determine_timeshift_datasources.py (optional)": [[120, "a-06a-determine-timeshift-datasources-py-optional"]], "a_06b_apply_timeshift_dfs.py (optional)": [[120, "a-06b-apply-timeshift-dfs-py-optional"]], "a_07a_estimate_wd_bias_per_turbine.py": [[120, "a-07a-estimate-wd-bias-per-turbine-py"]], "a_07b_wd_bias_to_df.py": [[120, "a-07b-wd-bias-to-df-py"]], "a_08_plot_energy_ratios.py": [[120, "a-08-plot-energy-ratios-py"]], "flasc.analysis": [[0, null], [126, "flasc-analysis"]], "flasc.analysis.energy_ratio": [[1, null]], "flasc.analysis.energy_ratio.compute_energy_ratio": [[2, null]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, null]], "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper": [[4, null]], "flasc.analysis.energy_ratio_input": [[5, null]], "flasc.analysis.energy_ratio_input.EnergyRatioInput": [[6, null]], "flasc.analysis.energy_ratio_input.generate_block_list": [[7, null]], "flasc.analysis.energy_ratio_output": [[8, null]], "flasc.analysis.energy_ratio_output.EnergyRatioOutput": [[9, null]], "flasc.analysis.total_uplift": [[10, null]], "flasc.analysis.total_uplift.compute_total_uplift": [[11, null]], "flasc.data_processing": [[12, null], [126, "flasc-data-processing"]], "flasc.data_processing.dataframe_manipulations": [[13, null]], "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows": [[14, null]], "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing": [[15, null]], "flasc.data_processing.dataframe_manipulations.df_reduce_precision": [[16, null]], "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates": [[17, null]], "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates": [[18, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_ti": [[19, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_wd": [[20, null]], "flasc.data_processing.dataframe_manipulations.filter_df_by_ws": [[21, null]], "flasc.data_processing.dataframe_manipulations.get_column_mean": [[22, null]], "flasc.data_processing.dataframe_manipulations.get_num_turbines": [[23, null]], "flasc.data_processing.dataframe_manipulations.is_day_or_night": [[24, null]], "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color": [[25, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines": [[26, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines": [[27, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines": [[28, null]], "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius": [[29, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines": [[30, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines": [[31, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines": [[32, null]], "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius": [[33, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines": [[34, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine": [[35, null]], "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines": [[36, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines": [[37, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines": [[38, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines": [[39, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines": [[40, null]], "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius": [[41, null]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[42, null]], "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation": [[43, null]], "flasc.data_processing.filtering": [[44, null]], "flasc.data_processing.filtering.FlascFilter": [[45, null]], "flasc.data_processing.filtering.df_get_no_faulty_measurements": [[46, null]], "flasc.data_processing.filtering.df_mark_turbdata_as_faulty": [[47, null]], "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines": [[48, null]], "flasc.data_processing.find_sensor_faults": [[49, null]], "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults": [[50, null]], "flasc.data_processing.northing_offset": [[51, null]], "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency": [[52, null]], "flasc.data_processing.time_operations": [[53, null]], "flasc.data_processing.time_operations.df_downsample": [[54, null]], "flasc.data_processing.time_operations.df_movingaverage": [[55, null]], "flasc.data_processing.time_operations.df_resample_by_interpolation": [[56, null]], "flasc.data_processing.time_operations.flatten_cols": [[57, null]], "flasc.model_fitting": [[58, null], [126, "flasc-model-fitting"]], "flasc.model_fitting.floris_sensitivity_analysis": [[59, null]], "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis": [[60, null]], "flasc.model_fitting.floris_tuning": [[61, null]], "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss": [[62, null]], "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter": [[63, null]], "flasc.model_fitting.floris_tuning.select_best_wd_std": [[64, null]], "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift": [[65, null]], "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses": [[66, null]], "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er": [[67, null]], "flasc.model_fitting.turbulence_estimator": [[68, null]], "flasc.model_fitting.turbulence_estimator.ti_estimator": [[69, null]], "flasc.model_fitting.yaw_pow_fitting": [[70, null]], "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting": [[71, null]], "flasc.utilities": [[72, null], [126, "flasc-utilities"]], "flasc.utilities.circular_statistics": [[73, null]], "flasc.utilities.circular_statistics.calc_wd_mean_radial": [[74, null]], "flasc.utilities.circular_statistics.calculate_wd_statistics": [[75, null]], "flasc.utilities.energy_ratio_utilities": [[76, null]], "flasc.utilities.energy_ratio_utilities.add_bin_weights": [[77, null]], "flasc.utilities.energy_ratio_utilities.add_power_ref": [[78, null]], "flasc.utilities.energy_ratio_utilities.add_power_test": [[79, null]], "flasc.utilities.energy_ratio_utilities.add_reflected_rows": [[80, null]], "flasc.utilities.energy_ratio_utilities.add_wd": [[81, null]], "flasc.utilities.energy_ratio_utilities.add_wd_bin": [[82, null]], "flasc.utilities.energy_ratio_utilities.add_ws": [[83, null]], "flasc.utilities.energy_ratio_utilities.add_ws_bin": [[84, null]], "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe": [[85, null]], "flasc.utilities.energy_ratio_utilities.bin_column": [[86, null]], "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs": [[87, null]], "flasc.utilities.energy_ratio_utilities.cut": [[88, null]], "flasc.utilities.energy_ratio_utilities.filter_all_nulls": [[89, null]], "flasc.utilities.energy_ratio_utilities.filter_any_nulls": [[90, null]], "flasc.utilities.floris_tools": [[91, null]], "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table": [[92, null]], "flasc.utilities.floris_tools.calc_floris_approx_table": [[93, null]], "flasc.utilities.floris_tools.get_all_dependent_turbines": [[94, null]], "flasc.utilities.floris_tools.get_all_impacting_turbines": [[95, null]], "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical": [[96, null]], "flasc.utilities.floris_tools.get_dependent_turbines_by_wd": [[97, null]], "flasc.utilities.floris_tools.get_turbs_in_radius": [[98, null]], "flasc.utilities.floris_tools.get_upstream_turbs_floris": [[99, null]], "flasc.utilities.floris_tools.interpolate_floris_from_df_approx": [[100, null]], "flasc.utilities.lookup_table_tools": [[101, null]], "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant": [[102, null]], "flasc.utilities.optimization": [[103, null]], "flasc.utilities.optimization.estimate_ti": [[104, null]], "flasc.utilities.optimization.find_timeshift_between_dfs": [[105, null]], "flasc.utilities.optimization.match_y_curves_by_offset": [[106, null]], "flasc.utilities.tuner_utilities": [[107, null]], "flasc.utilities.tuner_utilities.nested_get": [[108, null]], "flasc.utilities.tuner_utilities.nested_set": [[109, null]], "flasc.utilities.tuner_utilities.replicate_nan_values": [[110, null]], "flasc.utilities.tuner_utilities.resim_floris": [[111, null]], "flasc.utilities.utilities": [[112, null]], "flasc.utilities.utilities.estimate_dt": [[113, null]], "flasc.utilities.utilities.get_num_turbines": [[114, null]], "flasc.utilities.utilities.interp_with_max_gap": [[115, null]], "flasc.utilities.utilities_examples": [[116, null]], "flasc.utilities.utilities_examples.load_floris_artificial": [[117, null]], "flasc.utilities.utilities_examples.load_floris_smarteole": [[118, null]]}, "docnames": ["_autosummary/flasc.analysis", "_autosummary/flasc.analysis.energy_ratio", "_autosummary/flasc.analysis.energy_ratio.compute_energy_ratio", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", "_autosummary/flasc.analysis.energy_ratio_input", "_autosummary/flasc.analysis.energy_ratio_input.EnergyRatioInput", "_autosummary/flasc.analysis.energy_ratio_input.generate_block_list", "_autosummary/flasc.analysis.energy_ratio_output", "_autosummary/flasc.analysis.energy_ratio_output.EnergyRatioOutput", "_autosummary/flasc.analysis.total_uplift", "_autosummary/flasc.analysis.total_uplift.compute_total_uplift", "_autosummary/flasc.data_processing", "_autosummary/flasc.data_processing.dataframe_manipulations", "_autosummary/flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", "_autosummary/flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", "_autosummary/flasc.data_processing.dataframe_manipulations.df_reduce_precision", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ti", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_wd", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ws", "_autosummary/flasc.data_processing.dataframe_manipulations.get_column_mean", "_autosummary/flasc.data_processing.dataframe_manipulations.get_num_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.is_day_or_night", "_autosummary/flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", "_autosummary/flasc.data_processing.filtering", "_autosummary/flasc.data_processing.filtering.FlascFilter", "_autosummary/flasc.data_processing.filtering.df_get_no_faulty_measurements", "_autosummary/flasc.data_processing.filtering.df_mark_turbdata_as_faulty", "_autosummary/flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", "_autosummary/flasc.data_processing.find_sensor_faults", "_autosummary/flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", "_autosummary/flasc.data_processing.northing_offset", "_autosummary/flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", "_autosummary/flasc.data_processing.time_operations", "_autosummary/flasc.data_processing.time_operations.df_downsample", "_autosummary/flasc.data_processing.time_operations.df_movingaverage", "_autosummary/flasc.data_processing.time_operations.df_resample_by_interpolation", "_autosummary/flasc.data_processing.time_operations.flatten_cols", "_autosummary/flasc.model_fitting", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", "_autosummary/flasc.model_fitting.floris_tuning", "_autosummary/flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wd_std", "_autosummary/flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", "_autosummary/flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", "_autosummary/flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", "_autosummary/flasc.model_fitting.turbulence_estimator", "_autosummary/flasc.model_fitting.turbulence_estimator.ti_estimator", "_autosummary/flasc.model_fitting.yaw_pow_fitting", "_autosummary/flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", "_autosummary/flasc.utilities", "_autosummary/flasc.utilities.circular_statistics", "_autosummary/flasc.utilities.circular_statistics.calc_wd_mean_radial", "_autosummary/flasc.utilities.circular_statistics.calculate_wd_statistics", "_autosummary/flasc.utilities.energy_ratio_utilities", "_autosummary/flasc.utilities.energy_ratio_utilities.add_bin_weights", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_ref", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_test", "_autosummary/flasc.utilities.energy_ratio_utilities.add_reflected_rows", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd_bin", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws_bin", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_column", "_autosummary/flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", "_autosummary/flasc.utilities.energy_ratio_utilities.cut", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_all_nulls", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_any_nulls", "_autosummary/flasc.utilities.floris_tools", "_autosummary/flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", "_autosummary/flasc.utilities.floris_tools.calc_floris_approx_table", "_autosummary/flasc.utilities.floris_tools.get_all_dependent_turbines", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", "_autosummary/flasc.utilities.floris_tools.get_dependent_turbines_by_wd", "_autosummary/flasc.utilities.floris_tools.get_turbs_in_radius", "_autosummary/flasc.utilities.floris_tools.get_upstream_turbs_floris", "_autosummary/flasc.utilities.floris_tools.interpolate_floris_from_df_approx", "_autosummary/flasc.utilities.lookup_table_tools", "_autosummary/flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", "_autosummary/flasc.utilities.optimization", "_autosummary/flasc.utilities.optimization.estimate_ti", "_autosummary/flasc.utilities.optimization.find_timeshift_between_dfs", "_autosummary/flasc.utilities.optimization.match_y_curves_by_offset", "_autosummary/flasc.utilities.tuner_utilities", "_autosummary/flasc.utilities.tuner_utilities.nested_get", "_autosummary/flasc.utilities.tuner_utilities.nested_set", "_autosummary/flasc.utilities.tuner_utilities.replicate_nan_values", "_autosummary/flasc.utilities.tuner_utilities.resim_floris", "_autosummary/flasc.utilities.utilities", "_autosummary/flasc.utilities.utilities.estimate_dt", "_autosummary/flasc.utilities.utilities.get_num_turbines", "_autosummary/flasc.utilities.utilities.interp_with_max_gap", "_autosummary/flasc.utilities.utilities_examples", "_autosummary/flasc.utilities.utilities_examples.load_floris_artificial", "_autosummary/flasc.utilities.utilities_examples.load_floris_smarteole", "api", "data_processing", "energy_ratio", "getting_started", "index", "installation", "licensing", "overview", "total_uplift"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["_autosummary/flasc.analysis.rst", "_autosummary/flasc.analysis.energy_ratio.rst", "_autosummary/flasc.analysis.energy_ratio.compute_energy_ratio.rst", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.rst", "_autosummary/flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.rst", "_autosummary/flasc.analysis.energy_ratio_input.rst", "_autosummary/flasc.analysis.energy_ratio_input.EnergyRatioInput.rst", "_autosummary/flasc.analysis.energy_ratio_input.generate_block_list.rst", "_autosummary/flasc.analysis.energy_ratio_output.rst", "_autosummary/flasc.analysis.energy_ratio_output.EnergyRatioOutput.rst", "_autosummary/flasc.analysis.total_uplift.rst", "_autosummary/flasc.analysis.total_uplift.compute_total_uplift.rst", "_autosummary/flasc.data_processing.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_drop_nan_rows.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_reduce_precision.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ti.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_wd.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.filter_df_by_ws.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.get_column_mean.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.get_num_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.is_day_or_night.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_wd_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines.rst", "_autosummary/flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius.rst", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.rst", "_autosummary/flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.rst", "_autosummary/flasc.data_processing.filtering.rst", "_autosummary/flasc.data_processing.filtering.FlascFilter.rst", "_autosummary/flasc.data_processing.filtering.df_get_no_faulty_measurements.rst", "_autosummary/flasc.data_processing.filtering.df_mark_turbdata_as_faulty.rst", "_autosummary/flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines.rst", "_autosummary/flasc.data_processing.find_sensor_faults.rst", "_autosummary/flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults.rst", "_autosummary/flasc.data_processing.northing_offset.rst", "_autosummary/flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency.rst", "_autosummary/flasc.data_processing.time_operations.rst", "_autosummary/flasc.data_processing.time_operations.df_downsample.rst", "_autosummary/flasc.data_processing.time_operations.df_movingaverage.rst", "_autosummary/flasc.data_processing.time_operations.df_resample_by_interpolation.rst", "_autosummary/flasc.data_processing.time_operations.flatten_cols.rst", "_autosummary/flasc.model_fitting.rst", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.rst", "_autosummary/flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.rst", "_autosummary/flasc.model_fitting.floris_tuning.rst", "_autosummary/flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss.rst", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wake_model_parameter.rst", "_autosummary/flasc.model_fitting.floris_tuning.select_best_wd_std.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses.rst", "_autosummary/flasc.model_fitting.floris_tuning.sweep_wd_std_for_er.rst", "_autosummary/flasc.model_fitting.turbulence_estimator.rst", "_autosummary/flasc.model_fitting.turbulence_estimator.ti_estimator.rst", "_autosummary/flasc.model_fitting.yaw_pow_fitting.rst", "_autosummary/flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.rst", "_autosummary/flasc.utilities.rst", "_autosummary/flasc.utilities.circular_statistics.rst", "_autosummary/flasc.utilities.circular_statistics.calc_wd_mean_radial.rst", "_autosummary/flasc.utilities.circular_statistics.calculate_wd_statistics.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_bin_weights.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_ref.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_power_test.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_reflected_rows.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_wd_bin.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.add_ws_bin.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.bin_column.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.cut.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_all_nulls.rst", "_autosummary/flasc.utilities.energy_ratio_utilities.filter_any_nulls.rst", "_autosummary/flasc.utilities.floris_tools.rst", "_autosummary/flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table.rst", "_autosummary/flasc.utilities.floris_tools.calc_floris_approx_table.rst", "_autosummary/flasc.utilities.floris_tools.get_all_dependent_turbines.rst", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines.rst", "_autosummary/flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical.rst", "_autosummary/flasc.utilities.floris_tools.get_dependent_turbines_by_wd.rst", "_autosummary/flasc.utilities.floris_tools.get_turbs_in_radius.rst", "_autosummary/flasc.utilities.floris_tools.get_upstream_turbs_floris.rst", "_autosummary/flasc.utilities.floris_tools.interpolate_floris_from_df_approx.rst", "_autosummary/flasc.utilities.lookup_table_tools.rst", "_autosummary/flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant.rst", "_autosummary/flasc.utilities.optimization.rst", "_autosummary/flasc.utilities.optimization.estimate_ti.rst", "_autosummary/flasc.utilities.optimization.find_timeshift_between_dfs.rst", "_autosummary/flasc.utilities.optimization.match_y_curves_by_offset.rst", "_autosummary/flasc.utilities.tuner_utilities.rst", "_autosummary/flasc.utilities.tuner_utilities.nested_get.rst", "_autosummary/flasc.utilities.tuner_utilities.nested_set.rst", "_autosummary/flasc.utilities.tuner_utilities.replicate_nan_values.rst", "_autosummary/flasc.utilities.tuner_utilities.resim_floris.rst", "_autosummary/flasc.utilities.utilities.rst", "_autosummary/flasc.utilities.utilities.estimate_dt.rst", "_autosummary/flasc.utilities.utilities.get_num_turbines.rst", "_autosummary/flasc.utilities.utilities.interp_with_max_gap.rst", "_autosummary/flasc.utilities.utilities_examples.rst", "_autosummary/flasc.utilities.utilities_examples.load_floris_artificial.rst", "_autosummary/flasc.utilities.utilities_examples.load_floris_smarteole.rst", "api.rst", "data_processing.rst", "energy_ratio.md", "getting_started.md", "index.md", "installation.md", "licensing.rst", "overview.md", "total_uplift.md"], "indexentries": {"_check_measurements() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator._check_measurements", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator._check_measurements", false]], "_compute_energy_ratio_bootstrap() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio._compute_energy_ratio_bootstrap", false]], "_compute_energy_ratio_single() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio._compute_energy_ratio_single", false]], "_compute_total_uplift_bootstrap() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift._compute_total_uplift_bootstrap", false]], "_compute_total_uplift_single() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift._compute_total_uplift_single", false]], "_compute_ws_counts() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput._compute_ws_counts", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput._compute_ws_counts", false]], "_create_evals_dataframe() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._create_evals_dataframe", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._create_evals_dataframe", false]], "_fi_set_ws_wd_ti() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools._fi_set_ws_wd_ti", false]], "_find_sensor_stuck_single_timearray() (in module flasc.data_processing.find_sensor_faults)": [[49, "flasc.data_processing.find_sensor_faults._find_sensor_stuck_single_timearray", false]], "_get_all_unique_flags() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter._get_all_unique_flags", false], [45, "flasc.data_processing.filtering.FlascFilter._get_all_unique_flags", false]], "_get_energy_ratio() (in module flasc.analysis.energy_ratio_heterogeneity_mapper)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper._get_energy_ratio", false]], "_get_energy_ratios_allbins() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._get_energy_ratios_allbins", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._get_energy_ratios_allbins", false]], "_get_mean_power_curves() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter._get_mean_power_curves", false], [45, "flasc.data_processing.filtering.FlascFilter._get_mean_power_curves", false]], "_get_model_params_dict() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._get_model_params_dict", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis._get_model_params_dict", false]], "_interpolate_with_max_gap() (in module flasc.utilities.utilities)": [[112, "flasc.utilities.utilities._interpolate_with_max_gap", false]], "_load_er_input_for_wd_bias() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._load_er_input_for_wd_bias", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._load_er_input_for_wd_bias", false]], "_plot_top_sensor_faults() (in module flasc.data_processing.find_sensor_faults)": [[49, "flasc.data_processing.find_sensor_faults._plot_top_sensor_faults", false]], "_process_single_wd() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper._process_single_wd", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper._process_single_wd", false]], "_reset_mean_power_curves() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter._reset_mean_power_curves", false], [45, "flasc.data_processing.filtering.FlascFilter._reset_mean_power_curves", false]], "_reset_outputs() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator._reset_outputs", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator._reset_outputs", false]], "_set_col_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_n_closest_upstream_turbines", false]], "_set_col_by_radius_from_turbine() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_radius_from_turbine", false]], "_set_col_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_turbines", false]], "_set_col_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_upstream_turbines", false]], "_set_col_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations._set_col_by_upstream_turbines_in_radius", false]], "_setup_logger() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation._setup_logger", false]], "add_bin_weights() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_bin_weights", false], [77, "flasc.utilities.energy_ratio_utilities.add_bin_weights", false]], "add_gaussian_blending_to_floris_approx_table() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", false], [92, "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", false]], "add_power_ref() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_power_ref", false], [78, "flasc.utilities.energy_ratio_utilities.add_power_ref", false]], "add_power_test() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_power_test", false], [79, "flasc.utilities.energy_ratio_utilities.add_power_test", false]], "add_reflected_rows() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_reflected_rows", false], [80, "flasc.utilities.energy_ratio_utilities.add_reflected_rows", false]], "add_wd() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_wd", false], [81, "flasc.utilities.energy_ratio_utilities.add_wd", false]], "add_wd_bin() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_wd_bin", false], [82, "flasc.utilities.energy_ratio_utilities.add_wd_bin", false]], "add_ws() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_ws", false], [83, "flasc.utilities.energy_ratio_utilities.add_ws", false]], "add_ws_bin() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.add_ws_bin", false], [84, "flasc.utilities.energy_ratio_utilities.add_ws_bin", false]], "bias_estimation (class in flasc.data_processing.energy_ratio_wd_bias_estimation)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", false]], "bin_and_group_dataframe() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", false], [85, "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", false]], "bin_column() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.bin_column", false], [86, "flasc.utilities.energy_ratio_utilities.bin_column", false]], "calc_floris_approx_table() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.calc_floris_approx_table", false], [93, "flasc.utilities.floris_tools.calc_floris_approx_table", false]], "calc_wd_mean_radial() (in module flasc.utilities.circular_statistics)": [[73, "flasc.utilities.circular_statistics.calc_wd_mean_radial", false], [74, "flasc.utilities.circular_statistics.calc_wd_mean_radial", false]], "calculate_baseline() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.calculate_baseline", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.calculate_baseline", false]], "calculate_curves() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[70, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.calculate_curves", false], [71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.calculate_curves", false]], "calculate_wd_statistics() (in module flasc.utilities.circular_statistics)": [[73, "flasc.utilities.circular_statistics.calculate_wd_statistics", false], [75, "flasc.utilities.circular_statistics.calculate_wd_statistics", false]], "calculate_wfpower_for_samples() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.calculate_wfpower_for_samples", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.calculate_wfpower_for_samples", false]], "check_compute_energy_ratio_inputs() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", false], [87, "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", false]], "compute_energy_ratio() (in module flasc.analysis.energy_ratio)": [[1, "flasc.analysis.energy_ratio.compute_energy_ratio", false], [2, "flasc.analysis.energy_ratio.compute_energy_ratio", false]], "compute_total_uplift() (in module flasc.analysis.total_uplift)": [[10, "flasc.analysis.total_uplift.compute_total_uplift", false], [11, "flasc.analysis.total_uplift.compute_total_uplift", false]], "crosscheck_northing_offset_consistency() (in module flasc.data_processing.northing_offset)": [[51, "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", false], [52, "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", false]], "cut() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.cut", false], [88, "flasc.utilities.energy_ratio_utilities.cut", false]], "df_downsample() (in module flasc.data_processing.time_operations)": [[53, "flasc.data_processing.time_operations.df_downsample", false], [54, "flasc.data_processing.time_operations.df_downsample", false]], "df_drop_nan_rows() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", false], [14, "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", false]], "df_find_and_fill_data_gaps_with_missing() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", false], [15, "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", false]], "df_get_no_faulty_measurements() (in module flasc.data_processing.filtering)": [[44, "flasc.data_processing.filtering.df_get_no_faulty_measurements", false], [46, "flasc.data_processing.filtering.df_get_no_faulty_measurements", false]], "df_mark_turbdata_as_faulty() (in module flasc.data_processing.filtering)": [[44, "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", false], [47, "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", false]], "df_movingaverage() (in module flasc.data_processing.time_operations)": [[53, "flasc.data_processing.time_operations.df_movingaverage", false], [55, "flasc.data_processing.time_operations.df_movingaverage", false]], "df_reduce_precision() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_reduce_precision", false], [16, "flasc.data_processing.dataframe_manipulations.df_reduce_precision", false]], "df_resample_by_interpolation() (in module flasc.data_processing.time_operations)": [[53, "flasc.data_processing.time_operations.df_resample_by_interpolation", false], [56, "flasc.data_processing.time_operations.df_resample_by_interpolation", false]], "df_sort_and_find_duplicates() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", false], [17, "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", false]], "df_sort_and_fix_duplicates() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", false], [18, "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", false]], "energyratioinput (class in flasc.analysis.energy_ratio_input)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput", false]], "energyratiooutput (class in flasc.analysis.energy_ratio_output)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput", false]], "estimate_cos_pp_fit() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[70, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.estimate_cos_pp_fit", false], [71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.estimate_cos_pp_fit", false]], "estimate_dt() (in module flasc.utilities.utilities)": [[112, "flasc.utilities.utilities.estimate_dt", false], [113, "flasc.utilities.utilities.estimate_dt", false]], "estimate_farmaveraged_ti() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_farmaveraged_ti", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_farmaveraged_ti", false]], "estimate_heterogeneity() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.estimate_heterogeneity", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.estimate_heterogeneity", false]], "estimate_local_tis() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_local_tis", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.estimate_local_tis", false]], "estimate_ti() (in module flasc.utilities.optimization)": [[103, "flasc.utilities.optimization.estimate_ti", false], [104, "flasc.utilities.optimization.estimate_ti", false]], "estimate_wd_bias() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.estimate_wd_bias", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.estimate_wd_bias", false]], "evaluate_overall_wake_loss() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", false], [62, "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", false]], "filter_all_nulls() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.filter_all_nulls", false], [89, "flasc.utilities.energy_ratio_utilities.filter_all_nulls", false]], "filter_any_nulls() (in module flasc.utilities.energy_ratio_utilities)": [[76, "flasc.utilities.energy_ratio_utilities.filter_any_nulls", false], [90, "flasc.utilities.energy_ratio_utilities.filter_any_nulls", false]], "filter_by_condition() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.filter_by_condition", false], [45, "flasc.data_processing.filtering.FlascFilter.filter_by_condition", false]], "filter_by_floris_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.filter_by_floris_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.filter_by_floris_power_curve", false]], "filter_by_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.filter_by_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.filter_by_power_curve", false]], "filter_by_sensor_stuck_faults() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.filter_by_sensor_stuck_faults", false], [45, "flasc.data_processing.filtering.FlascFilter.filter_by_sensor_stuck_faults", false]], "filter_df_by_faulty_impacting_turbines() (in module flasc.data_processing.filtering)": [[44, "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", false], [48, "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", false]], "filter_df_by_ti() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", false], [19, "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", false]], "filter_df_by_wd() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", false], [20, "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", false]], "filter_df_by_ws() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", false], [21, "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", false]], "find_sensor_stuck_faults() (in module flasc.data_processing.find_sensor_faults)": [[49, "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", false], [50, "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", false]], "find_timeshift_between_dfs() (in module flasc.utilities.optimization)": [[103, "flasc.utilities.optimization.find_timeshift_between_dfs", false], [105, "flasc.utilities.optimization.find_timeshift_between_dfs", false]], "flasc.analysis": [[0, "module-flasc.analysis", false]], "flasc.analysis.energy_ratio": [[1, "module-flasc.analysis.energy_ratio", false]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, "module-flasc.analysis.energy_ratio_heterogeneity_mapper", false]], "flasc.analysis.energy_ratio_input": [[5, "module-flasc.analysis.energy_ratio_input", false]], "flasc.analysis.energy_ratio_output": [[8, "module-flasc.analysis.energy_ratio_output", false]], "flasc.analysis.total_uplift": [[10, "module-flasc.analysis.total_uplift", false]], "flasc.data_processing": [[12, "module-flasc.data_processing", false]], "flasc.data_processing.dataframe_manipulations": [[13, "module-flasc.data_processing.dataframe_manipulations", false]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[42, "module-flasc.data_processing.energy_ratio_wd_bias_estimation", false]], "flasc.data_processing.filtering": [[44, "module-flasc.data_processing.filtering", false]], "flasc.data_processing.find_sensor_faults": [[49, "module-flasc.data_processing.find_sensor_faults", false]], "flasc.data_processing.northing_offset": [[51, "module-flasc.data_processing.northing_offset", false]], "flasc.data_processing.time_operations": [[53, "module-flasc.data_processing.time_operations", false]], "flasc.model_fitting": [[58, "module-flasc.model_fitting", false]], "flasc.model_fitting.floris_sensitivity_analysis": [[59, "module-flasc.model_fitting.floris_sensitivity_analysis", false]], "flasc.model_fitting.floris_tuning": [[61, "module-flasc.model_fitting.floris_tuning", false]], "flasc.model_fitting.turbulence_estimator": [[68, "module-flasc.model_fitting.turbulence_estimator", false]], "flasc.model_fitting.yaw_pow_fitting": [[70, "module-flasc.model_fitting.yaw_pow_fitting", false]], "flasc.utilities": [[72, "module-flasc.utilities", false]], "flasc.utilities.circular_statistics": [[73, "module-flasc.utilities.circular_statistics", false]], "flasc.utilities.energy_ratio_utilities": [[76, "module-flasc.utilities.energy_ratio_utilities", false]], "flasc.utilities.floris_tools": [[91, "module-flasc.utilities.floris_tools", false]], "flasc.utilities.lookup_table_tools": [[101, "module-flasc.utilities.lookup_table_tools", false]], "flasc.utilities.optimization": [[103, "module-flasc.utilities.optimization", false]], "flasc.utilities.tuner_utilities": [[107, "module-flasc.utilities.tuner_utilities", false]], "flasc.utilities.utilities": [[112, "module-flasc.utilities.utilities", false]], "flasc.utilities.utilities_examples": [[116, "module-flasc.utilities.utilities_examples", false]], "flascfilter (class in flasc.data_processing.filtering)": [[44, "flasc.data_processing.filtering.FlascFilter", false], [45, "flasc.data_processing.filtering.FlascFilter", false]], "flatten_cols() (in module flasc.data_processing.time_operations)": [[53, "flasc.data_processing.time_operations.flatten_cols", false], [57, "flasc.data_processing.time_operations.flatten_cols", false]], "floris_set_ws_wd_ti() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.floris_set_ws_wd_ti", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.floris_set_ws_wd_ti", false]], "floris_sobol_analysis (class in flasc.model_fitting.floris_sensitivity_analysis)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", false]], "generate_block_list() (in module flasc.analysis.energy_ratio_input)": [[5, "flasc.analysis.energy_ratio_input.generate_block_list", false], [7, "flasc.analysis.energy_ratio_input.generate_block_list", false]], "generate_floris_hetmap() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.generate_floris_hetmap", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.generate_floris_hetmap", false]], "generate_samples() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.generate_samples", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.generate_samples", false]], "get_all_dependent_turbines() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_all_dependent_turbines", false], [94, "flasc.utilities.floris_tools.get_all_dependent_turbines", false]], "get_all_impacting_turbines() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_all_impacting_turbines", false], [95, "flasc.utilities.floris_tools.get_all_impacting_turbines", false]], "get_all_impacting_turbines_geometrical() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", false], [96, "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", false]], "get_column_mean() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.get_column_mean", false], [22, "flasc.data_processing.dataframe_manipulations.get_column_mean", false]], "get_dependent_turbines_by_wd() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", false], [97, "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", false]], "get_df() (flasc.analysis.energy_ratio_input.energyratioinput method)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput.get_df", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput.get_df", false]], "get_df() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.get_df", false], [45, "flasc.data_processing.filtering.FlascFilter.get_df", false]], "get_num_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.get_num_turbines", false], [23, "flasc.data_processing.dataframe_manipulations.get_num_turbines", false]], "get_num_turbines() (in module flasc.utilities.utilities)": [[112, "flasc.utilities.utilities.get_num_turbines", false], [114, "flasc.utilities.utilities.get_num_turbines", false]], "get_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.get_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.get_power_curve", false]], "get_sobol_sensitivity_indices() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.get_sobol_sensitivity_indices", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.get_sobol_sensitivity_indices", false]], "get_turbine_order() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_order", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_order", false]], "get_turbine_pairs() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_pairs", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.get_turbine_pairs", false]], "get_turbs_in_radius() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_turbs_in_radius", false], [98, "flasc.utilities.floris_tools.get_turbs_in_radius", false]], "get_upstream_turbs_floris() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.get_upstream_turbs_floris", false], [99, "flasc.utilities.floris_tools.get_upstream_turbs_floris", false]], "get_yaw_angles_interpolant() (in module flasc.utilities.lookup_table_tools)": [[101, "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", false], [102, "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", false]], "heterogeneity_mapper (class in flasc.analysis.energy_ratio_heterogeneity_mapper)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", false]], "interp_with_max_gap() (in module flasc.utilities.utilities)": [[112, "flasc.utilities.utilities.interp_with_max_gap", false], [115, "flasc.utilities.utilities.interp_with_max_gap", false]], "interpolate_floris_from_df_approx() (in module flasc.utilities.floris_tools)": [[91, "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", false], [100, "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", false]], "is_day_or_night() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.is_day_or_night", false], [24, "flasc.data_processing.dataframe_manipulations.is_day_or_night", false]], "load_floris_artificial() (in module flasc.utilities.utilities_examples)": [[116, "flasc.utilities.utilities_examples.load_floris_artificial", false], [117, "flasc.utilities.utilities_examples.load_floris_artificial", false]], "load_floris_smarteole() (in module flasc.utilities.utilities_examples)": [[116, "flasc.utilities.utilities_examples.load_floris_smarteole", false], [118, "flasc.utilities.utilities_examples.load_floris_smarteole", false]], "logger (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation property)": [[43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.logger", false]], "match_y_curves_by_offset() (in module flasc.utilities.optimization)": [[103, "flasc.utilities.optimization.match_y_curves_by_offset", false], [106, "flasc.utilities.optimization.match_y_curves_by_offset", false]], "module": [[0, "module-flasc.analysis", false], [1, "module-flasc.analysis.energy_ratio", false], [3, "module-flasc.analysis.energy_ratio_heterogeneity_mapper", false], [5, "module-flasc.analysis.energy_ratio_input", false], [8, "module-flasc.analysis.energy_ratio_output", false], [10, "module-flasc.analysis.total_uplift", false], [12, "module-flasc.data_processing", false], [13, "module-flasc.data_processing.dataframe_manipulations", false], [42, "module-flasc.data_processing.energy_ratio_wd_bias_estimation", false], [44, "module-flasc.data_processing.filtering", false], [49, "module-flasc.data_processing.find_sensor_faults", false], [51, "module-flasc.data_processing.northing_offset", false], [53, "module-flasc.data_processing.time_operations", false], [58, "module-flasc.model_fitting", false], [59, "module-flasc.model_fitting.floris_sensitivity_analysis", false], [61, "module-flasc.model_fitting.floris_tuning", false], [68, "module-flasc.model_fitting.turbulence_estimator", false], [70, "module-flasc.model_fitting.yaw_pow_fitting", false], [72, "module-flasc.utilities", false], [73, "module-flasc.utilities.circular_statistics", false], [76, "module-flasc.utilities.energy_ratio_utilities", false], [91, "module-flasc.utilities.floris_tools", false], [101, "module-flasc.utilities.lookup_table_tools", false], [103, "module-flasc.utilities.optimization", false], [107, "module-flasc.utilities.tuner_utilities", false], [112, "module-flasc.utilities.utilities", false], [116, "module-flasc.utilities.utilities_examples", false]], "nested_get() (in module flasc.utilities.tuner_utilities)": [[107, "flasc.utilities.tuner_utilities.nested_get", false], [108, "flasc.utilities.tuner_utilities.nested_get", false]], "nested_set() (in module flasc.utilities.tuner_utilities)": [[107, "flasc.utilities.tuner_utilities.nested_set", false], [109, "flasc.utilities.tuner_utilities.nested_set", false]], "plot() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[70, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.plot", false], [71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.plot", false]], "plot_convergence() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_convergence", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_convergence", false]], "plot_cost_function_farm() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_function_farm", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_function_farm", false]], "plot_cost_functions_turbines() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_functions_turbines", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_cost_functions_turbines", false]], "plot_energy_ratios() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_energy_ratios", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_energy_ratios", false]], "plot_energy_ratios() (flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation method)": [[42, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.plot_energy_ratios", false], [43, "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation.plot_energy_ratios", false]], "plot_farm_mean_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_farm_mean_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_farm_mean_power_curve", false]], "plot_filters_custom_scatter() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter", false]], "plot_filters_custom_scatter_bokeh() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter_bokeh", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_filters_custom_scatter_bokeh", false]], "plot_filters_in_time() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time", false]], "plot_filters_in_time_bokeh() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time_bokeh", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_time_bokeh", false]], "plot_filters_in_ws_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_ws_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_filters_in_ws_power_curve", false]], "plot_flowfield() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_flowfield", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_flowfield", false]], "plot_graphs() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_graphs", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_graphs", false]], "plot_layout() (flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper method)": [[3, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_layout", false], [4, "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper.plot_layout", false]], "plot_postprocessed_in_ws_power_curve() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.plot_postprocessed_in_ws_power_curve", false], [45, "flasc.data_processing.filtering.FlascFilter.plot_postprocessed_in_ws_power_curve", false]], "plot_power_bars() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_power_bars", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.plot_power_bars", false]], "plot_sobol_results() (flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis method)": [[59, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_sobol_results", false], [60, "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis.plot_sobol_results", false]], "plot_sun_altitude_with_day_night_color() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", false], [25, "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", false]], "plot_uplift() (flasc.analysis.energy_ratio_output.energyratiooutput method)": [[8, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_uplift", false], [9, "flasc.analysis.energy_ratio_output.EnergyRatioOutput.plot_uplift", false]], "replicate_nan_values() (in module flasc.utilities.tuner_utilities)": [[107, "flasc.utilities.tuner_utilities.replicate_nan_values", false], [110, "flasc.utilities.tuner_utilities.replicate_nan_values", false]], "resample_energy_table() (flasc.analysis.energy_ratio_input.energyratioinput method)": [[5, "flasc.analysis.energy_ratio_input.EnergyRatioInput.resample_energy_table", false], [6, "flasc.analysis.energy_ratio_input.EnergyRatioInput.resample_energy_table", false]], "reset_filters() (flasc.data_processing.filtering.flascfilter method)": [[44, "flasc.data_processing.filtering.FlascFilter.reset_filters", false], [45, "flasc.data_processing.filtering.FlascFilter.reset_filters", false]], "resim_floris() (in module flasc.utilities.tuner_utilities)": [[107, "flasc.utilities.tuner_utilities.resim_floris", false], [111, "flasc.utilities.tuner_utilities.resim_floris", false]], "select_best_wake_model_parameter() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", false], [63, "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", false]], "select_best_wd_std() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.select_best_wd_std", false], [64, "flasc.model_fitting.floris_tuning.select_best_wd_std", false]], "set_df() (flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting method)": [[70, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.set_df", false], [71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting.set_df", false]], "set_measurements() (flasc.model_fitting.turbulence_estimator.ti_estimator method)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator.set_measurements", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator.set_measurements", false]], "set_pow_ref_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", false], [26, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", false]], "set_pow_ref_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", false], [27, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", false]], "set_pow_ref_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", false], [28, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", false]], "set_pow_ref_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", false], [29, "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", false]], "set_ti_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", false], [30, "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", false]], "set_ti_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", false], [31, "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", false]], "set_ti_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", false], [32, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", false]], "set_ti_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", false], [33, "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", false]], "set_wd_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", false], [34, "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", false]], "set_wd_by_radius_from_turbine() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", false], [35, "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", false]], "set_wd_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", false], [36, "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", false]], "set_ws_by_all_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", false], [37, "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", false]], "set_ws_by_n_closest_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", false], [38, "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", false]], "set_ws_by_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", false], [39, "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", false]], "set_ws_by_upstream_turbines() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", false], [40, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", false]], "set_ws_by_upstream_turbines_in_radius() (in module flasc.data_processing.dataframe_manipulations)": [[13, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", false], [41, "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", false]], "sweep_deflection_parameter_for_total_uplift() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", false], [65, "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", false]], "sweep_velocity_model_parameter_for_overall_wake_losses() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", false], [66, "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", false]], "sweep_wd_std_for_er() (in module flasc.model_fitting.floris_tuning)": [[61, "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", false], [67, "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", false]], "ti_estimator (class in flasc.model_fitting.turbulence_estimator)": [[68, "flasc.model_fitting.turbulence_estimator.ti_estimator", false], [69, "flasc.model_fitting.turbulence_estimator.ti_estimator", false]], "yaw_pow_fitting (class in flasc.model_fitting.yaw_pow_fitting)": [[70, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", false], [71, "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", false]]}, "objects": {"flasc": [[0, 0, 0, "-", "analysis"], [12, 0, 0, "-", "data_processing"], [58, 0, 0, "-", "model_fitting"], [72, 0, 0, "-", "utilities"]], "flasc.analysis": [[1, 0, 0, "-", "energy_ratio"], [3, 0, 0, "-", "energy_ratio_heterogeneity_mapper"], [5, 0, 0, "-", "energy_ratio_input"], [8, 0, 0, "-", "energy_ratio_output"], [10, 0, 0, "-", "total_uplift"]], "flasc.analysis.energy_ratio": [[1, 1, 1, "", "_compute_energy_ratio_bootstrap"], [1, 1, 1, "", "_compute_energy_ratio_single"], [2, 1, 1, "", "compute_energy_ratio"]], "flasc.analysis.energy_ratio_heterogeneity_mapper": [[3, 1, 1, "", "_get_energy_ratio"], [4, 2, 1, "", "heterogeneity_mapper"]], "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper": [[4, 3, 1, "", "_process_single_wd"], [4, 3, 1, "", "estimate_heterogeneity"], [4, 3, 1, "", "generate_floris_hetmap"], [4, 3, 1, "", "plot_graphs"], [4, 3, 1, "", "plot_layout"]], "flasc.analysis.energy_ratio_input": [[6, 2, 1, "", "EnergyRatioInput"], [7, 1, 1, "", "generate_block_list"]], "flasc.analysis.energy_ratio_input.EnergyRatioInput": [[6, 3, 1, "", "get_df"], [6, 3, 1, "", "resample_energy_table"]], "flasc.analysis.energy_ratio_output": [[9, 2, 1, "", "EnergyRatioOutput"]], "flasc.analysis.energy_ratio_output.EnergyRatioOutput": [[9, 3, 1, "", "_compute_ws_counts"], [9, 3, 1, "", "plot_energy_ratios"], [9, 3, 1, "", "plot_uplift"]], "flasc.analysis.total_uplift": [[10, 1, 1, "", "_compute_total_uplift_bootstrap"], [10, 1, 1, "", "_compute_total_uplift_single"], [11, 1, 1, "", "compute_total_uplift"]], "flasc.data_processing": [[13, 0, 0, "-", "dataframe_manipulations"], [42, 0, 0, "-", "energy_ratio_wd_bias_estimation"], [44, 0, 0, "-", "filtering"], [49, 0, 0, "-", "find_sensor_faults"], [51, 0, 0, "-", "northing_offset"], [53, 0, 0, "-", "time_operations"]], "flasc.data_processing.dataframe_manipulations": [[13, 1, 1, "", "_set_col_by_n_closest_upstream_turbines"], [13, 1, 1, "", "_set_col_by_radius_from_turbine"], [13, 1, 1, "", "_set_col_by_turbines"], [13, 1, 1, "", "_set_col_by_upstream_turbines"], [13, 1, 1, "", "_set_col_by_upstream_turbines_in_radius"], [14, 1, 1, "", "df_drop_nan_rows"], [15, 1, 1, "", "df_find_and_fill_data_gaps_with_missing"], [16, 1, 1, "", "df_reduce_precision"], [17, 1, 1, "", "df_sort_and_find_duplicates"], [18, 1, 1, "", "df_sort_and_fix_duplicates"], [19, 1, 1, "", "filter_df_by_ti"], [20, 1, 1, "", "filter_df_by_wd"], [21, 1, 1, "", "filter_df_by_ws"], [22, 1, 1, "", "get_column_mean"], [23, 1, 1, "", "get_num_turbines"], [24, 1, 1, "", "is_day_or_night"], [25, 1, 1, "", "plot_sun_altitude_with_day_night_color"], [26, 1, 1, "", "set_pow_ref_by_n_closest_upstream_turbines"], [27, 1, 1, "", "set_pow_ref_by_turbines"], [28, 1, 1, "", "set_pow_ref_by_upstream_turbines"], [29, 1, 1, "", "set_pow_ref_by_upstream_turbines_in_radius"], [30, 1, 1, "", "set_ti_by_all_turbines"], [31, 1, 1, "", "set_ti_by_turbines"], [32, 1, 1, "", "set_ti_by_upstream_turbines"], [33, 1, 1, "", "set_ti_by_upstream_turbines_in_radius"], [34, 1, 1, "", "set_wd_by_all_turbines"], [35, 1, 1, "", "set_wd_by_radius_from_turbine"], [36, 1, 1, "", "set_wd_by_turbines"], [37, 1, 1, "", "set_ws_by_all_turbines"], [38, 1, 1, "", "set_ws_by_n_closest_upstream_turbines"], [39, 1, 1, "", "set_ws_by_turbines"], [40, 1, 1, "", "set_ws_by_upstream_turbines"], [41, 1, 1, "", "set_ws_by_upstream_turbines_in_radius"]], "flasc.data_processing.energy_ratio_wd_bias_estimation": [[43, 2, 1, "", "bias_estimation"]], "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation": [[43, 3, 1, "", "_get_energy_ratios_allbins"], [43, 3, 1, "", "_load_er_input_for_wd_bias"], [43, 3, 1, "", "_setup_logger"], [43, 3, 1, "", "calculate_baseline"], [43, 3, 1, "", "estimate_wd_bias"], [43, 4, 1, "", "logger"], [43, 3, 1, "", "plot_energy_ratios"]], "flasc.data_processing.filtering": [[45, 2, 1, "", "FlascFilter"], [46, 1, 1, "", "df_get_no_faulty_measurements"], [47, 1, 1, "", "df_mark_turbdata_as_faulty"], [48, 1, 1, "", "filter_df_by_faulty_impacting_turbines"]], "flasc.data_processing.filtering.FlascFilter": [[45, 3, 1, "", "_get_all_unique_flags"], [45, 3, 1, "", "_get_mean_power_curves"], [45, 3, 1, "", "_reset_mean_power_curves"], [45, 3, 1, "", "filter_by_condition"], [45, 3, 1, "", "filter_by_floris_power_curve"], [45, 3, 1, "", "filter_by_power_curve"], [45, 3, 1, "", "filter_by_sensor_stuck_faults"], [45, 3, 1, "", "get_df"], [45, 3, 1, "", "get_power_curve"], [45, 3, 1, "", "plot_farm_mean_power_curve"], [45, 3, 1, "", "plot_filters_custom_scatter"], [45, 3, 1, "", "plot_filters_custom_scatter_bokeh"], [45, 3, 1, "", "plot_filters_in_time"], [45, 3, 1, "", "plot_filters_in_time_bokeh"], [45, 3, 1, "", "plot_filters_in_ws_power_curve"], [45, 3, 1, "", "plot_postprocessed_in_ws_power_curve"], [45, 3, 1, "", "reset_filters"]], "flasc.data_processing.find_sensor_faults": [[49, 1, 1, "", "_find_sensor_stuck_single_timearray"], [49, 1, 1, "", "_plot_top_sensor_faults"], [50, 1, 1, "", "find_sensor_stuck_faults"]], "flasc.data_processing.northing_offset": [[52, 1, 1, "", "crosscheck_northing_offset_consistency"]], "flasc.data_processing.time_operations": [[54, 1, 1, "", "df_downsample"], [55, 1, 1, "", "df_movingaverage"], [56, 1, 1, "", "df_resample_by_interpolation"], [57, 1, 1, "", "flatten_cols"]], "flasc.model_fitting": [[59, 0, 0, "-", "floris_sensitivity_analysis"], [61, 0, 0, "-", "floris_tuning"], [68, 0, 0, "-", "turbulence_estimator"], [70, 0, 0, "-", "yaw_pow_fitting"]], "flasc.model_fitting.floris_sensitivity_analysis": [[60, 2, 1, "", "floris_sobol_analysis"]], "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis": [[60, 3, 1, "", "_create_evals_dataframe"], [60, 3, 1, "", "_get_model_params_dict"], [60, 3, 1, "", "calculate_wfpower_for_samples"], [60, 3, 1, "", "generate_samples"], [60, 3, 1, "", "get_sobol_sensitivity_indices"], [60, 3, 1, "", "plot_convergence"], [60, 3, 1, "", "plot_sobol_results"]], "flasc.model_fitting.floris_tuning": [[62, 1, 1, "", "evaluate_overall_wake_loss"], [63, 1, 1, "", "select_best_wake_model_parameter"], [64, 1, 1, "", "select_best_wd_std"], [65, 1, 1, "", "sweep_deflection_parameter_for_total_uplift"], [66, 1, 1, "", "sweep_velocity_model_parameter_for_overall_wake_losses"], [67, 1, 1, "", "sweep_wd_std_for_er"]], "flasc.model_fitting.turbulence_estimator": [[69, 2, 1, "", "ti_estimator"]], "flasc.model_fitting.turbulence_estimator.ti_estimator": [[69, 3, 1, "", "_check_measurements"], [69, 3, 1, "", "_reset_outputs"], [69, 3, 1, "", "estimate_farmaveraged_ti"], [69, 3, 1, "", "estimate_local_tis"], [69, 3, 1, "", "floris_set_ws_wd_ti"], [69, 3, 1, "", "get_turbine_order"], [69, 3, 1, "", "get_turbine_pairs"], [69, 3, 1, "", "plot_cost_function_farm"], [69, 3, 1, "", "plot_cost_functions_turbines"], [69, 3, 1, "", "plot_flowfield"], [69, 3, 1, "", "plot_power_bars"], [69, 3, 1, "", "set_measurements"]], "flasc.model_fitting.yaw_pow_fitting": [[71, 2, 1, "", "yaw_pow_fitting"]], "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting": [[71, 3, 1, "", "calculate_curves"], [71, 3, 1, "", "estimate_cos_pp_fit"], [71, 3, 1, "", "plot"], [71, 3, 1, "", "set_df"]], "flasc.utilities": [[73, 0, 0, "-", "circular_statistics"], [76, 0, 0, "-", "energy_ratio_utilities"], [91, 0, 0, "-", "floris_tools"], [101, 0, 0, "-", "lookup_table_tools"], [103, 0, 0, "-", "optimization"], [107, 0, 0, "-", "tuner_utilities"], [112, 0, 0, "-", "utilities"], [116, 0, 0, "-", "utilities_examples"]], "flasc.utilities.circular_statistics": [[74, 1, 1, "", "calc_wd_mean_radial"], [75, 1, 1, "", "calculate_wd_statistics"]], "flasc.utilities.energy_ratio_utilities": [[77, 1, 1, "", "add_bin_weights"], [78, 1, 1, "", "add_power_ref"], [79, 1, 1, "", "add_power_test"], [80, 1, 1, "", "add_reflected_rows"], [81, 1, 1, "", "add_wd"], [82, 1, 1, "", "add_wd_bin"], [83, 1, 1, "", "add_ws"], [84, 1, 1, "", "add_ws_bin"], [85, 1, 1, "", "bin_and_group_dataframe"], [86, 1, 1, "", "bin_column"], [87, 1, 1, "", "check_compute_energy_ratio_inputs"], [88, 1, 1, "", "cut"], [89, 1, 1, "", "filter_all_nulls"], [90, 1, 1, "", "filter_any_nulls"]], "flasc.utilities.floris_tools": [[91, 1, 1, "", "_fi_set_ws_wd_ti"], [92, 1, 1, "", "add_gaussian_blending_to_floris_approx_table"], [93, 1, 1, "", "calc_floris_approx_table"], [94, 1, 1, "", "get_all_dependent_turbines"], [95, 1, 1, "", "get_all_impacting_turbines"], [96, 1, 1, "", "get_all_impacting_turbines_geometrical"], [97, 1, 1, "", "get_dependent_turbines_by_wd"], [98, 1, 1, "", "get_turbs_in_radius"], [99, 1, 1, "", "get_upstream_turbs_floris"], [100, 1, 1, "", "interpolate_floris_from_df_approx"]], "flasc.utilities.lookup_table_tools": [[102, 1, 1, "", "get_yaw_angles_interpolant"]], "flasc.utilities.optimization": [[104, 1, 1, "", "estimate_ti"], [105, 1, 1, "", "find_timeshift_between_dfs"], [106, 1, 1, "", "match_y_curves_by_offset"]], "flasc.utilities.tuner_utilities": [[108, 1, 1, "", "nested_get"], [109, 1, 1, "", "nested_set"], [110, 1, 1, "", "replicate_nan_values"], [111, 1, 1, "", "resim_floris"]], "flasc.utilities.utilities": [[112, 1, 1, "", "_interpolate_with_max_gap"], [113, 1, 1, "", "estimate_dt"], [114, 1, 1, "", "get_num_turbines"], [115, 1, 1, "", "interp_with_max_gap"]], "flasc.utilities.utilities_examples": [[117, 1, 1, "", "load_floris_artificial"], [118, 1, 1, "", "load_floris_smarteole"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:method", "4": "py:property"}, "terms": {"": [13, 15, 24, 44, 45, 47, 48, 91, 93, 94, 95, 97, 99, 100, 101, 102, 116, 118, 120, 121, 122, 126], "0": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 24, 42, 43, 44, 45, 48, 49, 50, 51, 52, 61, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 80, 82, 84, 85, 91, 92, 93, 94, 95, 96, 97, 99, 100, 103, 105, 116, 117, 118, 120, 126], "00": [91, 100], "00001": [91, 96], "001": [44, 45, 49, 50, 91, 93, 94, 95, 97], "01": [42, 43, 44, 45, 68, 69, 91, 93, 100, 120], "02": 120, "02_download_and_format_dataset": 122, "03": [91, 93, 100, 120], "03_energy_ratio": 121, "03d": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 120], "04": [42, 43, 120], "05": [44, 45, 49, 120], "06": [91, 93, 127], "07": 120, "08": [42, 43, 91, 100], "09": [91, 93], "0e": [44, 45], "0e6": [91, 100], "1": [1, 2, 3, 4, 5, 7, 10, 11, 13, 15, 42, 43, 44, 45, 48, 53, 54, 55, 56, 59, 60, 61, 65, 67, 70, 71, 76, 84, 85, 91, 92, 93, 96, 99, 100, 103, 105, 120, 126], "10": [5, 6, 7, 13, 15, 42, 43, 44, 45, 70, 71, 91, 93, 94, 95, 97, 100, 101, 102, 103, 105, 120], "100": [91, 93, 94, 95, 97, 100, 103, 105], "101": [91, 93], "102": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "103": [91, 93], "104": [91, 93, 94, 95, 97, 103, 105], "105": [3, 4, 91, 93, 96], "106": [91, 93, 94, 95, 97, 103, 105], "107": [91, 93], "108": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "109": [91, 93], "11": [3, 4, 44, 45, 91, 93, 100, 120], "110": [91, 93, 94, 95, 97, 103, 105], "111": [3, 4, 91, 93, 96], "112": [91, 93, 94, 95, 97, 103, 105], "113": [91, 93], "114": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "115": [91, 93], "116": [91, 93, 94, 95, 97, 103, 105], "117": [3, 4, 91, 93, 96], "118": [91, 93, 94, 95, 97, 103, 105], "119": [91, 93], "12": [3, 4, 44, 45, 91, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 120], "120": [3, 4, 51, 52, 91, 93, 94, 95, 96, 97, 103, 105], "1202808": [91, 100], "121": [91, 93], "122": [91, 93, 94, 95, 97, 103, 105], "123": [3, 4, 91, 93, 96], "124": [91, 93, 94, 95, 97, 103, 105], "125": [91, 93], "1251108": [91, 100], "126": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "127": [91, 93], "128": [91, 93, 94, 95, 97, 103, 105], "129": [3, 4, 91, 93, 96], "13": [44, 45, 91, 93], "130": [91, 93, 94, 95, 97, 103, 105], "131": [91, 93], "132": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "133": [91, 93], "134": [91, 93, 94, 95, 97, 103, 105], "135": [3, 4, 91, 93, 96], "136": [91, 93, 94, 95, 97, 103, 105], "137": [91, 93], "138": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "139": [91, 93], "14": [44, 45, 91, 93, 94, 95, 97, 103, 105, 120], "140": [91, 93, 94, 95, 97, 103, 105], "141": [3, 4, 91, 93, 96], "142": [91, 93, 94, 95, 97, 103, 105], "143": [91, 93], "144": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "145": [91, 93], "146": [91, 93, 94, 95, 97, 103, 105], "14692690": [107, 108, 109], "147": [3, 4, 91, 93, 96], "148": [91, 93, 94, 95, 97, 103, 105], "149": [91, 93], "15": [3, 4, 44, 45, 70, 71, 91, 93, 96, 100, 120], "150": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "151": [91, 93], "152": [91, 93, 94, 95, 97, 103, 105], "153": [3, 4, 91, 93, 96], "154": [91, 93, 94, 95, 97, 103, 105], "155": [91, 93], "156": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "157": [91, 93], "158": [91, 93, 94, 95, 97, 103, 105], "159": [3, 4, 91, 93, 96], "16": [44, 45, 91, 93, 94, 95, 97, 103, 105], "160": [91, 93, 94, 95, 97, 103, 105], "161": [91, 93], "162": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "163": [91, 93], "164": [91, 93, 94, 95, 97, 103, 105], "165": [3, 4, 91, 93, 96], "166": [91, 93, 94, 95, 97, 103, 105], "167": [91, 93], "168": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "169": [91, 93], "17": [44, 45, 91, 93], "170": [91, 93, 94, 95, 97, 103, 105], "171": [3, 4, 91, 93, 96], "172": [91, 93, 94, 95, 97, 103, 105], "173": [91, 93], "174": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "175": [91, 93], "176": [91, 93, 94, 95, 97, 103, 105], "177": [3, 4, 91, 93, 96], "178": [91, 93, 94, 95, 97, 103, 105], "179": [91, 93], "18": [3, 4, 44, 45, 91, 93, 94, 95, 96, 97, 100, 103, 105], "180": [3, 4, 42, 43, 91, 93, 94, 95, 96, 97, 103, 105, 120], "1801": [91, 93], "181": [91, 93], "182": [91, 93, 94, 95, 97], "183": [3, 4, 91, 93, 96], "184": [91, 93, 94, 95, 97], "185": [91, 93], "186": [3, 4, 91, 93, 94, 95, 96, 97], "187": [91, 93], "188": [91, 93, 94, 95, 97], "189": [3, 4, 91, 93, 96], "19": [44, 45, 91, 93], "190": [91, 93, 94, 95, 97], "191": [91, 93], "192": [3, 4, 91, 93, 94, 95, 96, 97], "193": [91, 93], "194": [91, 93, 94, 95, 97], "195": [3, 4, 91, 93, 96], "196": [91, 93, 94, 95, 97], "197": [91, 93], "198": [3, 4, 91, 93, 94, 95, 96, 97], "199": [91, 93], "1hz": 120, "2": [1, 2, 3, 4, 10, 11, 13, 16, 42, 43, 44, 45, 48, 61, 65, 67, 68, 69, 70, 71, 76, 82, 85, 91, 93, 94, 95, 97, 99, 100, 101, 102, 103, 105, 120, 126], "20": [44, 45, 68, 69, 91, 93, 94, 95, 97, 100, 103, 105], "200": [42, 43, 59, 60, 91, 93, 94, 95, 97], "201": [3, 4, 91, 93, 96], "2018": [91, 100], "2019": [42, 43, 120, 122, 126], "202": [91, 93, 94, 95, 97], "2020": 120, "2022": [121, 126], "2024": 126, "203": [91, 93], "204": [3, 4, 91, 93, 94, 95, 96, 97], "205": [91, 93], "206": [91, 93, 94, 95, 97], "207": [3, 4, 91, 93, 96], "208": [91, 93, 94, 95, 97], "209": [91, 93], "21": [3, 4, 44, 45, 91, 93, 96], "210": [3, 4, 91, 93, 94, 95, 96, 97], "211": [91, 93], "212": [91, 93, 94, 95, 97], "213": [3, 4, 91, 93, 96, 100], "214": [91, 93, 94, 95, 97], "215": [91, 93, 100], "216": [3, 4, 91, 93, 94, 95, 96, 97], "217": [91, 93], "218": [91, 93, 94, 95, 97], "219": [3, 4, 91, 93, 96], "22": [44, 45, 91, 93, 94, 95, 97, 103, 105, 126], "220": [91, 93, 94, 95, 97], "221": [91, 93], "222": [3, 4, 91, 93, 94, 95, 96, 97], "223": [91, 93], "224": [91, 93, 94, 95, 97], "225": [3, 4, 91, 93, 96], "226": [91, 93, 94, 95, 97], "227": [91, 93], "228": [3, 4, 91, 93, 94, 95, 96, 97], "229": [91, 93], "22nd": 120, "23": [44, 45, 91, 93, 100], "230": [91, 93, 94, 95, 97], "231": [3, 4, 91, 93, 96], "232": [91, 93, 94, 95, 97], "233": [91, 93], "234": [3, 4, 91, 93, 94, 95, 96, 97], "235": [91, 93], "236": [91, 93, 94, 95, 97], "237": [3, 4, 91, 93, 96], "238": [91, 93, 94, 95, 97], "239": [91, 93], "23rd": 120, "24": [3, 4, 44, 45, 91, 93, 94, 95, 96, 97, 100, 103, 105], "240": [3, 4, 91, 93, 94, 95, 96, 97], "241": [91, 93], "242": [91, 93, 94, 95, 97], "243": [3, 4, 91, 93, 96], "244": [91, 93, 94, 95, 97], "245": [91, 93], "246": [3, 4, 91, 93, 94, 95, 96, 97], "247": [91, 93], "248": [91, 93, 94, 95, 97], "249": [3, 4, 91, 93, 96], "25": [44, 45, 91, 93, 100], "250": [70, 71, 91, 93, 94, 95, 97], "251": [91, 93], "252": [3, 4, 91, 93, 94, 95, 96, 97], "253": [91, 93], "254": [91, 93, 94, 95, 97], "255": [3, 4, 91, 93, 96], "256": [91, 93, 94, 95, 97], "257": [91, 93], "258": [3, 4, 91, 93, 94, 95, 96, 97], "259": [91, 93], "26": [91, 93, 94, 95, 97, 103, 105], "260": [91, 93, 94, 95, 97], "261": [3, 4, 91, 93, 96], "262": [91, 93, 94, 95, 97], "263": [91, 93], "264": [3, 4, 91, 93, 94, 95, 96, 97], "265": [91, 93], "266": [91, 93, 94, 95, 97], "267": [3, 4, 91, 93, 96], "268": [91, 93, 94, 95, 97], "269": [91, 93], "27": [3, 4, 91, 93, 96], "270": [3, 4, 91, 93, 94, 95, 96, 97], "271": [91, 93], "272": [91, 93, 94, 95, 97], "2725108": [91, 100], "273": [3, 4, 91, 93, 96], "274": [91, 93, 94, 95, 97], "275": [91, 93], "276": [3, 4, 91, 93, 94, 95, 96, 97], "277": [91, 93], "278": [91, 93, 94, 95, 97], "279": [3, 4, 91, 93, 96], "28": [91, 93, 94, 95, 97, 103, 105, 126], "280": [91, 93, 94, 95, 97], "281": [91, 93], "282": [3, 4, 91, 93, 94, 95, 96, 97], "283": [91, 93], "284": [91, 93, 94, 95, 97], "285": [3, 4, 91, 93, 96], "286": [91, 93, 94, 95, 97], "287": [91, 93], "288": [3, 4, 91, 93, 94, 95, 96, 97], "289": [91, 93], "29": [91, 93], "290": [91, 93, 94, 95, 97], "291": [3, 4, 91, 93, 96], "292": [91, 93, 94, 95, 97], "293": [91, 93], "294": [3, 4, 91, 93, 94, 95, 96, 97], "295": [91, 93], "2957021": [91, 100], "296": [91, 93, 94, 95, 97], "297": [3, 4, 91, 93, 96], "298": [91, 93, 94, 95, 97], "299": [91, 93], "3": [3, 4, 42, 43, 44, 45, 48, 49, 50, 91, 92, 93, 96, 100, 120, 125], "30": [3, 4, 91, 93, 94, 95, 96, 97, 100, 103, 105], "300": [3, 4, 49, 91, 93, 94, 95, 96, 97], "301": [91, 93], "302": [91, 93, 94, 95, 97], "303": [3, 4, 91, 93, 96], "304": [91, 93, 94, 95, 97], "305": [91, 93], "306": [3, 4, 91, 93, 94, 95, 96, 97], "307": [91, 93], "308": [91, 93, 94, 95, 97], "309": [3, 4, 91, 93, 96], "31": [91, 93, 100], "310": [91, 93, 94, 95, 97], "3100": 120, "311": [91, 93], "312": [3, 4, 91, 93, 94, 95, 96, 97], "313": [91, 93], "314": [91, 93, 94, 95, 97], "315": [3, 4, 91, 93, 96], "316": [91, 93, 94, 95, 97], "317": [91, 93], "318": [3, 4, 91, 93, 94, 95, 96, 97], "319": [91, 93], "32": [91, 93, 94, 95, 97, 103, 105], "320": [91, 93, 94, 95, 97], "3200": 120, "321": [3, 4, 91, 93, 96], "322": [91, 93, 94, 95, 97], "323": [91, 93], "32395": [91, 93], "32396": [91, 93], "32397": [91, 93], "32398": [91, 93], "32399": [91, 93, 100], "324": [3, 4, 91, 93, 94, 95, 96, 97], "32400": [91, 93, 100], "325": [91, 93], "326": [91, 93, 94, 95, 97], "327": [3, 4, 91, 93, 96], "328": [91, 93, 94, 95, 97], "329": [91, 93], "33": [3, 4, 91, 93, 96, 120], "330": [3, 4, 91, 93, 94, 95, 96, 97], "331": [91, 93], "332": [91, 93, 94, 95, 97], "333": [3, 4, 91, 93, 96], "334": [91, 93, 94, 95, 97], "335": [91, 93], "336": [3, 4, 91, 93, 94, 95, 96, 97], "337": [91, 93], "338": [91, 93, 94, 95, 97], "339": [3, 4, 91, 93, 96], "34": [91, 93, 94, 95, 97, 103, 105], "340": [91, 93, 94, 95, 97], "341": [91, 93], "342": [3, 4, 91, 93, 94, 95, 96, 97], "343": [91, 93], "344": [91, 93, 94, 95, 97], "345": [3, 4, 91, 93, 96], "346": [91, 93, 94, 95, 97], "347": [91, 93], "348": [3, 4, 91, 93, 94, 95, 96, 97], "349": [91, 93], "35": [91, 93], "350": [91, 93, 94, 95, 97], "351": [3, 4, 91, 93, 96], "352": [91, 93, 94, 95, 97], "353": [91, 93], "354": [3, 4, 44, 48, 91, 93, 94, 95, 96, 97], "355": [91, 93], "356": [91, 93, 94, 95, 97], "357": [3, 4, 44, 48, 91, 93, 96, 100], "358": [91, 93, 94, 95, 97, 100], "359": [91, 93], "36": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "360": [1, 2, 3, 4, 10, 11, 61, 65, 66, 67, 73, 75, 76, 80, 82, 85, 91, 93, 100, 112, 115, 120, 126], "37": [91, 93], "38": [91, 93, 94, 95, 97, 103, 105], "3825108": [91, 100], "3860281": [91, 100], "39": [3, 4, 91, 93, 96], "3987634": [91, 100], "4": [42, 43, 44, 45, 48, 91, 93, 94, 95, 97, 100, 101, 102, 103, 105, 120, 121], "40": [91, 93, 94, 95, 97, 100, 103, 105], "41": [70, 71, 91, 93], "42": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "4235128": [91, 100], "43": [91, 93], "44": [91, 93, 94, 95, 97, 103, 105], "45": [3, 4, 91, 93, 96], "46": [91, 93, 94, 95, 97, 103, 105], "47": [91, 93], "48": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "49": [91, 93], "5": [1, 2, 10, 11, 13, 15, 26, 38, 42, 43, 44, 45, 48, 49, 51, 52, 53, 56, 68, 69, 76, 84, 91, 93, 100, 101, 102, 120], "50": [1, 2, 10, 11, 44, 45, 51, 52, 61, 65, 66, 67, 68, 69, 76, 84, 85, 91, 93, 94, 95, 97, 103, 105], "51": [3, 4, 91, 93, 96], "52": [91, 93, 94, 95, 97, 103, 105], "52103": [91, 100], "52104": [91, 100], "53": [91, 93], "54": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "55": [91, 93], "56": [91, 93, 94, 95, 97, 103, 105], "57": [3, 4, 91, 93, 96], "58": [91, 93, 94, 95, 97, 103, 105], "59": [91, 93], "6": [3, 4, 42, 43, 44, 45, 48, 49, 91, 93, 94, 95, 96, 97, 100, 103, 105], "60": [3, 4, 53, 54, 55, 91, 93, 94, 95, 96, 97, 103, 105], "61": [91, 93], "62": [91, 93, 94, 95, 97, 103, 105], "63": [3, 4, 91, 93, 96], "64": [91, 93, 94, 95, 97, 103, 105], "65": [91, 93, 100], "66": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "67": [91, 93], "68": [91, 93, 94, 95, 97, 103, 105], "69": [3, 4, 91, 93, 96], "692111": [91, 100], "7": [44, 45, 91, 93, 100, 120], "70": [91, 93, 94, 95, 97, 103, 105], "71": [91, 93], "72": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "720": [103, 105], "725108": [91, 100], "73": [91, 93], "74": [91, 93, 94, 95, 97, 103, 105], "75": [3, 4, 91, 93, 96], "76": [91, 93, 94, 95, 97, 103, 105], "77": [91, 93], "78": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "79": [91, 93], "8": [3, 4, 44, 45, 91, 93, 94, 95, 97, 100, 103, 105], "80": [91, 93, 94, 95, 97, 103, 105], "81": [3, 4, 91, 93, 96, 100], "82": [91, 93, 94, 95, 97, 103, 105], "825108": [91, 100], "83": [91, 93], "84": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "85": [91, 93], "858161": [91, 100], "86": [91, 93, 94, 95, 97, 103, 105], "87": [3, 4, 91, 93, 96], "88": [91, 93, 94, 95, 97, 103, 105], "880755": [91, 93], "880772": [91, 93], "880781": [91, 93], "880829": [91, 93], "880843": [91, 93], "881165": [91, 93], "89": [91, 93], "9": [3, 4, 44, 45, 91, 93, 94, 95, 96, 97, 100, 120], "90": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "91": [91, 93], "92": [91, 93, 94, 95, 97, 103, 105], "93": [3, 4, 91, 93, 96], "94": [91, 93, 94, 95, 97, 103, 105], "95": [1, 2, 10, 11, 44, 45, 91, 93], "96": [3, 4, 91, 93, 94, 95, 96, 97, 103, 105], "97": [91, 93], "98": [91, 93, 94, 95, 97, 103, 105], "99": [3, 4, 44, 45, 91, 93, 96, 100], "995": [91, 92], "A": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 18, 24, 25, 42, 43, 44, 45, 48, 53, 54, 61, 65, 66, 67, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 107, 108, 109, 110, 111, 120, 124, 126], "As": 43, "By": [42, 43, 91, 100], "For": [44, 45, 47, 91, 94, 95, 99, 100, 107, 110, 120, 125, 126], "If": [1, 2, 8, 9, 10, 11, 13, 15, 18, 22, 25, 42, 43, 44, 45, 48, 53, 56, 61, 63, 64, 76, 77, 85, 91, 94, 95, 97, 100, 101, 102, 107, 109, 112, 115, 120, 124, 126], "In": [1, 2, 10, 11, 42, 43, 91, 100, 120, 126], "It": [13, 18, 76, 85, 91, 99, 100, 120, 126, 127], "Not": [61, 62], "One": [101, 102, 120], "The": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 17, 24, 25, 42, 43, 44, 45, 46, 48, 49, 50, 61, 63, 64, 65, 66, 67, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 96, 97, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126], "Then": 124, "There": 120, "These": [44, 45, 47, 120, 126], "To": [91, 100, 124], "With": [120, 121], "_": [120, 122, 126], "_check_measur": [68, 69], "_compute_energy_ratio_bootstrap": 1, "_compute_energy_ratio_singl": 1, "_compute_total_uplift_bootstrap": 10, "_compute_total_uplift_singl": 10, "_compute_ws_count": [8, 9], "_create_evals_datafram": [59, 60], "_description_": [3, 4, 59, 60, 68, 69], "_fi_set_ws_wd_ti": 91, "_find_sensor_stuck_single_timearrai": 49, "_get_all_unique_flag": [44, 45], "_get_energy_ratio": 3, "_get_energy_ratios_allbin": [42, 43], "_get_mean_power_curv": [44, 45], "_get_model_params_dict": [59, 60], "_gui": 120, "_interpolate_with_max_gap": 112, "_is_uplift": [8, 9], "_load_er_input_for_wd_bia": [42, 43], "_max": [1, 2, 10, 11], "_plot_top_sensor_fault": 49, "_process_single_wd": [3, 4], "_reset_mean_power_curv": [44, 45], "_reset_output": [68, 69], "_set_col_by_n_closest_upstream_turbin": 13, "_set_col_by_radius_from_turbin": 13, "_set_col_by_turbin": 13, "_set_col_by_upstream_turbin": 13, "_set_col_by_upstream_turbines_in_radiu": 13, "_setup_logg": 43, "_step": [1, 2, 10, 11], "_summary_": [59, 60, 68, 69], "_type_": [3, 4, 59, 60, 68, 69], "a1": 120, "a2": 120, "a3": 120, "about": [13, 16, 120], "abov": [44, 45, 91, 100, 120], "absolut": [1, 2, 76, 87], "accept": [76, 87], "access": [107, 108, 109, 120], "accommod": 120, "accord": [44, 45, 48, 76, 86, 88, 91, 98, 99, 120], "account": [53, 54], "accur": [91, 96, 99, 100], "achiev": [91, 92], "across": [1, 2, 10, 11, 76, 78, 79, 81, 82, 83, 84, 91, 92], "activ": 124, "actual": [44, 45, 120], "ad": [13, 76, 77, 80, 120], "add": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 76, 77, 78, 79, 80, 81, 82, 83, 84, 91, 92, 120, 124], "add_bin_weight": 76, "add_gaussian_blending_to_floris_approx_t": 91, "add_power_ref": 76, "add_power_test": 76, "add_reflected_row": 76, "add_w": 76, "add_wd": 76, "add_wd_bin": 76, "add_ws_bin": 76, "addit": [13, 15, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 76, 78, 79, 81, 82, 83, 84, 86, 122], "addition": [8, 9, 42, 43, 91, 100, 101, 102, 126], "address": [13, 18, 126], "adjust": 120, "affect": [91, 96, 99], "after": [13, 15, 103, 105, 120], "again": [76, 80, 122], "against": 120, "aggreg": [44, 45, 76, 85], "agreement": 120, "al": [91, 93, 121, 126], "algorithm": [44, 45, 120], "align": 120, "all": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 22, 27, 28, 30, 31, 32, 34, 36, 37, 39, 40, 44, 45, 61, 65, 67, 76, 81, 82, 83, 84, 85, 87, 89, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 120, 126], "all_flag": [44, 45], "all_influence_magnitud": [91, 97], "allow": [13, 16, 44, 45, 76, 85, 91, 92, 100, 112, 115, 120, 126], "allow_convert_to_integ": [13, 16], "along": [73, 74, 75], "alreadi": 120, "also": [3, 4, 13, 16, 29, 33, 41, 42, 43, 44, 45, 91, 93, 100, 103, 105, 120, 121, 123, 126], "altern": 126, "although": [76, 87], "altitud": [13, 24, 25], "alwai": 120, "ambient": [3, 4, 91, 99, 100, 126], "among": 123, "amount": 126, "an": [1, 2, 5, 6, 7, 10, 11, 13, 15, 17, 18, 25, 42, 43, 44, 45, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 91, 97, 100, 101, 102, 107, 109, 120, 121, 122, 124, 126], "analys": [120, 121, 126], "analysi": [12, 13, 15, 58, 72, 91, 100, 119, 120, 122, 123], "analyz": 120, "angl": [61, 65, 66, 67, 70, 71, 73, 74, 101, 102, 103, 106, 107, 111, 120, 126], "angle_wrap": [103, 106], "angles_array_deg": [73, 74, 75], "angular": [53, 54, 55, 126], "ani": [1, 2, 8, 9, 10, 11, 13, 15, 16, 42, 43, 44, 45, 48, 49, 50, 76, 81, 82, 83, 84, 85, 90, 91, 94, 95, 96, 97, 100, 107, 108, 109, 120, 124], "annual": 121, "anoth": 127, "anywher": 120, "app": 120, "appear": [76, 77, 91, 94, 107, 110], "append": 120, "appli": [91, 92, 101, 102, 120], "applic": 120, "apply_filters_to_df": [44, 45], "approach": [91, 99, 124], "approxim": [5, 6, 61, 67, 91, 93], "ar": [1, 2, 10, 11, 13, 15, 22, 26, 29, 33, 35, 38, 41, 42, 43, 44, 45, 48, 53, 56, 73, 74, 76, 77, 82, 84, 87, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 110, 116, 117, 118, 119, 120, 121, 124, 126], "arang": [3, 4, 44, 45, 91, 93, 103, 105], "aren": [1, 2, 10, 11], "argument": [42, 43], "aris": [44, 45], "around": [44, 45, 76, 80, 112, 115, 120, 121, 123, 126], "arrai": [3, 4, 5, 7, 13, 22, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 49, 50, 53, 56, 70, 71, 73, 74, 75, 76, 80, 82, 84, 86, 88, 91, 93, 94, 95, 96, 97, 98, 103, 104, 105, 106, 107, 111, 112, 115, 116, 118, 126], "artifici": 122, "ascend": 112, "asset": [3, 4], "assign": [1, 2, 10, 11, 44, 45, 48, 76, 77, 120], "assum": [44, 45, 73, 74, 91, 100, 112, 116, 118, 120], "assume_sort": 112, "assumpt": [91, 100], "atmospher": 126, "attach": 43, "attribut": 43, "author": 126, "automat": [101, 102, 112, 113], "avail": [1, 2, 10, 11, 44, 45, 120, 123, 124, 126], "averag": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 53, 54, 55, 76, 78, 79, 81, 82, 83, 84, 103, 105, 120, 126], "avoid": [91, 100], "ax": [8, 9, 13, 25, 44, 45, 61, 63, 64, 70, 71], "axarr": [8, 9], "axi": [3, 4, 13, 25, 44, 45, 73, 74, 75, 112, 115, 120], "b": 126, "back": [91, 97, 121], "background": [3, 4, 13, 25], "bai": [121, 126], "balanc": 126, "bar": [44, 45], "base": [1, 2, 4, 6, 9, 10, 11, 42, 43, 44, 45, 47, 48, 60, 69, 71, 76, 77, 85, 91, 95, 107, 108, 109, 120, 126], "baselin": [42, 43, 61, 65, 121], "basic": [44, 48, 120], "becaus": [44, 45, 48, 91, 100, 120], "becom": [13, 15, 91, 100, 120], "been": [13, 18, 103, 105, 120, 125], "behavior": [91, 100, 126], "behind": [13, 24], "being": [8, 9, 44, 45, 91, 92, 100, 120], "below": [44, 45, 61, 67, 91, 99, 100, 101, 102, 119, 120], "benefit": [91, 99], "besid": [13, 14, 120], "best": [61, 63, 64, 67, 70, 71, 120], "better": [42, 43, 44, 45], "between": [1, 2, 5, 7, 10, 11, 13, 25, 42, 43, 44, 45, 51, 52, 76, 80, 89, 90, 91, 98, 100, 101, 102, 103, 105, 106, 107, 110, 112, 115, 120, 126], "bfd": 126, "bia": [42, 43, 51, 52, 70, 71, 103, 105, 120, 126], "bias": 120, "bias_estim": 42, "bias_timestep": [51, 52], "bin": [1, 2, 3, 4, 8, 9, 10, 11, 42, 43, 44, 45, 53, 54, 61, 65, 67, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 127], "bin_and_group_datafram": 76, "bin_col_nam": [76, 86], "bin_cols_in": [1, 2, 8, 9, 10, 11, 61, 65, 67, 76, 87], "bin_cols_without_df_nam": [76, 77, 85], "bin_column": 76, "blend": [91, 92], "block": [5, 6, 7], "blockag": [3, 4], "blur": [91, 92], "bokeh": [44, 45], "bool": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 22, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 65, 67, 68, 69, 73, 75, 76, 81, 82, 83, 84, 85, 87, 91, 93, 97, 98, 99, 100, 103, 104, 105, 106, 112, 115], "boolean": [5, 6, 13, 24, 25], "bootstrap": [1, 2, 10, 11, 42, 43, 76, 87], "both": [13, 18, 43, 120, 122], "bound": [1, 2, 10, 11, 13, 19, 20, 21, 42, 43, 44, 45, 68, 69, 70, 71, 91, 100, 103, 104, 105], "boundari": 112, "box": [44, 45], "bring": [13, 16], "brown": 120, "bsd": 125, "built": [123, 126], "c": [49, 120, 126], "calc_floris_approx_t": [91, 92, 100], "calc_median_min_max_std": [53, 54, 55, 73, 75], "calc_second_ord": [59, 60], "calc_wd_mean_radi": 73, "calcul": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 26, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 70, 71, 73, 74, 75, 76, 77, 80, 87, 91, 93, 95, 98, 100, 120, 121, 126], "calculate_baselin": [42, 43], "calculate_curv": [70, 71], "calculate_miss": [44, 45], "calculate_wd_statist": 73, "calculate_wfpower_for_sampl": [59, 60], "calibr": [120, 123, 126], "call": [8, 9, 13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45], "callabl": [42, 43], "can": [3, 4, 13, 16, 26, 28, 29, 32, 33, 38, 40, 41, 42, 43, 44, 45, 61, 65, 67, 76, 77, 88, 91, 93, 94, 95, 96, 97, 100, 101, 102, 103, 105, 112, 115, 120, 121, 122, 126, 127], "cannot": [44, 48, 91, 100, 120], "capabl": 122, "captur": [91, 96], "care": 126, "carefulli": [53, 55, 120], "case": [1, 2, 10, 11, 44, 45, 76, 82, 84, 120, 121], "categor": [44, 45], "caus": 126, "cc": [116, 117, 118], "center": [1, 2, 10, 11, 53, 54, 55], "central": [123, 126], "certain": [44, 45, 91, 98], "challeng": 122, "chang": [1, 2, 10, 44, 45, 91, 94, 95, 97, 107, 109, 120, 124], "change_threshold": [91, 94, 95, 97], "character": [3, 4], "check": [44, 45, 49, 50, 51, 52, 76, 87, 120, 124], "check_compute_energy_ratio_input": 76, "choic": [1, 2, 10, 11, 44, 45, 120], "chronolog": [44, 45], "churchfield": 126, "circmean": [73, 74], "circular": [13, 22, 34, 36, 37, 53, 56, 73, 103, 105, 112, 115], "circular_col": [53, 56, 120], "circular_mean": [13, 22], "circular_stat": 120, "cite": 126, "class": [3, 4, 5, 6, 8, 9, 42, 43, 44, 45, 59, 60, 68, 69, 70, 71, 120, 126], "classifi": [44, 45, 47, 48, 120], "claus": 125, "clean": [44, 45], "clock": 120, "clone": 124, "close": 120, "closest": [13, 26, 38, 91, 98], "co": [70, 71], "code": 124, "coeffici": [42, 43, 103, 105, 120], "col_nam": [76, 86, 88], "col_out": 13, "col_prefix": [13, 22], "col_ref": 13, "color": [8, 9, 13, 25, 120], "color_dict": [8, 9], "cols_angular": [53, 54, 55], "cols_df1": [103, 105], "cols_df2": [103, 105], "column": [1, 2, 5, 6, 10, 11, 13, 15, 18, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 61, 65, 67, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 100, 103, 105, 107, 110, 111, 120, 126], "column_list": 120, "com": [107, 108, 109, 124, 126], "combin": [1, 2, 10, 11, 76, 85, 91, 93], "come": [3, 4], "command": 120, "commit": 124, "common": [44, 45, 103, 105, 107, 110, 116, 117, 118, 120], "commonli": 120, "commun": 123, "comon": 120, "compar": [42, 43, 49, 50, 61, 65, 66, 103, 105, 120, 126], "comparison": [61, 65, 67, 91, 100, 103, 105, 120, 121, 126], "complet": [44, 45, 120, 124], "compon": [8, 9], "compromis": 120, "comput": [1, 2, 8, 9, 10, 11, 42, 43, 53, 55, 73, 74, 91, 97, 100, 120, 121, 127], "compute_energy_ratio": [1, 76, 87], "compute_total_uplift": 10, "concaten": [5, 6], "cond": [44, 47, 120], "conda": 124, "condit": [44, 45, 47, 48, 70, 71, 91, 99, 100, 120, 126], "conduct": 122, "configur": [43, 124], "confirm": 120, "confus": [44, 45], "connect": [44, 45], "consecut": [44, 45, 49, 50, 120], "consequ": 126, "consid": [13, 15, 26, 29, 33, 35, 38, 41, 42, 43, 44, 45, 47, 53, 55, 61, 64, 70, 71, 76, 80, 91, 98, 120], "consist": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 51, 52, 107, 110, 120, 126], "consol": [43, 44, 45, 48, 91, 100], "constant": [44, 45, 120], "construct": [1, 2, 10, 11], "contact": 125, "contain": [1, 2, 3, 4, 10, 11, 13, 24, 25, 26, 28, 29, 32, 33, 35, 38, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 61, 62, 70, 71, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 93, 94, 95, 96, 97, 99, 100, 101, 102, 107, 110, 111, 112, 119, 120, 126], "content": [120, 125], "continu": [101, 102], "conveni": [8, 9], "convent": 120, "converg": [44, 45], "convert": [8, 9, 120], "coordin": [13, 24], "copi": [91, 100], "correct": [42, 43, 44, 45, 103, 105, 120, 122, 126], "correct_y_shift": [103, 105], "correctli": 124, "correl": [42, 43, 44, 45, 103, 105, 120], "correspond": [1, 2, 13, 17, 26, 28, 29, 32, 33, 38, 40, 41, 44, 45, 76, 80], "corrupt": [13, 15], "cosin": [116, 117], "cosine_expon": [116, 117], "cost": [42, 43, 103, 104, 105, 106], "could": 120, "count": [1, 2, 8, 9, 10, 11, 44, 46, 76, 77], "coupl": [44, 45], "cover": [42, 43, 91, 100], "creat": [8, 9, 13, 25, 43, 44, 45, 101, 102], "criteria": 120, "cross": [51, 52, 120], "crosscheck_northing_offset_consist": 51, "csv": 120, "cumul": 126, "curl": 126, "current": [42, 43, 120, 124, 127], "curtail": [44, 48, 120], "curv": [44, 45, 70, 71, 91, 92, 103, 106, 120, 126], "cut": [44, 45, 76, 91, 92, 120], "cutoff_w": [44, 45], "d": [91, 97], "dai": [13, 24, 25, 51, 52, 103, 105], "dash": 120, "data": [1, 2, 5, 6, 10, 11, 13, 15, 16, 23, 24, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 61, 65, 66, 67, 70, 71, 76, 77, 85, 87, 89, 90, 91, 99, 100, 103, 104, 107, 110, 111, 112, 114, 115, 119, 121, 122, 123, 126], "data_process": [119, 122], "databas": 120, "dataerror": [59, 60], "datafram": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 65, 66, 67, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 107, 110, 111, 112, 113, 114, 120, 127], "datapoint": [44, 45], "dataset": [42, 43, 44, 45, 101, 102, 120, 121, 122], "date": 120, "datetim": [51, 52, 53, 54, 55, 112, 113], "datetime_column": [13, 24], "daylight": [13, 24], "daytim": [13, 24], "deadband": [44, 45], "deal": [120, 126], "declar": 124, "decreas": [44, 45], "deep": 126, "default": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 22, 24, 26, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 82, 84, 85, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 111, 116, 117, 118], "deficit": 120, "defin": [42, 43, 44, 45, 120, 121, 126], "deflect": [61, 65], "deg": [73, 75, 91, 93, 96, 99, 100, 116, 117, 118, 120, 126], "degre": [1, 2, 10, 11, 42, 43, 73, 74, 75, 76, 80, 91, 92, 99, 101, 102, 112, 115, 116, 117, 118, 120], "degress": [13, 24], "demo": 122, "demonstr": [120, 122], "denot": [13, 24, 91, 94, 95, 97, 116, 118, 120], "densiti": [91, 92], "dep_indices_by_wd": [91, 97], "depend": [91, 94, 95, 97, 99, 100], "depict": [44, 45, 47, 101, 102], "depth": 122, "deriv": [1, 3, 4, 10, 76, 89, 90, 91, 96, 126], "descript": [44, 45], "design": [123, 126], "detail": [119, 121, 126], "detect": [91, 97, 120, 126], "determin": [13, 24, 26, 28, 29, 32, 33, 35, 38, 40, 41, 42, 43, 44, 45, 61, 63, 64, 67, 73, 75, 76, 77, 91, 94, 95, 96, 97, 98, 99, 120, 126], "develop": 122, "deviat": [44, 45, 49, 50, 53, 55, 73, 75, 91, 92, 116, 117, 118, 120], "df": [1, 3, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 61, 62, 70, 71, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 100, 112, 114, 120], "df1": [103, 105], "df2": [103, 105], "df_": [1, 2, 10, 11, 61, 62, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90], "df_1": [107, 110], "df_2": [107, 110], "df_approx": [61, 67, 91, 93, 100], "df_approx_": [61, 67], "df_downsampl": 53, "df_drop_nan_row": 13, "df_fi_approx": [91, 92], "df_filter": [44, 45], "df_find_and_fill_data_gaps_with_miss": 13, "df_fm_approx": [42, 43], "df_freq": [1, 2, 8, 9, 10, 11, 61, 62, 65, 66, 67, 76, 77, 87], "df_freq_pl": [1, 10, 76, 77], "df_get_no_faulty_measur": 44, "df_impacting_turbin": [44, 48], "df_in": [13, 16, 53, 54, 55], "df_list_in": [5, 6], "df_mark_turbdata_as_faulti": 44, "df_movingaverag": 53, "df_name": [1, 2, 5, 6, 10, 11, 76, 77, 85], "df_names_subset": [8, 9], "df_opt": [101, 102], "df_out": [91, 94, 95], "df_pow_ref_mapping_func": [42, 43], "df_raw": [3, 4], "df_re": 120, "df_reduce_precis": 13, "df_resample_by_interpol": [53, 120], "df_result": [8, 9], "df_scada": [107, 111], "df_scada_baseline_in": [61, 65], "df_scada_in": [61, 66, 67], "df_scada_wakesteering_in": [61, 65], "df_sort_and_find_dupl": 13, "df_sort_and_fix_dupl": 13, "df_upstream": [3, 4, 13, 26, 28, 29, 32, 33, 38, 40, 41, 70, 71, 91, 99], "df_ws_mapping_func": [42, 43], "dic": [107, 108, 109], "dict": [8, 9, 10, 11, 103, 104, 107, 108, 109], "dictionari": [8, 9, 10, 103, 104, 105, 107, 108, 109], "differ": [13, 18, 25, 42, 43, 44, 45, 76, 80, 91, 92, 120, 126], "differenti": [13, 25], "digit": 120, "dimens": [101, 102], "dimension": [91, 97], "direciton": [91, 97], "direct": [1, 2, 3, 4, 8, 9, 10, 11, 13, 20, 26, 28, 29, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 48, 61, 65, 66, 67, 73, 74, 75, 76, 80, 82, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 107, 111, 116, 117, 118, 120, 126, 127], "directionm": 120, "directli": [44, 45, 76, 77, 87, 91, 92, 124], "directori": 124, "discret": [42, 43, 91, 99, 120], "discuss": 126, "distanc": [1, 2, 10, 11, 44, 45, 76, 80, 91, 98, 112, 115], "distinguish": [13, 25], "distribut": [3, 4, 8, 9], "divid": 119, "do": [3, 4, 13, 16, 44, 45, 53, 55, 120], "doc": 124, "document": 120, "doe": [13, 18, 42, 43, 76, 87, 120], "doekemeij": [121, 126], "done": [112, 115, 120], "down": [44, 45, 101, 102], "download": [120, 122, 124], "downsampl": [53, 54, 126], "downstream": [103, 104], "downtim": [44, 48], "downward": [44, 45], "dpi": [42, 43, 49, 70, 71], "drawn": [44, 45], "driven": 123, "drop": [13, 14, 120], "dsf22": 126, "dt": [112, 113], "due": [91, 100, 120], "duplic": [13, 17, 18], "duplicate_entries_idx": [13, 17], "dure": [44, 45, 120], "dv": [70, 71], "dwd_opt": [103, 106], "dx": [91, 96, 99], "dy": [91, 96, 99], "dy_ev": [103, 106], "e": [13, 18, 42, 43, 44, 45, 48, 91, 96, 97, 100, 112, 115, 120, 121, 124, 126], "each": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 42, 43, 44, 45, 46, 48, 51, 52, 76, 80, 85, 91, 93, 94, 95, 96, 97, 99, 107, 111, 116, 118, 119, 120], "easi": 120, "easiest": 122, "edg": [76, 80, 82, 84, 86, 88], "edit": 124, "effect": [3, 4, 44, 45, 126], "effici": [13, 16, 120, 126], "either": [76, 77, 120], "element": [1, 2, 5, 7, 10, 11, 61, 65, 66, 67, 91, 97, 103, 106], "elimin": [91, 100], "email": 126, "emgauss": [116, 117, 118], "empir": [91, 99], "empti": [91, 97], "enabl": [76, 80, 91, 99], "encod": 126, "encourag": 122, "end": [44, 45, 101, 102, 103, 105, 107, 108, 121, 127], "energi": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 42, 43, 61, 64, 67, 76, 80, 89, 90, 91, 100, 119, 120, 123, 126, 127], "energyratioinput": [1, 2, 5, 8, 9, 10, 11, 42, 43], "energyratiooutput": [1, 2, 8, 10, 11], "enforc": 120, "engin": 121, "ensur": [91, 100, 107, 110], "entir": [91, 99, 100, 120], "entri": [13, 14, 18, 42, 43, 44, 45, 47, 91, 94, 95, 112, 113], "environ": 124, "equal": [1, 2, 10, 11, 13, 15, 17, 18, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 76, 82, 84, 86, 88, 91, 96, 100, 101, 102], "equip": 120, "er_in": [1, 2, 8, 9, 10, 11, 76, 87], "er_n_btstrp": [42, 43], "er_result": [61, 64], "er_wd_bin_width": [42, 43], "er_wd_step": [42, 43], "er_ws_step": [42, 43], "error": [1, 2, 61, 63, 64, 67, 103, 106], "essenti": [42, 43, 91, 95], "estim": [3, 4, 42, 43, 44, 45, 58, 70, 71, 103, 104, 112, 113, 120, 123, 126], "estimate_cos_pp_fit": [70, 71], "estimate_dt": 112, "estimate_farmaveraged_ti": [68, 69], "estimate_heterogen": [3, 4], "estimate_local_ti": [68, 69], "estimate_ti": 103, "estimate_wd_bia": [42, 43], "et": [42, 43, 121, 126], "evalu": [42, 43, 61, 62, 91, 92, 93, 96, 103, 104, 105, 106, 120], "evaluate_overall_wake_loss": 61, "even": [13, 16, 44, 45], "everi": [44, 45, 76, 87, 91, 99, 120], "everyth": 124, "exact": [44, 45, 120], "exactli": 120, "exampl": [44, 45, 47, 91, 93, 100, 116, 124, 126, 127], "examples_artifical_data": 120, "examples_artificial_data": [121, 122], "examples_smarteol": 122, "excel": 120, "except": [13, 18, 76, 87], "exclud": [13, 26, 28, 32, 38, 40], "exclude_column": [44, 47], "exclude_turb": [13, 26, 28, 32, 38, 40], "exhaust": 120, "exist": 120, "exmapl": 121, "expand": [91, 93], "expect": [107, 111], "experi": [122, 123, 126], "experienc": [44, 45], "explicit": [1, 2, 10, 11], "explor": 120, "expon": [70, 71, 116, 117], "export": 120, "expr": [76, 88], "express": [76, 88], "extern": 120, "extra": [1, 2, 10, 11, 13, 15], "extract": [91, 94, 95], "extrapol": 112, "extrapolate_ti": [91, 100], "extrapolate_w": [91, 100], "facilit": [42, 43], "factor": [13, 16, 120], "fair": [91, 100], "fairli": 120, "fall": [91, 100], "fals": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 14, 16, 22, 29, 33, 35, 41, 42, 43, 44, 45, 49, 50, 53, 54, 55, 59, 60, 61, 65, 67, 68, 69, 76, 81, 82, 83, 84, 85, 91, 93, 97, 98, 99, 103, 104, 105, 112, 115, 120], "far": [44, 45], "farm": [3, 4, 42, 43, 44, 45, 91, 94, 95, 96, 97, 99, 116, 117, 118, 121, 123, 126], "fashion": [91, 100, 112, 115], "fast": [44, 45], "faster": 120, "fault": [44, 45, 48, 49, 50, 120, 126], "faulti": [44, 45, 46, 47, 48, 120], "feather": [120, 126], "fi": [44, 48, 59, 60], "field": [122, 123, 126], "fig": [44, 45], "fig_dpi": [59, 60, 70, 71], "fig_format": [49, 59, 60], "figur": [3, 4, 8, 9, 42, 43, 44, 45, 49, 50, 51, 52, 70, 71, 120], "file": [13, 15, 43, 120, 126], "filehandl": 43, "fill": [13, 15, 18, 91, 96, 112, 115], "filter": [13, 19, 20, 21, 76, 89, 90, 123, 126], "filter_all_nul": 76, "filter_any_nul": 76, "filter_by_condit": [44, 45], "filter_by_floris_power_curv": [44, 45], "filter_by_power_curv": [44, 45, 120], "filter_by_sensor_stuck_fault": [44, 45], "filter_df_by_faulty_impacting_turbin": 44, "filter_df_by_ti": 13, "filter_df_by_w": 13, "filter_df_by_wd": 13, "final": [120, 126], "find": [13, 15, 17, 49, 50, 91, 98, 100, 103, 105, 106, 120], "find_sensor_stuck_fault": 49, "find_timeshift_between_df": 103, "finit": [91, 100], "first": [1, 2, 10, 11, 61, 65, 66, 67, 91, 94, 116, 118, 120], "firstli": 120, "fit": [61, 63, 64, 67, 70, 71, 119, 126], "five": 120, "flag": [44, 45, 47, 91, 97, 120], "flasc": [119, 120, 121, 124, 125], "flasc2024": 126, "flascfilt": [44, 120], "flatten": [53, 57], "flatten_col": 53, "fleme": [125, 126], "float": [1, 2, 3, 4, 8, 9, 10, 11, 13, 19, 20, 21, 24, 29, 33, 35, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 56, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 80, 82, 84, 85, 87, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 106, 112, 115, 116, 117, 118], "float32": [13, 16], "float64": [13, 16], "flori": [0, 3, 4, 12, 42, 43, 44, 45, 51, 52, 58, 61, 63, 65, 66, 67, 72, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 107, 110, 111, 116, 117, 118, 119, 120, 123, 124, 126], "floris_result": [61, 63], "floris_set_ws_wd_ti": [68, 69], "floris_sobol_analysi": 59, "floris_tool": [13, 26, 28, 29, 32, 33, 38, 40, 41, 44, 48], "florismodel": [44, 45, 91, 93, 94, 95, 96, 97, 99, 103, 104, 107, 111, 116, 117, 118], "flow": [3, 4, 91, 99], "fm": [3, 4, 44, 45, 51, 52, 68, 69, 91, 93, 96, 99, 103, 104], "fm_in": [61, 65, 66, 91, 94, 95, 97, 107, 111], "fmin": [103, 104], "folder": 124, "follow": [1, 2, 10, 11, 42, 43, 73, 75, 103, 104, 105, 106, 120, 122, 124], "form": [91, 100, 120], "format": [42, 43, 44, 45, 46, 47, 48, 112, 113, 126], "former": [13, 17], "found": [44, 45, 91, 97, 120, 122, 126], "fp": [112, 115], "fraction": [91, 94, 95, 97], "frame": [91, 99, 126], "freestream": [91, 99], "freq_val": [1, 2, 10, 11], "frequenc": [1, 2, 8, 9, 10, 11, 61, 65, 66, 67, 76, 77, 87], "from": [1, 2, 3, 4, 10, 11, 13, 16, 26, 29, 33, 35, 38, 41, 42, 43, 44, 45, 61, 62, 76, 77, 80, 87, 89, 90, 91, 92, 93, 96, 98, 100, 101, 102, 107, 108, 112, 115, 120, 122, 126, 127], "front": 120, "frozen": [44, 45], "ftool": [44, 48], "ftp": 120, "full": [101, 102], "function": [1, 5, 10, 13, 15, 17, 18, 25, 42, 43, 44, 45, 49, 51, 53, 61, 73, 76, 77, 80, 85, 87, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 116, 119, 120, 126, 127], "further": [13, 15, 16, 120, 126], "furthest": [91, 98], "g": [42, 43, 44, 45, 91, 97, 100, 120, 121], "gap": [13, 15, 53, 56, 112, 115, 120], "gather": [44, 45], "gaussian": [91, 92, 126], "gch": [116, 117, 118], "gener": [3, 4, 5, 7, 13, 26, 28, 29, 32, 33, 38, 40, 41, 44, 45, 46, 47, 76, 82, 84, 91, 92, 100, 119, 120, 122], "generate_block_list": 5, "generate_floris_hetmap": [3, 4], "generate_sampl": [59, 60], "geometr": [91, 96], "get": [5, 6, 13, 22, 23, 42, 43, 44, 46, 91, 94, 95, 96, 97, 101, 102, 107, 108, 112, 114], "get_all_dependent_turbin": 91, "get_all_impacting_turbin": [44, 48, 91], "get_all_impacting_turbines_geometr": 91, "get_column_mean": 13, "get_dependent_turbines_by_wd": [91, 94, 95], "get_df": [5, 6, 44, 45], "get_num_turbin": [13, 112], "get_power_curv": [44, 45], "get_sobol_sensitivity_indic": [59, 60], "get_turbine_ord": [68, 69], "get_turbine_pair": [68, 69], "get_turbs_in_radiu": 91, "get_upstream_turbs_flori": [13, 26, 28, 29, 32, 33, 38, 40, 41, 91], "get_yaw_angles_interpol": 101, "git": 124, "github": [123, 124, 126], "give": [1, 10, 76, 86], "given": [1, 2, 10, 11, 13, 24, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 86, 88, 103, 104], "go": [44, 45], "gone": 120, "good": [91, 99, 120, 122], "gov": [125, 126], "grab": [44, 45], "greater": [76, 82, 84, 86, 88], "green": 120, "grid": [91, 93, 100], "group": [76, 77, 85], "groupbi": 120, "gui": 120, "h": [103, 105], "ha": [1, 2, 10, 11, 13, 24, 42, 43, 76, 80, 91, 92, 99, 100, 103, 105, 120, 125], "half": [1, 2, 10, 11], "hand": [44, 45, 91, 100, 116, 117, 118], "handl": [53, 55, 73, 74, 76, 85], "happen": [44, 45], "have": [3, 4, 13, 14, 18, 44, 45, 91, 92, 94, 96, 97, 99, 120, 126], "head": 120, "heavili": 120, "help": [3, 4, 44, 45, 126], "henc": [13, 15, 44, 45], "here": [120, 122], "heterogen": [3, 4], "heterogeneity_mapp": 3, "high": [44, 45, 47, 120], "higher": [44, 45, 101, 102, 120], "highest": [91, 100], "highlight": [44, 45], "histor": [91, 100, 121, 123, 126], "histori": [44, 45], "hold": [5, 6, 13, 15], "hour": [13, 24, 120], "hous": [123, 126], "how": [1, 2, 10, 11, 73, 74, 76, 87, 120, 121, 126], "howev": [91, 92, 120], "html": 122, "http": [124, 126], "hypothes": [42, 43], "i": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 18, 24, 26, 29, 33, 35, 38, 41, 42, 43, 44, 45, 47, 48, 53, 54, 55, 56, 61, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 80, 82, 84, 86, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127], "id": [59, 60], "idea": [42, 43], "identifi": [44, 45, 46, 47, 120], "idx": [107, 109], "ignor": [1, 2, 10, 11, 13, 15, 120], "impact": [44, 48, 91, 95, 96, 126], "impacting_turbin": [91, 96], "implement": [44, 45], "implicitli": [91, 100], "import": [13, 15, 44, 48, 120, 124, 126], "includ": [1, 2, 10, 11, 13, 29, 33, 35, 41, 44, 45, 73, 75, 91, 92, 98, 107, 126], "include_itself": [13, 29, 33, 35, 41, 91, 98], "inclus": 120, "inconsequ": 120, "inconsist": 120, "incorpor": [101, 102], "increas": [91, 93], "index": [10, 13, 17, 18, 44, 45, 53, 54, 55, 61, 66, 70, 71, 107, 109], "index_arrai": 49, "index_fault": 49, "indic": [13, 15, 17, 24, 25, 26, 28, 29, 32, 33, 38, 40, 41, 44, 45, 48, 49, 50, 51, 52, 76, 87], "individu": [44, 45, 120], "inflow": [3, 4, 44, 48, 91, 93, 100, 116, 117, 118], "influenc": [91, 97], "inform": [3, 4, 44, 45, 48, 53, 56, 91, 93, 100, 120, 125], "inher": 126, "initi": [42, 43], "input": [5, 6, 13, 14, 24, 25, 53, 54, 55, 56, 57, 73, 74, 76, 77, 85, 87, 101, 102, 112, 115, 127], "insert": [13, 15, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "insid": 126, "inspect": [44, 45], "instanc": [42, 43], "instead": [1, 2, 76, 85, 87, 120, 124], "instruct": 122, "int": [1, 2, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 23, 26, 29, 33, 35, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 55, 59, 60, 61, 66, 68, 69, 70, 71, 73, 74, 75, 76, 85, 87, 91, 94, 95, 97, 98, 103, 104, 105, 107, 109, 112, 114], "int16": [13, 16], "int32": [13, 16], "int8": [13, 16], "integ": [5, 7, 13, 16, 44, 45, 116, 118], "intend": 123, "intens": [13, 19, 27, 30, 31, 32, 42, 43, 91, 93, 100, 103, 104, 126], "intention": 122, "inter": [44, 48], "interact": [120, 124], "interest": [13, 26, 29, 33, 35, 38, 41, 44, 45, 48, 91, 94, 95, 96, 97, 99, 124], "interfac": 126, "intern": [44, 45, 120], "interp_method": [53, 56, 120], "interp_with_max_gap": 112, "interpol": [13, 15, 53, 56, 91, 100, 101, 102, 112, 115, 120, 126], "interpolate_floris_from_df_approx": 91, "introduc": 122, "invalid": 120, "investig": [44, 45], "io": 120, "ipynb": 122, "irregular": [91, 100], "is_dai": [13, 24, 25], "is_day_or_night": 13, "is_operation_norm": [44, 45], "is_operation_normal_": [44, 45, 120], "is_operation_normal_000": 120, "issu": [44, 45, 48, 91, 100, 120], "item": [107, 108, 109], "iter": [42, 43, 44, 45, 76, 87], "iterat": [42, 43, 44, 45, 47], "its": [13, 18, 42, 43, 44, 45, 116, 118, 120, 123], "itself": [3, 4, 91, 98], "j": [103, 104, 105, 126], "j_opt": [103, 104, 105, 106], "jensen": [116, 117, 118], "journal": 126, "jump": [13, 15], "jupyt": 124, "just": [44, 45], "kei": [103, 104, 105, 107, 108, 109, 121], "kind": [112, 115], "king": 126, "know": [44, 48, 122, 126], "known": [44, 45, 120], "kw": [44, 45], "label": [8, 9, 44, 45, 76, 86], "lag": [13, 24], "lag_hour": [13, 24], "larg": [13, 15, 42, 43, 91, 93, 100, 120, 123, 126], "larger": [13, 15, 42, 43, 112, 115], "largest": [76, 82, 84, 86, 88, 120], "last": [91, 100], "lat": [91, 98], "latex": 126, "latitud": [13, 24], "layout": [3, 4, 120], "least": [44, 45, 46, 91, 96, 100, 126], "left": [44, 45, 76, 82, 84, 86, 88, 91, 92], "length": [1, 2, 5, 7, 10, 11, 42, 43, 91, 96, 101, 102], "less": [1, 2, 10, 11, 76, 82, 84, 86, 88], "level": [53, 57, 72, 91, 97, 120, 126], "leverag": 126, "librari": 120, "like": [13, 26, 28, 32, 38, 40, 44, 45, 47, 48, 76, 82, 84, 86, 88, 91, 100, 124], "limit": [3, 4, 13, 15, 44, 45], "limit_numb": [91, 94, 95, 97], "line": [42, 43, 120], "linear": [53, 56, 91, 96, 99, 100, 112, 115, 120], "linearli": [91, 100, 101, 102, 112, 115], "linearndinterpol": [101, 102], "lint": 124, "list": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 17, 22, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 61, 65, 66, 67, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 96, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108, 109, 112, 113, 116, 118], "literatur": [42, 43, 120], "load": [42, 43, 116, 117, 118, 126], "load_floris_artifici": 116, "load_floris_smarteol": 116, "loc": [91, 94, 95], "local": [91, 100, 120, 124], "locat": [13, 24, 26, 29, 33, 35, 38, 41, 91, 98, 107, 110, 120], "log": [43, 120], "logger": 43, "loggingmanag": 43, "long": [1, 2, 10, 11, 91, 98, 120], "longer": [44, 45, 120], "longitud": [13, 24], "look": [13, 15, 44, 45, 120], "lookup": 101, "loop": [91, 94, 95], "loss": [13, 16, 42, 43, 61, 62, 63, 66, 70, 71, 91, 96, 99, 123, 126], "lot": 120, "low": [44, 45, 47], "lower": [13, 19, 20, 21, 42, 43, 70, 71, 91, 99, 101, 102, 120], "lowest": [91, 100], "m": [44, 45, 91, 93, 94, 95, 97, 100, 101, 102, 120, 126], "m_pow_lb": [44, 45], "m_pow_rb": [44, 45], "m_ws_lb": [44, 45], "m_ws_rb": [44, 45], "made": [61, 63, 64, 65, 91, 100, 120, 124], "magnitud": [91, 95, 97], "mai": [3, 4, 44, 45, 91, 97, 99, 100, 120], "mailto": 126, "main": [119, 120, 127], "mainten": [44, 45, 120], "make": [13, 16, 44, 45, 91, 100, 120], "manag": 124, "manipul": 13, "manner": 120, "map": [3, 4, 8, 9, 53, 54], "mark": [13, 15, 44, 45, 47, 91, 94, 95, 97], "mask": [42, 43], "mast": [120, 126], "match": [103, 106, 107, 110], "match_y_curves_by_offset": [103, 120], "matplotlib": [13, 25, 44, 45, 70, 71], "max": [1, 2, 10, 11, 53, 54, 55, 126], "max_gap": [53, 56, 112, 115, 120], "max_radiu": [13, 29, 33, 35, 41, 91, 98], "max_wd": [73, 75], "maxim": 126, "maximum": [1, 2, 10, 11, 13, 29, 33, 35, 41, 53, 55, 56, 61, 65, 66, 67, 73, 75, 76, 80, 82, 84, 85, 87, 91, 98, 101, 102, 112, 115, 120], "maximum_yaw_angl": [101, 102], "mean": [1, 2, 10, 11, 13, 22, 26, 28, 29, 32, 33, 35, 38, 39, 40, 41, 42, 43, 44, 45, 73, 74, 75, 91, 99, 100, 101, 102, 103, 106, 116, 117, 118, 120], "mean_wd": [73, 75], "measur": [13, 15, 19, 20, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 103, 104, 120, 126], "measurement_arrai": 49, "median": [44, 45, 53, 54, 55, 56, 73, 75, 120, 126], "median_wd": [73, 75], "merg": [13, 15, 18], "met": [44, 45, 47, 120, 126], "method": [1, 2, 4, 6, 8, 9, 10, 11, 13, 43, 44, 45, 53, 56, 60, 61, 65, 67, 69, 71, 76, 77, 91, 100, 112, 115, 120, 126], "metmast_col": 120, "metric": 121, "michael": [125, 126], "min": [1, 2, 10, 11, 53, 54, 55, 61, 65, 67, 76, 77, 126], "min_period": [53, 54, 55], "min_wd": [73, 75], "minim": [91, 99, 103, 105, 106], "minimum": [1, 2, 10, 11, 53, 54, 55, 61, 65, 66, 67, 70, 71, 73, 75, 76, 77, 82, 84, 85, 87, 101, 102], "minimum_yaw_angl": [101, 102], "minut": [44, 45, 120], "mirror_nan": [91, 100], "misalign": 126, "misc": 126, "miscalibr": 126, "miss": [13, 15, 107, 110], "missing_data_buff": [13, 15], "mode": [116, 118], "model": [58, 61, 65, 66, 91, 94, 95, 96, 97, 99, 100, 107, 116, 117, 118, 119, 120, 121, 123, 126], "model_fit": [119, 122], "modifi": [76, 77], "modul": [0, 1, 3, 5, 10, 12, 13, 42, 43, 49, 51, 58, 61, 70, 91, 92, 101, 103, 107, 112, 122, 124, 126], "monitor": [123, 126], "monoton": 112, "month": 120, "more": [13, 16, 44, 45, 48, 91, 99, 120, 121, 122, 124, 125, 126], "most": 120, "move": [53, 55, 126], "much": [13, 16], "mudafort": 126, "multi": [53, 57], "multipl": [3, 4, 44, 45, 120, 121, 126], "multipli": [44, 45], "must": [1, 2, 10, 11, 120, 124], "n": [1, 2, 5, 7, 8, 9, 10, 11, 13, 26, 38, 59, 60, 68, 69, 76, 87, 103, 104], "n_btstrp": [42, 43], "n_consecutive_measur": [44, 45, 49, 50], "n_eval_max": 49, "n_isnan": [44, 46], "nacel": 120, "nacwindspe": 120, "nacwindspeed_a1": 120, "nacwindspeed_a2": 120, "nacwindspeed_a3": 120, "name": [1, 2, 8, 9, 10, 11, 13, 24, 42, 43, 44, 45, 46, 76, 78, 79, 81, 82, 83, 84, 86, 87, 88, 120], "nan": [13, 14, 15, 18, 44, 45, 47, 48, 51, 52, 73, 74, 91, 100, 107, 110, 112, 115, 120], "nan_polici": [73, 74], "nan_thrshld": [51, 52], "ndarrai": [53, 54, 61, 63, 64, 65, 66, 67, 76, 80], "nearest": [13, 26, 76, 80, 91, 100, 112, 115], "necessarili": [42, 43], "need": [13, 16, 43, 91, 94, 95, 97, 120], "neg": 120, "neighbor": [3, 4, 91, 96, 112, 115], "nest": [107, 108, 109], "nested_get": 107, "nested_set": 107, "new": [5, 6, 8, 9, 13, 25, 44, 45, 53, 56, 76, 78, 79, 80, 81, 82, 83, 84, 86, 107, 110, 121, 124], "next": [1, 2, 10, 11, 120], "night": [13, 24, 25], "no_consecutive_measur": 49, "no_iter": [44, 45], "nomin": [42, 43, 120], "non": [13, 18, 44, 48, 101, 102], "none": [1, 2, 3, 4, 8, 9, 10, 11, 13, 22, 25, 42, 43, 44, 45, 47, 49, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 76, 77, 82, 84, 85, 91, 94, 95, 97, 101, 102, 103, 105, 106, 107, 109, 111, 116, 117, 118, 120], "nonetyp": [91, 94, 95, 97], "nonhomogen": 120, "nonzero": [91, 96, 120], "normal": [44, 45, 120], "north": [51, 52, 120, 123, 126], "note": [3, 4, 8, 9, 42, 43, 44, 45, 53, 55, 120], "notebook": 122, "notic": [91, 99], "now": 120, "np": [3, 4, 5, 7, 13, 22, 44, 45, 49, 50, 53, 54, 56, 61, 63, 64, 65, 66, 67, 70, 71, 73, 74, 91, 93, 94, 95, 97, 103, 104, 105, 106, 107, 111, 112, 115], "nrel": [123, 124, 125, 126], "nturb": [91, 92, 93], "null": [61, 62, 65, 67, 76, 81, 82, 83, 84, 87, 89, 90], "num_block": [5, 6, 7], "num_df": [76, 85], "num_thread": [59, 60], "number": [1, 2, 5, 6, 7, 10, 11, 13, 22, 23, 24, 26, 27, 29, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 50, 53, 54, 55, 70, 71, 76, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 104, 105, 112, 114, 119, 120], "numer": [44, 45, 122], "numpi": [73, 74, 75, 76, 80, 91, 97, 103, 105], "object": [1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 15, 42, 43, 44, 45, 51, 52, 60, 69, 70, 71, 76, 88, 91, 93, 94, 95, 96, 97, 99, 103, 104, 116, 117, 118], "obviou": 120, "obvious": 120, "occur": [13, 24, 44, 45, 120], "off": [44, 45, 91, 92], "offset": [42, 43, 44, 45, 51, 52, 101, 102, 103, 106, 120, 126], "offshor": [121, 126], "often": [44, 45, 120], "omit": [73, 74], "onc": 120, "one": [1, 2, 10, 11, 13, 18, 42, 43, 44, 45, 91, 96, 120, 121, 126, 127], "onli": [3, 4, 44, 45, 61, 67, 91, 97, 100, 120], "onto": [53, 56, 120], "oper": [3, 4, 12, 13, 16, 44, 45, 53, 76, 85, 91, 97, 99, 101, 102, 116, 118, 120, 121], "operation_mod": [116, 118], "opt": [44, 45], "opt_bias_rang": [70, 71], "opt_bound": [103, 105], "opt_n": [70, 71, 103, 105], "opt_pp_rang": [70, 71], "opt_search_brute_dx": [42, 43], "opt_search_rang": [42, 43], "opt_work": [42, 43], "opt_yshift_rang": [70, 71], "optim": [42, 43, 70, 71, 101, 102, 120, 126], "option": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 22, 24, 25, 29, 33, 35, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 59, 60, 68, 69, 76, 77, 85, 91, 92, 93, 96, 98, 99, 100, 101, 102, 107, 109, 111, 116, 117, 118, 121, 124], "orang": 120, "order": [1, 2, 10, 11, 91, 94, 95, 112, 120, 122], "origin": [5, 6, 76, 80], "orrespond": [10, 11], "other": [13, 18, 24, 91, 97, 98, 100, 120, 123, 126], "our": [91, 100, 120], "out": [44, 45, 120], "outcom": [91, 99], "outer": [91, 97], "outlier": [120, 126], "output": [49, 50, 53, 55, 91, 93, 98, 103, 104, 105, 107, 111, 112, 115], "outsid": [44, 45, 91, 100, 120], "over": [13, 25, 42, 43, 73, 74, 76, 78, 79, 81, 82, 83, 84, 91, 94, 95, 100, 120], "overal": [61, 62, 65], "overall_wake_loss": [61, 66], "overlap": [1, 2, 10, 11, 76, 80, 85, 87], "overlap_dist": [76, 80], "overlay_frequ": [8, 9], "overwritten": [44, 45], "own": 120, "p": [44, 45, 126], "p_measur": [68, 69, 103, 104], "packag": [72, 91, 94, 124], "pair": [1, 2, 10, 11, 76, 87], "panda": [13, 14, 24, 44, 45, 48, 91, 92, 93, 94, 95, 96, 99, 100, 107, 110, 120, 126], "param": [91, 100], "param_idx": [61, 66], "paramet": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 126], "part": 120, "particular": [13, 16, 44, 45, 48, 91, 99, 121], "particularli": [44, 45], "pass": [76, 87], "past": [101, 102], "path": [3, 4, 42, 43, 70, 71, 124], "paul": [125, 126], "pd": [1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 70, 71, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 107, 111, 112, 114, 120], "pdf": [3, 4], "pdf_cutoff": [91, 92], "pdf_save_path": [3, 4], "pearson": [42, 43, 103, 105, 120], "per": [1, 10, 44, 45], "percent": [1, 2, 61, 62], "percentag": 120, "percentil": [1, 2, 10, 11, 76, 87], "perform": [42, 43, 76, 85, 112, 115, 123, 126], "perform_resampl": [5, 6], "period": [13, 25, 44, 45, 53, 55, 120], "physic": [44, 45], "pink": 120, "pip": 124, "pl": [1, 5, 6, 10, 61, 62, 76, 77, 78, 79, 81, 82, 83, 84, 86, 87, 89, 90], "place": [61, 67, 76, 82, 84, 86, 88, 121], "plai": 126, "platform": [44, 45], "pleas": [120, 126], "plot": [3, 4, 8, 9, 13, 25, 42, 43, 44, 45, 49, 50, 51, 52, 61, 63, 64, 67, 70, 71, 91, 99, 120], "plot_background_flow": [3, 4], "plot_converg": [59, 60], "plot_cost_function_farm": [68, 69], "plot_cost_functions_turbin": [68, 69], "plot_energy_ratio": [8, 9, 42, 43], "plot_farm_mean_power_curv": [44, 45], "plot_figur": [49, 50, 51, 52], "plot_filters_custom_scatt": [44, 45], "plot_filters_custom_scatter_bokeh": [44, 45], "plot_filters_in_tim": [44, 45], "plot_filters_in_time_bokeh": [44, 45], "plot_filters_in_ws_power_curv": [44, 45], "plot_flowfield": [68, 69], "plot_graph": [3, 4], "plot_iter_path": [42, 43], "plot_layout": [3, 4], "plot_lin": [91, 99], "plot_postprocessed_in_ws_power_curv": [44, 45], "plot_power_bar": [68, 69], "plot_sobol_result": [59, 60], "plot_sun_altitude_with_day_night_color": 13, "plot_uplift": [8, 9], "plt": [13, 25, 44, 45], "plu": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 91, 100], "pmin": [70, 71], "png": [42, 43, 49, 59, 60], "point": [1, 2, 10, 11, 42, 43, 44, 45, 53, 54, 91, 92, 112, 115, 120], "polar": [1, 8, 9, 10, 42, 43, 61, 62, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 121, 126], "polar_plot": [8, 9], "popul": [13, 15], "posit": [107, 110, 120], "possibl": [13, 16, 91, 100, 120], "possibli": [13, 16, 61, 62, 76, 89, 90], "post": [91, 92, 126], "postprocess": [13, 15, 44, 45, 48, 91, 92, 126], "potenti": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 91, 100], "pow": [13, 22, 120], "pow_": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 91, 92, 93, 120], "pow_000": [44, 45, 46, 48, 91, 92, 93, 100], "pow_001": [44, 45, 46, 48, 91, 93, 100], "pow_002": [44, 48], "pow_006": [91, 93, 100], "pow_deadband": [44, 45], "pow_rang": 120, "pow_ref": [1, 2, 10, 11, 13, 26, 27, 28, 29, 38, 61, 62, 76, 78], "pow_test": [61, 62, 76, 79], "power": [1, 2, 10, 11, 13, 27, 28, 44, 45, 46, 47, 48, 70, 71, 76, 85, 91, 92, 93, 94, 95, 97, 100, 103, 104, 107, 111, 116, 117, 120, 126], "pp": [70, 71], "practic": [121, 126], "pre": [1, 10, 124], "precalcul": [91, 92, 100, 126], "precis": [13, 16, 44, 45], "predefin": [76, 87], "predict": [42, 43, 91, 92, 99, 100, 120], "prefix": [13, 22], "prepar": [120, 126], "present": [1, 2, 10, 11, 91, 99, 126], "prespecifi": [44, 45, 91, 98], "prevent": [91, 100], "previou": [44, 45, 120], "previous": [44, 45], "primarili": [107, 110, 120], "print": [8, 9, 13, 14, 16, 44, 45, 48, 49, 50, 53, 56, 91, 100, 103, 104, 105], "prior": 120, "privat": [44, 45], "probabl": [91, 92], "problem": [42, 43, 44, 45, 59, 60], "procedur": 120, "process": [44, 45, 53, 76, 85, 91, 92, 119, 126], "produc": [44, 45, 101, 102, 120, 126], "product": [10, 44, 45, 46, 47, 48, 91, 92, 93, 100, 120, 127], "progress": [13, 14, 16], "prolong": 120, "properti": [43, 73, 75], "provid": [1, 2, 8, 9, 10, 11, 13, 25, 44, 45, 76, 77, 91, 93, 120, 121, 122, 123, 126], "publish": 126, "put": [44, 45, 121], "pyplot": [44, 45], "python": [120, 124], "pywak": [91, 100], "quantif": [42, 43], "quantifi": [123, 126], "quantiti": [13, 26, 28, 29, 32, 33, 35, 38, 40, 41, 53, 55, 126], "queri": [44, 45], "question": [107, 108, 109], "quickli": [91, 96, 100], "r": [91, 98, 126], "radiu": [13, 26, 29, 33, 35, 38, 41, 76, 85, 87, 91, 98], "rais": [8, 9, 59, 60, 76, 77], "ramp": [101, 102], "ramp_down_w": [101, 102], "ramp_up_w": [101, 102], "rang": [13, 19, 20, 21, 26, 28, 29, 32, 33, 38, 40, 41, 42, 43, 76, 80, 91, 99, 100, 103, 105, 106, 120], "rapid": [91, 92], "rate": [44, 45], "rather": [13, 15, 44, 45, 76, 81, 82, 83, 84, 127], "ratio": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 42, 43, 61, 64, 67, 76, 80, 89, 90, 91, 100, 119, 120, 123, 126, 127], "raw": [91, 100, 119, 126], "raw_data_process": 120, "re": [91, 92, 124], "read": [44, 45], "readili": 120, "real": [13, 16, 91, 99, 120, 122], "receiv": [76, 77], "recent": 120, "recommend": [91, 100, 120, 122, 124], "reconfigur": 121, "rectangular": [91, 93], "red": 120, "reduc": [13, 16, 120], "reduct": [13, 16, 61, 62], "ref": [76, 89, 90], "ref_col": [1, 2, 8, 9, 10, 11, 76, 78, 85, 89, 90], "ref_turbin": [1, 2, 10, 11, 61, 65, 66, 67, 76, 87], "refer": [1, 2, 10, 11, 13, 27, 61, 65, 66, 67, 76, 85, 87, 89, 90, 91, 99, 103, 106, 107, 110, 111, 120, 121], "refin": [101, 102, 103, 104], "refine_with_fmin": [68, 69, 103, 104], "reflect": [76, 80, 85, 87], "regard": 126, "region": [44, 45, 101, 102], "reimplement": [61, 67], "rel": [44, 45, 120, 121, 126], "relat": 126, "relev": [13, 24, 29, 33, 35, 41, 51, 52, 70, 71], "reli": [120, 123, 126], "remain": 121, "remaind": [91, 100], "rememb": 124, "remov": [13, 14, 44, 45, 61, 65, 67, 76, 81, 82, 83, 84, 85, 87, 91, 96, 103, 105, 120, 126], "remove_all_nul": [1, 2, 8, 9, 10, 11, 61, 65, 67, 76, 81, 82, 83, 84, 85, 87], "renam": 120, "repeat": [5, 7, 120], "replac": [13, 18, 107, 110], "replic": [107, 110], "replicate_nan_valu": 107, "report": [44, 48, 120], "repositori": [0, 12, 58, 72, 122, 123, 124, 125, 126], "repres": [91, 97, 107, 110, 126, 127], "requir": [1, 2, 10, 11, 44, 48, 76, 85, 89, 90, 120], "resampl": [5, 6, 53, 56, 103, 105, 120], "resample_energy_t": [5, 6], "research": 126, "reset": [44, 45, 120], "reset_filt": [44, 45], "reset_index": 120, "resim_flori": 107, "resimul": [107, 110, 111], "resolut": [42, 43, 120], "respect": [42, 43, 61, 63, 64, 91, 100, 101, 102, 120, 126], "result": [1, 2, 8, 9, 10, 11, 44, 45, 76, 80, 85, 91, 92, 93, 99, 112, 115], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 125, 127], "return_by_column": [49, 50], "return_index_map": [53, 54], "return_influence_magnitud": [91, 97], "review": 126, "rich": [123, 126], "right": [44, 45, 76, 82, 84, 86, 88, 91, 92], "role": 126, "root": [43, 124], "rose": [91, 99, 100, 120, 121], "roughli": 122, "round": 120, "row": [5, 6, 13, 14, 15, 17, 18, 26, 28, 29, 32, 33, 38, 40, 41, 44, 48, 76, 80, 85, 91, 94, 95, 96, 97, 99, 101, 102], "run": [44, 45, 91, 92, 94, 95, 97, 120], "runtimeerror": [76, 77], "safe": [44, 45, 91, 96], "same": [5, 6, 13, 18, 42, 43, 44, 45, 76, 80, 91, 92, 100, 107, 110, 120], "sampl": [1, 2, 10, 11, 70, 71, 91, 100, 120], "save": [3, 4, 8, 9, 42, 43, 70, 71, 91, 93, 120, 126], "save_path": [42, 43, 49, 59, 60, 70, 71], "save_turbine_inflow_conditions_to_df": [91, 93], "scada": [0, 12, 42, 43, 44, 45, 46, 47, 48, 58, 61, 63, 65, 66, 67, 72, 91, 99, 107, 111, 120, 121, 123, 126], "scada_col": 120, "scada_result": [61, 63], "scale": [42, 43], "scatter": [44, 45], "scenario": [91, 100], "scheme": [8, 9], "scienc": 126, "scipi": [73, 74, 101, 102], "script": 120, "search": [42, 43], "second": [1, 2, 10, 11, 13, 15, 53, 54, 55, 61, 65, 66, 67, 91, 97, 120], "see": [120, 121, 126], "select": 120, "select_best_wake_model_paramet": 61, "select_best_wd_std": 61, "self": [44, 45, 47, 120], "sensor": [44, 45, 49, 50, 91, 100, 120, 126], "separ": [8, 9, 42, 43], "serial": [101, 102], "serv": [91, 99, 120], "server": 120, "set": [1, 2, 3, 4, 10, 11, 13, 24, 42, 43, 44, 45, 53, 56, 70, 71, 76, 89, 90, 91, 93, 99, 100, 101, 102, 107, 109, 120, 121, 126], "set_df": [70, 71], "set_measur": [68, 69], "set_pow_ref_by_n_closest_upstream_turbin": 13, "set_pow_ref_by_turbin": 13, "set_pow_ref_by_upstream_turbin": 13, "set_pow_ref_by_upstream_turbines_in_radiu": 13, "set_ti_by_all_turbin": 13, "set_ti_by_turbin": 13, "set_ti_by_upstream_turbin": 13, "set_ti_by_upstream_turbines_in_radiu": 13, "set_wd_by_all_turbin": 13, "set_wd_by_radius_from_turbin": 13, "set_wd_by_turbin": 13, "set_ws_by_all_turbin": 13, "set_ws_by_n_closest_upstream_turbin": 13, "set_ws_by_turbin": 13, "set_ws_by_upstream_turbin": 13, "set_ws_by_upstream_turbines_in_radiu": 13, "setup": 124, "sever": [44, 45], "share": 120, "shed": [44, 48], "shift": [42, 43, 70, 71, 103, 104, 105, 120], "should": [1, 2, 10, 11, 13, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 53, 55, 76, 80, 91, 96, 99, 100, 112, 116, 117, 118, 120], "show": [8, 9, 42, 43, 44, 45, 48, 120], "show_uncorrected_data": [42, 43], "show_wind_direction_distribut": [8, 9], "show_wind_speed_distribut": [8, 9], "shown": [8, 9, 44, 45, 120], "shutdown": [44, 45], "side": 120, "signal": [44, 45, 120], "significantli": 120, "similar": [120, 127], "similarli": 120, "simlei": 126, "simpl": [91, 96], "simpler": 120, "simpli": [13, 15, 91, 95, 120], "simplifi": [91, 96, 120], "simul": [51, 52, 91, 93, 96, 126], "sinc": [44, 45, 120], "singl": [8, 9, 120, 127], "sinner": [125, 126], "situat": [44, 45, 47, 120], "size": [13, 16, 42, 43, 44, 45, 76, 82, 84, 85, 87, 91, 93, 97, 100, 126], "slice": 120, "slightli": [42, 43, 44, 45, 91, 99], "slope": [91, 96, 99], "smaller": 120, "smallest": [76, 82, 84, 86, 88], "smarteol": [121, 127], "so": [44, 45, 48, 91, 99, 120], "softwar": 126, "solut": [44, 45, 91, 92, 93, 100, 126], "solv": [42, 43, 122], "some": [61, 67, 76, 77], "someon": [13, 18], "somewher": [44, 45], "sort": [13, 17, 18, 91, 95, 98, 112], "sort_by_dist": [91, 98], "sourc": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 124, 126], "space": [42, 43], "speak": 122, "specif": [44, 45, 46, 76, 85, 91, 100, 120, 121], "specifi": [1, 2, 10, 11, 13, 22, 42, 43, 44, 45, 73, 74, 76, 85, 86, 88, 91, 95, 97, 116, 118, 120, 126], "speed": [1, 2, 3, 4, 8, 9, 10, 11, 13, 16, 21, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 61, 65, 66, 67, 76, 84, 85, 87, 89, 90, 91, 93, 94, 95, 97, 100, 101, 102, 107, 111, 120, 126], "sql": 120, "squar": [61, 63, 64, 103, 106], "stackoverflow": [107, 108, 109], "standard": [44, 45, 49, 50, 53, 55, 73, 75, 91, 92, 116, 117, 118], "start": [13, 15, 101, 102, 103, 105, 121], "stat": [73, 74], "state": 120, "statist": [73, 75, 76, 85, 103, 105], "statu": [44, 45, 47, 51, 52], "std": [53, 54, 55, 126], "std_wd": [73, 75], "stddev_threshold": [44, 45, 49, 50], "steer": [61, 65, 101, 102, 121, 122, 126], "step": [1, 2, 10, 11, 42, 43, 44, 45, 51, 52, 61, 65, 67, 76, 82, 84, 85, 87, 91, 92, 99, 100, 103, 104, 105, 120, 122], "still": [13, 29, 33, 35, 41, 91, 98, 112, 115], "storag": [13, 16, 120, 126], "store": [8, 9], "str": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 22, 24, 42, 43, 44, 45, 53, 56, 59, 60, 61, 65, 66, 67, 70, 71, 73, 74, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 100, 107, 108, 109, 112, 115, 116, 117, 118], "straightforwardli": 120, "streamhandl": 43, "streamlit": 120, "strictli": [1, 2, 10, 11], "string": [44, 45, 51, 52, 76, 87], "strongest": [91, 94], "strongli": 120, "structur": [5, 6], "stuck": [44, 45, 49, 50, 120, 126], "subdirectori": 122, "submodul": 119, "subset": [8, 9, 44, 45], "subtleti": 120, "subtract": [76, 80, 120], "suffici": [44, 48], "suggest": [44, 45], "suit": [120, 123, 126], "sum": [1, 2, 10, 11, 61, 65, 67, 76, 77], "sun": [13, 24, 25], "sun_altitud": [13, 24, 25], "sunris": [13, 24], "sunrise_altitud": [13, 24], "sunset": [13, 24], "sunset_altitud": [13, 24], "support": 126, "supposedli": [91, 96], "sure": [44, 45, 120], "surround": 120, "sweep": [61, 65, 66, 67], "sweep_deflection_parameter_for_total_uplift": 61, "sweep_velocity_model_parameter_for_overall_wake_loss": 61, "sweep_wd_std_for_": 61, "sychron": 126, "synchron": 120, "syntax": 121, "synthet": [123, 126], "t": [1, 2, 10, 11, 91, 94, 95, 98], "t0": [103, 105], "t1": [103, 105], "t_step": [103, 105], "tabl": [5, 6, 10, 42, 43, 76, 77, 91, 93, 100, 101, 116, 117, 125], "take": [13, 15, 61, 67, 76, 85, 101, 102, 107, 111, 120], "taken": 126, "target_i": [112, 115], "td": [51, 52], "team": [125, 126], "technic": 126, "term": [1, 2, 10, 11, 42, 43, 120], "test": [1, 2, 10, 11, 42, 43, 61, 65, 66, 67, 76, 85, 87, 89, 90, 91, 97, 99, 103, 106, 120, 121], "test_col": [1, 2, 8, 9, 10, 11, 76, 79, 85, 89, 90], "test_turbin": [1, 2, 10, 11, 42, 43, 61, 65, 66, 67, 76, 87, 91, 97], "test_turbines_subset": [42, 43], "than": [13, 15, 42, 43, 44, 45, 48, 76, 81, 82, 83, 84, 86, 88, 112, 115, 120], "thei": [1, 2, 10, 11, 13, 29, 33, 35, 41, 76, 87, 120], "them": [44, 45, 120], "therebi": [91, 92], "therefor": [91, 100, 120], "thi": [3, 4, 5, 6, 13, 15, 16, 17, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 73, 75, 76, 77, 80, 85, 87, 91, 92, 93, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 115, 120, 122, 124, 126], "those": [1, 2, 10, 11, 44, 45, 91, 96, 99], "though": [91, 99, 120], "three": [91, 92, 121, 126], "threshold": [44, 45, 49, 50, 51, 52, 61, 67], "through": [120, 122, 124], "throughout": [43, 122], "thrown": [13, 18], "thrust": [116, 117], "thu": 120, "ti": [3, 13, 27, 30, 31, 32, 33, 44, 45, 48, 49, 50, 68, 69, 70, 71, 91, 92, 93, 100, 120, 126], "ti_": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "ti_000": [91, 93], "ti_006": [91, 93], "ti_arrai": [91, 93], "ti_estim": 68, "ti_mask": [42, 43], "ti_rang": [13, 19], "time": [5, 7, 13, 14, 15, 17, 18, 24, 25, 42, 43, 44, 45, 46, 51, 52, 53, 54, 55, 56, 91, 100, 103, 104, 105, 112, 113, 120], "time_arrai": [53, 56, 112, 113, 120], "time_mask": [42, 43], "time_oper": 120, "timedelta": [51, 52, 53, 54, 55, 112, 113], "timedelta64": [103, 105], "timeseri": [91, 100, 126], "timeshift": [120, 126], "timestamp": [13, 24, 44, 45, 48, 120], "timestep": [53, 56, 112, 113], "timezon": 120, "titl": [44, 45, 126], "to_datetim": [42, 43], "todo": [61, 67], "too": [44, 45], "tool": [61, 65, 66, 91, 100, 120, 122, 123, 124, 126], "toolbox": [120, 123], "top": [44, 45, 72], "total": [10, 61, 65, 126], "toward": 120, "transit": [101, 102], "travers": [107, 108, 109], "treat": [53, 55], "trend": [44, 45], "true": [1, 2, 5, 6, 8, 9, 10, 11, 13, 16, 33, 35, 41, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 73, 75, 76, 85, 91, 93, 97, 100, 103, 105, 106, 112, 115, 120], "trust": 120, "try": [44, 45], "tune": [61, 107], "tupl": [1, 2, 3, 4, 10, 11, 42, 43, 44, 45, 53, 54, 61, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 91, 97, 103, 106], "turb_no": [13, 26, 29, 33, 35, 38, 41, 91, 98], "turbin": [1, 2, 3, 4, 10, 11, 13, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 61, 65, 66, 67, 70, 71, 76, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 111, 112, 114, 116, 118, 121, 123, 126], "turbine_list": [13, 22, 44, 47], "turbine_nam": [44, 45], "turbine_numb": [13, 27, 30, 31, 36, 37, 39], "turbine_subset": [44, 45], "turbine_upstream": [103, 104], "turbine_weight": [91, 96], "turbines_downstream": [103, 104], "turbopark": [116, 117, 118], "turbul": [13, 19, 27, 30, 31, 32, 42, 43, 91, 93, 100, 103, 104, 126], "turbulence_intens": [101, 102], "turn": 124, "two": [1, 2, 10, 11, 13, 17, 18, 24, 42, 43, 44, 45, 76, 89, 90, 103, 105, 106, 107, 110, 120, 126], "type": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 126], "typic": [13, 16, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 91, 92, 96, 99, 100, 101, 102, 120], "typl": [61, 65], "uncalibr": 120, "uncertain": 120, "uncertainflorismodel": [91, 92], "uncertainti": [42, 43, 116, 117, 118], "uncommon": [42, 43], "uncorrect": [42, 43], "under": [42, 43, 125], "understand": 122, "union": [8, 9], "uniqu": [44, 45], "unless": [8, 9, 76, 85], "unrealist": 120, "unsort": [13, 17, 18], "unstack": 120, "until": [13, 29, 33, 35, 41, 91, 92, 93], "unus": [49, 50], "unwak": [91, 99], "up": [13, 16, 44, 45, 91, 100, 101, 102, 120, 126], "updat": [107, 110], "uplift": [1, 2, 8, 9, 10, 11, 61, 65, 76, 87, 126], "uplift_absolut": [1, 2, 76, 87], "uplift_col": [8, 9], "uplift_df_name1_df_name2": [1, 2, 10, 11], "uplift_nam": [1, 2, 10, 11, 76, 87], "uplift_names_subset": [8, 9], "uplift_pair": [1, 2, 10, 11, 76, 87], "upper": [13, 19, 20, 21, 42, 43, 44, 45, 70, 71], "upsampl": 126, "upstream": [3, 4, 13, 26, 28, 29, 32, 33, 35, 38, 40, 41, 44, 48, 70, 71, 91, 99, 103, 104, 126], "uq": [42, 43], "url": 126, "us": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13, 15, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 62, 66, 70, 71, 76, 77, 80, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 124, 126, 127], "usag": [44, 45, 120, 126, 127], "use_circular_statist": [103, 105], "use_predefined_ref": [1, 2, 10, 11, 76, 87], "use_predefined_w": [1, 2, 10, 11, 76, 87], "use_predefined_wd": [1, 2, 10, 11, 76, 87], "useabl": 120, "user": [43, 44, 45, 91, 100, 120, 122, 124, 126], "userwarn": [76, 77], "utc": [13, 24], "util": [13, 26, 28, 29, 32, 33, 38, 40, 41, 44, 48, 119, 122, 123], "v": [44, 45, 120], "v1": 121, "valid": [44, 45, 53, 54, 76, 85, 87, 89, 90, 91, 100, 120, 123, 126], "valu": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 15, 18, 27, 28, 30, 31, 32, 34, 36, 37, 39, 40, 42, 43, 44, 45, 51, 52, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 120, 127], "value_candid": [61, 63, 64, 65, 66, 67], "valueerror": [8, 9], "vane": [70, 71, 120], "vane_bound": [70, 71], "vari": [91, 99], "variabl": [13, 16, 26, 28, 29, 32, 33, 38, 40, 41, 42, 43, 44, 45, 47, 91, 93, 101, 102, 120, 126], "variant": 120, "variat": [44, 45], "variou": [42, 43, 44, 45, 120], "vector": [103, 105, 120], "venv": 124, "verbos": [13, 14, 16, 44, 45, 48, 49, 50, 53, 56, 59, 60, 68, 69, 91, 100, 103, 104, 105, 120], "veri": [44, 45, 46, 91, 96, 120, 126], "version": 126, "via": [107, 108, 109], "virtual": 124, "visual": [3, 4, 126], "w": [1, 2, 8, 9, 10, 11, 13, 37, 38, 39, 40, 41, 68, 69, 76, 77, 83, 85, 89, 90, 91, 92, 93, 98, 100, 120], "wa": [44, 45, 121], "wai": [13, 15, 120, 122], "wake": [42, 43, 44, 48, 61, 62, 63, 65, 66, 91, 96, 99, 101, 102, 116, 117, 118, 120, 121, 122, 123, 126], "wake_loss_thr": [68, 69], "wake_model": [116, 117, 118], "wake_slop": [91, 96, 99], "want": [44, 45, 107, 110, 112, 115], "warn": [91, 100], "wd": [1, 2, 3, 4, 10, 11, 13, 34, 35, 36, 42, 43, 44, 48, 68, 69, 76, 77, 81, 85, 89, 90, 91, 92, 93, 94, 95, 100, 120], "wd_": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 120], "wd_000": [44, 45, 48, 91, 93, 120], "wd_001": [44, 48, 120], "wd_002": [44, 48], "wd_003": [44, 45, 120], "wd_006": [91, 93], "wd_arrai": [3, 4, 91, 93, 94, 95, 96, 97], "wd_bia": [42, 43], "wd_bin": [1, 2, 3, 10, 11, 61, 65, 67, 76, 82], "wd_bin_overlap_radiu": [1, 2, 8, 9, 10, 11, 76, 85, 87], "wd_bin_width": [3, 4, 42, 43], "wd_col": [1, 2, 8, 9, 10, 11, 76, 81, 82, 85, 89, 90], "wd_mask": [42, 43], "wd_max": [1, 2, 8, 9, 10, 11, 61, 65, 66, 67, 76, 82, 85, 87], "wd_min": [1, 2, 8, 9, 10, 11, 61, 65, 66, 67, 76, 82, 85, 87], "wd_rang": [13, 20], "wd_std": [61, 64, 67, 91, 92, 116, 117, 118], "wd_step": [1, 2, 8, 9, 10, 11, 42, 43, 61, 65, 67, 76, 82, 85, 87, 91, 99], "wd_turbin": [1, 2, 10, 11, 76, 87], "we": [3, 4, 44, 45, 48, 91, 100, 120, 122], "week": [44, 45, 120], "weight": [1, 2, 10, 11, 61, 65, 67, 76, 77, 87, 91, 96], "weight_bi": [1, 2, 8, 9, 10, 11, 61, 65, 67, 76, 77, 87], "weigth": [1, 2, 10, 11], "welcom": 123, "well": [13, 25, 126], "were": [44, 45, 121, 126], "what": [42, 43, 91, 99, 120, 126], "when": [1, 2, 10, 11, 42, 43, 44, 45, 47, 61, 67, 91, 93, 107, 110, 116, 118, 124], "where": [1, 2, 3, 4, 5, 7, 10, 11, 13, 14, 15, 42, 43, 44, 45, 53, 54, 61, 65, 66, 70, 71, 76, 80, 91, 99, 120, 122], "whether": [3, 4, 8, 9, 13, 24, 44, 45, 47, 49, 50, 51, 52, 73, 75, 76, 87, 91, 97], "which": [1, 2, 10, 11, 13, 18, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 73, 74, 75, 76, 78, 79, 81, 82, 83, 84, 87, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 112, 115, 119, 120, 126], "while": 126, "whose": [76, 82, 84, 86, 88], "widespread": 120, "width": [1, 2, 10, 11, 42, 43, 53, 54, 55, 70, 71], "wind": [1, 2, 3, 4, 8, 9, 10, 11, 13, 20, 21, 26, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 61, 65, 66, 67, 73, 74, 75, 76, 80, 82, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 107, 111, 116, 117, 118, 121, 123, 126, 127], "wind_direct": [101, 102], "wind_spe": [101, 102], "winddirection_80m": 120, "window": [44, 45, 53, 54, 55, 120], "window_add": 120, "window_width": [53, 54, 55], "windspe": 120, "wise": [44, 45], "within": [13, 15, 29, 33, 35, 41, 44, 45, 76, 80, 85, 91, 98, 120, 121, 126], "without": [13, 16, 76, 77, 85, 91, 92, 96], "work": 124, "worker": [42, 43], "would": [44, 45, 120, 126], "wrap": [76, 80, 103, 106, 112, 115, 120, 126], "wrap_0deg_to_360deg": [91, 100], "wrap_around_360": [112, 115], "wrapper": [73, 74, 91, 94, 95], "write": [91, 93, 126], "wrt": [61, 65], "ws_": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 120], "ws_000": [44, 45, 46, 91, 93, 120], "ws_001": [44, 45, 46], "ws_003": [44, 45], "ws_006": [91, 93], "ws_arrai": [91, 93], "ws_bin": [1, 2, 10, 11, 44, 45, 61, 65, 67, 76, 82, 84], "ws_col": [1, 2, 8, 9, 10, 11, 76, 83, 84, 85, 89, 90], "ws_deadband": [44, 45], "ws_mask": [42, 43], "ws_max": [1, 2, 8, 9, 10, 11, 61, 65, 66, 67, 76, 82, 84, 85, 87], "ws_min": [1, 2, 8, 9, 10, 11, 61, 65, 66, 67, 76, 82, 84, 85, 87], "ws_rang": [3, 4, 13, 21, 120], "ws_step": [1, 2, 8, 9, 10, 11, 42, 43, 61, 65, 67, 76, 82, 84, 85, 87], "ws_test": [91, 94, 95, 97], "ws_turbin": [1, 2, 10, 11, 76, 87], "x": [13, 26, 29, 33, 35, 38, 41, 44, 45, 70, 71, 91, 97, 103, 104, 105, 112, 115], "x0": [70, 71], "x_col": [44, 45], "x_opt": [70, 71, 103, 104, 105], "x_turb": [13, 26, 29, 33, 35, 38, 41, 91, 98], "xlabel": [44, 45], "xp": [112, 115], "y": [3, 4, 13, 26, 29, 33, 35, 38, 41, 44, 45, 70, 71, 103, 105, 112, 115], "y_col": [44, 45], "y_shift_rang": [103, 105], "y_turb": [13, 26, 29, 33, 35, 38, 41, 91, 98], "yaw": [61, 65, 66, 67, 70, 71, 101, 102, 107, 111, 120, 126], "yaw_": 120, "yaw_000": 120, "yaw_001": 120, "yaw_angl": [61, 66, 67, 107, 111], "yaw_angles_baselin": [61, 65], "yaw_angles_opt": [101, 102], "yaw_angles_wakest": [61, 65], "yaw_optimizer_visu": 126, "year": 126, "yet": [44, 45, 61, 62, 120], "yield": [91, 93, 99, 121], "ylabel": [44, 45], "ylim": [3, 4], "you": [44, 45, 47, 107, 110, 112, 115, 120, 122, 124, 126], "your": [13, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 91, 99, 100, 124, 126], "yref": [103, 106], "ytest": [103, 106], "zero": [1, 2, 10, 11, 44, 45, 101, 102], "zoh": [13, 15]}, "titles": ["flasc.analysis", "flasc.analysis.energy_ratio", "flasc.analysis.energy_ratio.compute_energy_ratio", "flasc.analysis.energy_ratio_heterogeneity_mapper", "flasc.analysis.energy_ratio_heterogeneity_mapper.heterogeneity_mapper", "flasc.analysis.energy_ratio_input", "flasc.analysis.energy_ratio_input.EnergyRatioInput", "flasc.analysis.energy_ratio_input.generate_block_list", "flasc.analysis.energy_ratio_output", "flasc.analysis.energy_ratio_output.EnergyRatioOutput", "flasc.analysis.total_uplift", "flasc.analysis.total_uplift.compute_total_uplift", "flasc.data_processing", "flasc.data_processing.dataframe_manipulations", "flasc.data_processing.dataframe_manipulations.df_drop_nan_rows", "flasc.data_processing.dataframe_manipulations.df_find_and_fill_data_gaps_with_missing", "flasc.data_processing.dataframe_manipulations.df_reduce_precision", "flasc.data_processing.dataframe_manipulations.df_sort_and_find_duplicates", "flasc.data_processing.dataframe_manipulations.df_sort_and_fix_duplicates", "flasc.data_processing.dataframe_manipulations.filter_df_by_ti", "flasc.data_processing.dataframe_manipulations.filter_df_by_wd", "flasc.data_processing.dataframe_manipulations.filter_df_by_ws", "flasc.data_processing.dataframe_manipulations.get_column_mean", "flasc.data_processing.dataframe_manipulations.get_num_turbines", "flasc.data_processing.dataframe_manipulations.is_day_or_night", "flasc.data_processing.dataframe_manipulations.plot_sun_altitude_with_day_night_color", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_n_closest_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_pow_ref_by_upstream_turbines_in_radius", "flasc.data_processing.dataframe_manipulations.set_ti_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ti_by_upstream_turbines_in_radius", "flasc.data_processing.dataframe_manipulations.set_wd_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_wd_by_radius_from_turbine", "flasc.data_processing.dataframe_manipulations.set_wd_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_all_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_n_closest_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines", "flasc.data_processing.dataframe_manipulations.set_ws_by_upstream_turbines_in_radius", "flasc.data_processing.energy_ratio_wd_bias_estimation", "flasc.data_processing.energy_ratio_wd_bias_estimation.bias_estimation", "flasc.data_processing.filtering", "flasc.data_processing.filtering.FlascFilter", "flasc.data_processing.filtering.df_get_no_faulty_measurements", "flasc.data_processing.filtering.df_mark_turbdata_as_faulty", "flasc.data_processing.filtering.filter_df_by_faulty_impacting_turbines", "flasc.data_processing.find_sensor_faults", "flasc.data_processing.find_sensor_faults.find_sensor_stuck_faults", "flasc.data_processing.northing_offset", "flasc.data_processing.northing_offset.crosscheck_northing_offset_consistency", "flasc.data_processing.time_operations", "flasc.data_processing.time_operations.df_downsample", "flasc.data_processing.time_operations.df_movingaverage", "flasc.data_processing.time_operations.df_resample_by_interpolation", "flasc.data_processing.time_operations.flatten_cols", "flasc.model_fitting", "flasc.model_fitting.floris_sensitivity_analysis", "flasc.model_fitting.floris_sensitivity_analysis.floris_sobol_analysis", "flasc.model_fitting.floris_tuning", "flasc.model_fitting.floris_tuning.evaluate_overall_wake_loss", "flasc.model_fitting.floris_tuning.select_best_wake_model_parameter", "flasc.model_fitting.floris_tuning.select_best_wd_std", "flasc.model_fitting.floris_tuning.sweep_deflection_parameter_for_total_uplift", "flasc.model_fitting.floris_tuning.sweep_velocity_model_parameter_for_overall_wake_losses", "flasc.model_fitting.floris_tuning.sweep_wd_std_for_er", "flasc.model_fitting.turbulence_estimator", "flasc.model_fitting.turbulence_estimator.ti_estimator", "flasc.model_fitting.yaw_pow_fitting", "flasc.model_fitting.yaw_pow_fitting.yaw_pow_fitting", "flasc.utilities", "flasc.utilities.circular_statistics", "flasc.utilities.circular_statistics.calc_wd_mean_radial", "flasc.utilities.circular_statistics.calculate_wd_statistics", "flasc.utilities.energy_ratio_utilities", "flasc.utilities.energy_ratio_utilities.add_bin_weights", "flasc.utilities.energy_ratio_utilities.add_power_ref", "flasc.utilities.energy_ratio_utilities.add_power_test", "flasc.utilities.energy_ratio_utilities.add_reflected_rows", "flasc.utilities.energy_ratio_utilities.add_wd", "flasc.utilities.energy_ratio_utilities.add_wd_bin", "flasc.utilities.energy_ratio_utilities.add_ws", "flasc.utilities.energy_ratio_utilities.add_ws_bin", "flasc.utilities.energy_ratio_utilities.bin_and_group_dataframe", "flasc.utilities.energy_ratio_utilities.bin_column", "flasc.utilities.energy_ratio_utilities.check_compute_energy_ratio_inputs", "flasc.utilities.energy_ratio_utilities.cut", "flasc.utilities.energy_ratio_utilities.filter_all_nulls", "flasc.utilities.energy_ratio_utilities.filter_any_nulls", "flasc.utilities.floris_tools", "flasc.utilities.floris_tools.add_gaussian_blending_to_floris_approx_table", "flasc.utilities.floris_tools.calc_floris_approx_table", "flasc.utilities.floris_tools.get_all_dependent_turbines", "flasc.utilities.floris_tools.get_all_impacting_turbines", "flasc.utilities.floris_tools.get_all_impacting_turbines_geometrical", "flasc.utilities.floris_tools.get_dependent_turbines_by_wd", "flasc.utilities.floris_tools.get_turbs_in_radius", "flasc.utilities.floris_tools.get_upstream_turbs_floris", "flasc.utilities.floris_tools.interpolate_floris_from_df_approx", "flasc.utilities.lookup_table_tools", "flasc.utilities.lookup_table_tools.get_yaw_angles_interpolant", "flasc.utilities.optimization", "flasc.utilities.optimization.estimate_ti", "flasc.utilities.optimization.find_timeshift_between_dfs", "flasc.utilities.optimization.match_y_curves_by_offset", "flasc.utilities.tuner_utilities", "flasc.utilities.tuner_utilities.nested_get", "flasc.utilities.tuner_utilities.nested_set", "flasc.utilities.tuner_utilities.replicate_nan_values", "flasc.utilities.tuner_utilities.resim_floris", "flasc.utilities.utilities", "flasc.utilities.utilities.estimate_dt", "flasc.utilities.utilities.get_num_turbines", "flasc.utilities.utilities.interp_with_max_gap", "flasc.utilities.utilities_examples", "flasc.utilities.utilities_examples.load_floris_artificial", "flasc.utilities.utilities_examples.load_floris_smarteole", "API Documentation", "Raw data processing", "Energy ratio analysis", "Getting started", "FLASC documentation", "Installation", "Licensing", "Overview", "Total uplift"], "titleterms": {"a_00_initial_download": 120, "a_01_to_common_format_df": 120, "a_02_basic_filt": 120, "a_03_check_sensor_stuck_fault": 120, "a_04_wspowercurve_filtering_cod": 120, "a_04_wspowercurve_filtering_gui": 120, "a_05a_plot_faults_with_layout": 120, "a_05b_cross_compare_wd_measurement_calibr": 120, "a_06a_determine_timeshift_datasourc": 120, "a_06b_apply_timeshift_df": 120, "a_07a_estimate_wd_bias_per_turbin": 120, "a_07b_wd_bias_to_df": 120, "a_08_plot_energy_ratio": 120, "add_bin_weight": 77, "add_gaussian_blending_to_floris_approx_t": 92, "add_power_ref": 78, "add_power_test": 79, "add_reflected_row": 80, "add_w": 83, "add_wd": 81, "add_wd_bin": 82, "add_ws_bin": 84, "analysi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 121, 126], "api": 119, "bias_estim": 43, "bin_and_group_datafram": 85, "bin_column": 86, "calc_floris_approx_t": 93, "calc_wd_mean_radi": 74, "calculate_wd_statist": 75, "check_compute_energy_ratio_input": 87, "circular_statist": [73, 74, 75], "citat": 126, "compute_energy_ratio": 2, "compute_total_uplift": 11, "crosscheck_northing_offset_consist": 52, "cut": 88, "data": 120, "data_process": [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 126], "dataframe_manipul": [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "demonstr": 121, "develop": 124, "df_downsampl": 54, "df_drop_nan_row": 14, "df_find_and_fill_data_gaps_with_miss": 15, "df_get_no_faulty_measur": 46, "df_mark_turbdata_as_faulti": 47, "df_movingaverag": 55, "df_reduce_precis": 16, "df_resample_by_interpol": 56, "df_sort_and_find_dupl": 17, "df_sort_and_fix_dupl": 18, "document": [119, 123], "energi": 121, "energy_ratio": [1, 2], "energy_ratio_heterogeneity_mapp": [3, 4], "energy_ratio_input": [5, 6, 7], "energy_ratio_output": [8, 9], "energy_ratio_util": [76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "energy_ratio_wd_bias_estim": [42, 43], "energyratioinput": 6, "energyratiooutput": 9, "estimate_dt": 113, "estimate_ti": 104, "evaluate_overall_wake_loss": 62, "exampl": [120, 121, 122], "farm": 120, "filter": [44, 45, 46, 47, 48, 120], "filter_all_nul": 89, "filter_any_nul": 90, "filter_df_by_faulty_impacting_turbin": 48, "filter_df_by_ti": 19, "filter_df_by_w": 21, "filter_df_by_wd": 20, "find_sensor_fault": [49, 50], "find_sensor_stuck_fault": 50, "find_timeshift_between_df": 105, "flasc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 126], "flascfilt": 45, "flatten_col": 57, "floris_sensitivity_analysi": [59, 60], "floris_sobol_analysi": 60, "floris_tool": [91, 92, 93, 94, 95, 96, 97, 98, 99, 100], "floris_tun": [61, 62, 63, 64, 65, 66, 67], "format": 120, "generate_block_list": 7, "get": 122, "get_all_dependent_turbin": 94, "get_all_impacting_turbin": 95, "get_all_impacting_turbines_geometr": 96, "get_column_mean": 22, "get_dependent_turbines_by_wd": 97, "get_num_turbin": [23, 114], "get_turbs_in_radiu": 98, "get_upstream_turbs_flori": 99, "get_yaw_angles_interpol": 102, "heterogeneity_mapp": 4, "instal": [122, 124], "interp_with_max_gap": 115, "interpolate_floris_from_df_approx": 100, "is_day_or_night": 24, "licens": 125, "literatur": 126, "load_floris_artifici": 117, "load_floris_smarteol": 118, "lookup_table_tool": [101, 102], "match_y_curves_by_offset": 106, "model_fit": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 126], "necessari": 120, "nested_get": 108, "nested_set": 109, "northing_offset": [51, 52], "optim": [103, 104, 105, 106], "option": 120, "overview": 126, "packag": 126, "plot_sun_altitude_with_day_night_color": 25, "process": 120, "py": 120, "question": 126, "ratio": 121, "raw": 120, "replicate_nan_valu": 110, "resim_flori": 111, "retriev": 120, "select_best_wake_model_paramet": 63, "select_best_wd_std": 64, "set_pow_ref_by_n_closest_upstream_turbin": 26, "set_pow_ref_by_turbin": 27, "set_pow_ref_by_upstream_turbin": 28, "set_pow_ref_by_upstream_turbines_in_radiu": 29, "set_ti_by_all_turbin": 30, "set_ti_by_turbin": 31, "set_ti_by_upstream_turbin": 32, "set_ti_by_upstream_turbines_in_radiu": 33, "set_wd_by_all_turbin": 34, "set_wd_by_radius_from_turbin": 35, "set_wd_by_turbin": 36, "set_ws_by_all_turbin": 37, "set_ws_by_n_closest_upstream_turbin": 38, "set_ws_by_turbin": 39, "set_ws_by_upstream_turbin": 40, "set_ws_by_upstream_turbines_in_radiu": 41, "start": 122, "sweep_deflection_parameter_for_total_uplift": 65, "sweep_velocity_model_parameter_for_overall_wake_loss": 66, "sweep_wd_std_for_": 67, "tabl": 120, "tall": 120, "three": 120, "ti_estim": 69, "time_oper": [53, 54, 55, 56, 57], "total": 127, "total_uplift": [10, 11], "tuner_util": [107, 108, 109, 110, 111], "turbin": 120, "turbulence_estim": [68, 69], "uplift": 127, "usag": 121, "util": [72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126], "utilities_exampl": [116, 117, 118], "wide": 120, "wind": 120, "yaw_pow_fit": [70, 71]}})